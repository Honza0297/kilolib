
build/blank.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      18:	0c 94 39 02 	jmp	0x472	; 0x472 <__vector_6>
      1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      2c:	0c 94 78 09 	jmp	0x12f0	; 0x12f0 <__vector_11>
      30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      38:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__vector_14>
      3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      5c:	0c 94 98 09 	jmp	0x1330	; 0x1330 <__vector_23>
      60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      74:	14 be       	out	0x34, r1	; 52

00000076 <.LBB76>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      76:	0f b6       	in	r0, 0x3f	; 63
      78:	f8 94       	cli
      7a:	a8 95       	wdr
      7c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      80:	88 61       	ori	r24, 0x18	; 24
      82:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      86:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      8a:	0f be       	out	0x3f, r0	; 63

0000008c <__do_copy_data>:
      8c:	11 e0       	ldi	r17, 0x01	; 1

0000008e <.Loc.1>:
      8e:	a0 e0       	ldi	r26, 0x00	; 0

00000090 <.Loc.2>:
      90:	b1 e0       	ldi	r27, 0x01	; 1

00000092 <.Loc.3>:
      92:	ec e2       	ldi	r30, 0x2C	; 44

00000094 <.Loc.4>:
      94:	f0 e2       	ldi	r31, 0x20	; 32

00000096 <.Loc.5>:
      96:	02 c0       	rjmp	.+4      	; 0x9c <.L__do_copy_data_start>

00000098 <.L__do_copy_data_loop>:
      98:	05 90       	lpm	r0, Z+

0000009a <.Loc.7>:
      9a:	0d 92       	st	X+, r0

0000009c <.L__do_copy_data_start>:
      9c:	ac 30       	cpi	r26, 0x0C	; 12

0000009e <.Loc.9>:
      9e:	b1 07       	cpc	r27, r17

000000a0 <.Loc.10>:
      a0:	d9 f7       	brne	.-10     	; 0x98 <.L__do_copy_data_loop>

000000a2 <__do_clear_bss>:
      a2:	21 e0       	ldi	r18, 0x01	; 1

000000a4 <.Loc.1>:
      a4:	ac e0       	ldi	r26, 0x0C	; 12

000000a6 <.Loc.2>:
      a6:	b1 e0       	ldi	r27, 0x01	; 1

000000a8 <.Loc.3>:
      a8:	01 c0       	rjmp	.+2      	; 0xac <.Loc.5>

000000aa <.Loc.4>:
      aa:	1d 92       	st	X+, r1

000000ac <.Loc.5>:
      ac:	a0 37       	cpi	r26, 0x70	; 112

000000ae <.Loc.6>:
      ae:	b2 07       	cpc	r27, r18

000000b0 <.Loc.7>:
      b0:	e1 f7       	brne	.-8      	; 0xaa <.Loc.4>

000000b2 <L0^A>:
      b2:	0e 94 cd 0c 	call	0x199a	; 0x199a <main>
      b6:	0c 94 02 10 	jmp	0x2004	; 0x2004 <_exit>

000000ba <__bad_interrupt>:
      ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <setup>:

void setup()
{
    // This ensures that the robot starts moving.
    //set_motion(LEFT);
    set_color(RGB(1,1,1));
      be:	85 e1       	ldi	r24, 0x15	; 21
      c0:	0e 94 54 09 	call	0x12a8	; 0x12a8 <set_color>

000000c4 <.LVL0>:
    delay(300);
      c4:	8c e2       	ldi	r24, 0x2C	; 44
      c6:	91 e0       	ldi	r25, 0x01	; 1
      c8:	0e 94 a5 03 	call	0x74a	; 0x74a <delay>

000000cc <.LVL1>:
    set_color(RGB(0,0,0));
      cc:	80 e0       	ldi	r24, 0x00	; 0
      ce:	0e 94 54 09 	call	0x12a8	; 0x12a8 <set_color>

000000d2 <.LVL2>:
    delay(300);
      d2:	8c e2       	ldi	r24, 0x2C	; 44
      d4:	91 e0       	ldi	r25, 0x01	; 1
      d6:	0e 94 a5 03 	call	0x74a	; 0x74a <delay>

000000da <.LVL3>:
    set_color(RGB(1,1,1));
      da:	85 e1       	ldi	r24, 0x15	; 21
      dc:	0e 94 54 09 	call	0x12a8	; 0x12a8 <set_color>

000000e0 <.LVL4>:
    delay(300);
      e0:	8c e2       	ldi	r24, 0x2C	; 44
      e2:	91 e0       	ldi	r25, 0x01	; 1
      e4:	0e 94 a5 03 	call	0x74a	; 0x74a <delay>

000000e8 <.LVL5>:
    set_color(RGB(0,0,0));
      e8:	80 e0       	ldi	r24, 0x00	; 0
      ea:	0e 94 54 09 	call	0x12a8	; 0x12a8 <set_color>

000000ee <.LVL6>:
    delay(300);
      ee:	8c e2       	ldi	r24, 0x2C	; 44
      f0:	91 e0       	ldi	r25, 0x01	; 1
      f2:	0e 94 a5 03 	call	0x74a	; 0x74a <delay>

000000f6 <.LBB6>:
    if (current_motion != new_motion)
      f6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <current_motion.0>
      fa:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <current_motion.0+0x1>
      fe:	02 97       	sbiw	r24, 0x02	; 2
     100:	69 f0       	breq	.+26     	; 0x11c <.L1>

00000102 <.Loc.14>:
        current_motion = new_motion;
     102:	82 e0       	ldi	r24, 0x02	; 2
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <current_motion.0+0x1>
     10a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <current_motion.0>

0000010e <.Loc.16>:
            spinup_motors();
     10e:	0e 94 b9 03 	call	0x772	; 0x772 <spinup_motors>

00000112 <.LVL8>:
            set_motors(kilo_turn_left, 0);
     112:	60 e0       	ldi	r22, 0x00	; 0
     114:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <kilo_turn_left>
     118:	0c 94 b4 03 	jmp	0x768	; 0x768 <set_motors>

0000011c <.L1>:
    set_motion(LEFT);
}
     11c:	08 95       	ret

0000011e <loop>:

void loop()
{
     11e:	0f 93       	push	r16

00000120 <.LCFI0>:
     120:	1f 93       	push	r17

00000122 <.LCFI1>:
     122:	cf 93       	push	r28

00000124 <.LCFI2>:
     124:	df 93       	push	r29

00000126 <.LBB19>:
    int samples_ok = 0;
     126:	c0 e0       	ldi	r28, 0x00	; 0
     128:	d0 e0       	ldi	r29, 0x00	; 0

0000012a <.Loc.30>:
    int sum = 0;
     12a:	00 e0       	ldi	r16, 0x00	; 0
     12c:	10 e0       	ldi	r17, 0x00	; 0

0000012e <.L8>:
        int sample = get_ambientlight();
     12e:	0e 94 19 04 	call	0x832	; 0x832 <get_ambientlight>

00000132 <.LVL12>:
     132:	9c 01       	movw	r18, r24

00000134 <.LVL13>:
        if (sample != -1)
     134:	2f 3f       	cpi	r18, 0xFF	; 255
     136:	32 07       	cpc	r19, r18
     138:	c9 f0       	breq	.+50     	; 0x16c <.L5>

0000013a <.Loc.35>:
            sum += sample;
     13a:	02 0f       	add	r16, r18
     13c:	13 1f       	adc	r17, r19

0000013e <.Loc.37>:
            samples_ok++;
     13e:	21 96       	adiw	r28, 0x01	; 1

00000140 <.Loc.39>:
        delay(5);
     140:	85 e0       	ldi	r24, 0x05	; 5
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	0e 94 a5 03 	call	0x74a	; 0x74a <delay>

00000148 <.LBE21>:
    while (samples_ok < NUM_SAMPLES)
     148:	ca 30       	cpi	r28, 0x0A	; 10
     14a:	d1 05       	cpc	r29, r1
     14c:	81 f7       	brne	.-32     	; 0x12e <.L8>

0000014e <.LBE19>:
    int current_light = sample_light();
    //printf("%d\n",current_light);
    if (current_light < THRESH_LO)
     14e:	04 3c       	cpi	r16, 0xC4	; 196
     150:	89 e0       	ldi	r24, 0x09	; 9
     152:	18 07       	cpc	r17, r24
     154:	74 f1       	brlt	.+92     	; 0x1b2 <.L20>

00000156 <.Loc.46>:
    {
        set_motion(RIGHT);
        set_color(RGB(0,0,1));

    }
    else if (current_light > THRESH_HI)
     156:	0e 36       	cpi	r16, 0x6E	; 110
     158:	19 41       	sbci	r17, 0x19	; 25
     15a:	6c f4       	brge	.+26     	; 0x176 <.L21>

0000015c <.Loc.48>:
        set_motion(LEFT);
        set_color(RGB(1,0,0));

    }

    delay(100);
     15c:	84 e6       	ldi	r24, 0x64	; 100
     15e:	90 e0       	ldi	r25, 0x00	; 0

00000160 <.Loc.49>:
   
}
     160:	df 91       	pop	r29
     162:	cf 91       	pop	r28
     164:	1f 91       	pop	r17
     166:	0f 91       	pop	r16

00000168 <.LVL18>:
    delay(100);
     168:	0c 94 a5 03 	jmp	0x74a	; 0x74a <delay>

0000016c <.L5>:
        delay(5);
     16c:	85 e0       	ldi	r24, 0x05	; 5
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	0e 94 a5 03 	call	0x74a	; 0x74a <delay>

00000174 <.LBE22>:
    while (samples_ok < NUM_SAMPLES)
     174:	dc cf       	rjmp	.-72     	; 0x12e <.L8>

00000176 <.L21>:
    if (current_motion != new_motion)
     176:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <current_motion.0>
     17a:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <current_motion.0+0x1>
     17e:	02 97       	sbiw	r24, 0x02	; 2
     180:	69 f0       	breq	.+26     	; 0x19c <.L12>

00000182 <.Loc.60>:
        current_motion = new_motion;
     182:	82 e0       	ldi	r24, 0x02	; 2
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <current_motion.0+0x1>
     18a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <current_motion.0>

0000018e <.Loc.62>:
            spinup_motors();
     18e:	0e 94 b9 03 	call	0x772	; 0x772 <spinup_motors>

00000192 <.LVL22>:
            set_motors(kilo_turn_left, 0);
     192:	60 e0       	ldi	r22, 0x00	; 0
     194:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <kilo_turn_left>
     198:	0e 94 b4 03 	call	0x768	; 0x768 <set_motors>

0000019c <.L12>:
        set_color(RGB(1,0,0));
     19c:	81 e0       	ldi	r24, 0x01	; 1
     19e:	0e 94 54 09 	call	0x12a8	; 0x12a8 <set_color>

000001a2 <.LVL24>:
    delay(100);
     1a2:	84 e6       	ldi	r24, 0x64	; 100
     1a4:	90 e0       	ldi	r25, 0x00	; 0

000001a6 <.Loc.70>:
}
     1a6:	df 91       	pop	r29
     1a8:	cf 91       	pop	r28
     1aa:	1f 91       	pop	r17
     1ac:	0f 91       	pop	r16

000001ae <.LVL25>:
    delay(100);
     1ae:	0c 94 a5 03 	jmp	0x74a	; 0x74a <delay>

000001b2 <.L20>:
    if (current_motion != new_motion)
     1b2:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <current_motion.0>
     1b6:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <current_motion.0+0x1>
     1ba:	03 97       	sbiw	r24, 0x03	; 3
     1bc:	69 f0       	breq	.+26     	; 0x1d8 <.L10>

000001be <.Loc.77>:
        current_motion = new_motion;
     1be:	83 e0       	ldi	r24, 0x03	; 3
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <current_motion.0+0x1>
     1c6:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <current_motion.0>

000001ca <.LBB29>:
            spinup_motors();
     1ca:	0e 94 b9 03 	call	0x772	; 0x772 <spinup_motors>

000001ce <.LVL28>:
            set_motors(0, kilo_turn_right);
     1ce:	60 91 48 01 	lds	r22, 0x0148	; 0x800148 <kilo_turn_right>
     1d2:	80 e0       	ldi	r24, 0x00	; 0
     1d4:	0e 94 b4 03 	call	0x768	; 0x768 <set_motors>

000001d8 <.L10>:
        set_color(RGB(0,0,1));
     1d8:	80 e1       	ldi	r24, 0x10	; 16
     1da:	0e 94 54 09 	call	0x12a8	; 0x12a8 <set_color>

000001de <.LVL30>:
    delay(100);
     1de:	84 e6       	ldi	r24, 0x64	; 100
     1e0:	90 e0       	ldi	r25, 0x00	; 0

000001e2 <.Loc.89>:
}
     1e2:	df 91       	pop	r29
     1e4:	cf 91       	pop	r28
     1e6:	1f 91       	pop	r17
     1e8:	0f 91       	pop	r16

000001ea <.LVL31>:
    delay(100);
     1ea:	0c 94 a5 03 	jmp	0x74a	; 0x74a <delay>

000001ee <sample_light>:
{
     1ee:	0f 93       	push	r16

000001f0 <.LCFI4>:
     1f0:	1f 93       	push	r17

000001f2 <.LCFI5>:
     1f2:	cf 93       	push	r28

000001f4 <.LCFI6>:
     1f4:	df 93       	push	r29

000001f6 <.LCFI7>:
    int sum = 0;
     1f6:	00 e0       	ldi	r16, 0x00	; 0
     1f8:	10 e0       	ldi	r17, 0x00	; 0

000001fa <.Loc.97>:
    int samples_ok = 0;
     1fa:	c0 e0       	ldi	r28, 0x00	; 0
     1fc:	d0 e0       	ldi	r29, 0x00	; 0

000001fe <.L26>:
        int sample = get_ambientlight();
     1fe:	0e 94 19 04 	call	0x832	; 0x832 <get_ambientlight>

00000202 <.LVL35>:
     202:	9c 01       	movw	r18, r24

00000204 <.LVL36>:
        if (sample != -1)
     204:	2f 3f       	cpi	r18, 0xFF	; 255
     206:	32 07       	cpc	r19, r18
     208:	a1 f0       	breq	.+40     	; 0x232 <.L23>

0000020a <.Loc.102>:
            sum += sample;
     20a:	02 0f       	add	r16, r18
     20c:	13 1f       	adc	r17, r19

0000020e <.Loc.104>:
            samples_ok++;
     20e:	21 96       	adiw	r28, 0x01	; 1

00000210 <.Loc.106>:
        delay(5);
     210:	85 e0       	ldi	r24, 0x05	; 5
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	0e 94 a5 03 	call	0x74a	; 0x74a <delay>

00000218 <.LBE31>:
    while (samples_ok < NUM_SAMPLES)
     218:	ca 30       	cpi	r28, 0x0A	; 10
     21a:	d1 05       	cpc	r29, r1
     21c:	81 f7       	brne	.-32     	; 0x1fe <.L26>

0000021e <.Loc.109>:
    return (int) ((float)sum)/NUM_SAMPLES;
     21e:	c8 01       	movw	r24, r16
     220:	be 01       	movw	r22, r28
     222:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <__divmodhi4>
     226:	cb 01       	movw	r24, r22

00000228 <.Loc.111>:
}
     228:	df 91       	pop	r29
     22a:	cf 91       	pop	r28

0000022c <.LVL40>:
     22c:	1f 91       	pop	r17
     22e:	0f 91       	pop	r16

00000230 <.LVL41>:
     230:	08 95       	ret

00000232 <.L23>:
        delay(5);
     232:	85 e0       	ldi	r24, 0x05	; 5
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	0e 94 a5 03 	call	0x74a	; 0x74a <delay>

0000023a <.LBE32>:
    while (samples_ok < NUM_SAMPLES)
     23a:	e1 cf       	rjmp	.-62     	; 0x1fe <.L26>

0000023c <set_motion>:
{
     23c:	9c 01       	movw	r18, r24

0000023e <.Loc.119>:
    if (current_motion != new_motion)
     23e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <current_motion.0>
     242:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <current_motion.0+0x1>

00000246 <.LVL45>:
     246:	82 17       	cp	r24, r18
     248:	93 07       	cpc	r25, r19
     24a:	81 f0       	breq	.+32     	; 0x26c <.L28>

0000024c <.Loc.123>:
        current_motion = new_motion;
     24c:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <current_motion.0+0x1>
     250:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <current_motion.0>

00000254 <.Loc.125>:
        if (current_motion == STOP)
     254:	21 15       	cp	r18, r1
     256:	31 05       	cpc	r19, r1
     258:	51 f0       	breq	.+20     	; 0x26e <.L35>

0000025a <.Loc.127>:
        else if (current_motion == FORWARD)
     25a:	21 30       	cpi	r18, 0x01	; 1
     25c:	31 05       	cpc	r19, r1
     25e:	91 f0       	breq	.+36     	; 0x284 <.L36>

00000260 <.Loc.129>:
        else if (current_motion == LEFT)
     260:	22 30       	cpi	r18, 0x02	; 2
     262:	31 05       	cpc	r19, r1
     264:	b9 f0       	breq	.+46     	; 0x294 <.L37>

00000266 <.Loc.131>:
        else if (current_motion == RIGHT)
     266:	23 30       	cpi	r18, 0x03	; 3
     268:	31 05       	cpc	r19, r1
     26a:	29 f0       	breq	.+10     	; 0x276 <.L38>

0000026c <.L28>:
}
     26c:	08 95       	ret

0000026e <.L35>:
            set_motors(0, 0);
     26e:	60 e0       	ldi	r22, 0x00	; 0
     270:	80 e0       	ldi	r24, 0x00	; 0
     272:	0c 94 b4 03 	jmp	0x768	; 0x768 <set_motors>

00000276 <.L38>:
            spinup_motors();
     276:	0e 94 b9 03 	call	0x772	; 0x772 <spinup_motors>

0000027a <.LVL47>:
            set_motors(0, kilo_turn_right);
     27a:	60 91 48 01 	lds	r22, 0x0148	; 0x800148 <kilo_turn_right>
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	0c 94 b4 03 	jmp	0x768	; 0x768 <set_motors>

00000284 <.L36>:
            spinup_motors();
     284:	0e 94 b9 03 	call	0x772	; 0x772 <spinup_motors>

00000288 <.LVL49>:
            set_motors(kilo_straight_left, kilo_straight_right);
     288:	60 91 46 01 	lds	r22, 0x0146	; 0x800146 <kilo_straight_right>
     28c:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <kilo_straight_left>
     290:	0c 94 b4 03 	jmp	0x768	; 0x768 <set_motors>

00000294 <.L37>:
            spinup_motors();
     294:	0e 94 b9 03 	call	0x772	; 0x772 <spinup_motors>

00000298 <.LVL51>:
            set_motors(kilo_turn_left, 0);
     298:	60 e0       	ldi	r22, 0x00	; 0
     29a:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <kilo_turn_left>
     29e:	0c 94 b4 03 	jmp	0x768	; 0x768 <set_motors>

000002a2 <message_rx_dummy>:
void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     2a2:	08 95       	ret

000002a4 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	08 95       	ret

000002aa <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     2aa:	08 95       	ret

000002ac <kilo_init>:
void kilo_init() {
     2ac:	bf 92       	push	r11

000002ae <.LCFI0>:
     2ae:	cf 92       	push	r12

000002b0 <.LCFI1>:
     2b0:	df 92       	push	r13

000002b2 <.LCFI2>:
     2b2:	ef 92       	push	r14

000002b4 <.LCFI3>:
     2b4:	ff 92       	push	r15

000002b6 <.LCFI4>:
     2b6:	0f 93       	push	r16

000002b8 <.LCFI5>:
     2b8:	1f 93       	push	r17

000002ba <.LCFI6>:
     2ba:	cf 93       	push	r28

000002bc <.LCFI7>:
     2bc:	df 93       	push	r29

000002be <.LCFI8>:
    cli();
     2be:	f8 94       	cli

000002c0 <.Loc.9>:
    ports_off();
     2c0:	14 b8       	out	0x04, r1	; 4

000002c2 <.Loc.10>:
     2c2:	17 b8       	out	0x07, r1	; 7

000002c4 <.Loc.11>:
     2c4:	1a b8       	out	0x0a, r1	; 10

000002c6 <.Loc.12>:
     2c6:	15 b8       	out	0x05, r1	; 5

000002c8 <.Loc.13>:
     2c8:	18 b8       	out	0x08, r1	; 8

000002ca <.Loc.14>:
     2ca:	1b b8       	out	0x0b, r1	; 11

000002cc <.Loc.15>:
    ports_on();
     2cc:	52 9a       	sbi	0x0a, 2	; 10

000002ce <.Loc.17>:
     2ce:	5a 9a       	sbi	0x0b, 2	; 11

000002d0 <.Loc.18>:
    tx_timer_setup();
     2d0:	14 bc       	out	0x24, r1	; 36

000002d2 <.Loc.20>:
     2d2:	85 e0       	ldi	r24, 0x05	; 5
     2d4:	85 bd       	out	0x25, r24	; 37

000002d6 <.Loc.21>:
     2d6:	8f ef       	ldi	r24, 0xFF	; 255
     2d8:	87 bd       	out	0x27, r24	; 39

000002da <.Loc.22>:
     2da:	82 e0       	ldi	r24, 0x02	; 2
     2dc:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>

000002e0 <.Loc.23>:
    rx_timer_setup();
     2e0:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>

000002e4 <.Loc.25>:
     2e4:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>

000002e8 <.Loc.26>:
     2e8:	2f e8       	ldi	r18, 0x8F	; 143
     2ea:	3b e0       	ldi	r19, 0x0B	; 11
     2ec:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     2f0:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

000002f4 <.Loc.27>:
     2f4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>

000002f8 <.Loc.28>:
    motors_setup();
     2f8:	53 98       	cbi	0x0a, 3	; 10

000002fa <.Loc.30>:
     2fa:	23 98       	cbi	0x04, 3	; 4

000002fc <.Loc.31>:
     2fc:	91 ea       	ldi	r25, 0xA1	; 161
     2fe:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>

00000302 <.Loc.32>:
     302:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>

00000306 <.Loc.33>:
     306:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>

0000030a <.Loc.34>:
     30a:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>

0000030e <.Loc.35>:
    acomp_setup();
     30e:	8b e0       	ldi	r24, 0x0B	; 11
     310:	80 bf       	out	0x30, r24	; 48

00000312 <.Loc.37>:
     312:	83 e0       	ldi	r24, 0x03	; 3
     314:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__TEXT_REGION_LENGTH__+0x7f807f>

00000318 <.Loc.38>:
    adc_setup();
     318:	86 e0       	ldi	r24, 0x06	; 6
     31a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>

0000031e <.Loc.40>:
     31e:	83 e8       	ldi	r24, 0x83	; 131
     320:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>

00000324 <.Loc.41>:
     324:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     328:	80 64       	ori	r24, 0x40	; 64
     32a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>

0000032e <.L6>:
     32e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     332:	86 fd       	sbrc	r24, 6
     334:	fc cf       	rjmp	.-8      	; 0x32e <.L6>

00000336 <.Loc.45>:
    adc_trigger_high_gain();
     336:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>

0000033a <.Loc.47>:
     33a:	83 ea       	ldi	r24, 0xA3	; 163
     33c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>

00000340 <.Loc.48>:
     340:	81 e0       	ldi	r24, 0x01	; 1
     342:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>

00000346 <.Loc.49>:
    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     346:	81 e0       	ldi	r24, 0x01	; 1
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <eeprom_read_byte>

0000034e <.LVL1>:
    if (osccal != 0xFF)
     34e:	8f 3f       	cpi	r24, 0xFF	; 255
     350:	11 f0       	breq	.+4      	; 0x356 <.L7>

00000352 <.Loc.54>:
        OSCCAL = osccal;
     352:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__TEXT_REGION_LENGTH__+0x7f8066>

00000356 <.L7>:
    rx_busy = 0;
     356:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <rx_busy>

0000035a <.Loc.58>:
    rx_leadingbit = 1;
     35a:	c1 e0       	ldi	r28, 0x01	; 1
     35c:	c0 93 5a 01 	sts	0x015A, r28	; 0x80015a <rx_leadingbit>

00000360 <.Loc.60>:
    rx_leadingbyte = 1;
     360:	c0 93 59 01 	sts	0x0159, r28	; 0x800159 <rx_leadingbyte>

00000364 <.Loc.62>:
    rx_byteindex = 0;
     364:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <rx_byteindex>

00000368 <.Loc.64>:
    rx_bytevalue = 0;
     368:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <rx_bytevalue>

0000036c <.Loc.66>:
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     36c:	80 e9       	ldi	r24, 0x90	; 144
     36e:	90 e0       	ldi	r25, 0x00	; 0

00000370 <.LVL2>:
     370:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <eeprom_read_byte>

00000374 <.LVL3>:
     374:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <tx_mask>

00000378 <.Loc.70>:
    if (tx_mask & ~TX_MASK_MAX)
     378:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <tx_mask>
     37c:	88 73       	andi	r24, 0x38	; 56

0000037e <.Loc.72>:
     37e:	81 11       	cpse	r24, r1

00000380 <.Loc.73>:
        tx_mask = TX_MASK_MIN;
     380:	c0 93 56 01 	sts	0x0156, r28	; 0x800156 <tx_mask>

00000384 <.Loc.75>:
    tx_clock = 0;
     384:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <tx_clock+0x1>
     388:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <tx_clock>

0000038c <.Loc.77>:
    tx_increment = 255;
     38c:	8f ef       	ldi	r24, 0xFF	; 255
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <tx_increment+0x1>
     394:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <tx_increment>

00000398 <.Loc.79>:
    kilo_ticks = 0;
     398:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <kilo_ticks>
     39c:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <kilo_ticks+0x1>
     3a0:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <kilo_ticks+0x2>
     3a4:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <kilo_ticks+0x3>

000003a8 <.Loc.81>:
    kilo_state = IDLE;
     3a8:	81 e0       	ldi	r24, 0x01	; 1
     3aa:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <kilo_state>

000003ae <.Loc.83>:
    kilo_tx_period = 3906;
     3ae:	82 e4       	ldi	r24, 0x42	; 66
     3b0:	9f e0       	ldi	r25, 0x0F	; 15
     3b2:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <kilo_tx_period+0x1>
     3b6:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <kilo_tx_period>

000003ba <.Loc.85>:
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     3ba:	80 eb       	ldi	r24, 0xB0	; 176
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <eeprom_read_byte>

000003c2 <.LVL4>:
     3c2:	c8 2f       	mov	r28, r24

000003c4 <.Loc.87>:
     3c4:	81 eb       	ldi	r24, 0xB1	; 177
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <eeprom_read_byte>

000003cc <.LVL5>:
     3cc:	d8 2f       	mov	r29, r24

000003ce <.Loc.89>:
     3ce:	d0 93 4b 01 	sts	0x014B, r29	; 0x80014b <kilo_uid+0x1>
     3d2:	c0 93 4a 01 	sts	0x014A, r28	; 0x80014a <kilo_uid>

000003d6 <.Loc.90>:
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     3d6:	85 e0       	ldi	r24, 0x05	; 5
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <eeprom_read_byte>

000003de <.LVL6>:
     3de:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <kilo_turn_left>

000003e2 <.Loc.93>:
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     3e2:	89 e0       	ldi	r24, 0x09	; 9
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <eeprom_read_byte>

000003ea <.LVL7>:
     3ea:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <kilo_turn_right>

000003ee <.Loc.96>:
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     3ee:	8c e0       	ldi	r24, 0x0C	; 12
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <eeprom_read_byte>

000003f6 <.LVL8>:
     3f6:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <kilo_straight_left>

000003fa <.Loc.100>:
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     3fa:	84 e1       	ldi	r24, 0x14	; 20
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <eeprom_read_byte>

00000402 <.LVL9>:
     402:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <kilo_straight_right>

00000406 <.LVL10>:
    for (i=0; i<14; i++) {
     406:	0e e0       	ldi	r16, 0x0E	; 14
     408:	11 e0       	ldi	r17, 0x01	; 1
     40a:	8a e2       	ldi	r24, 0x2A	; 42
     40c:	e8 2e       	mov	r14, r24
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	f8 2e       	mov	r15, r24
     412:	9a e2       	ldi	r25, 0x2A	; 42
     414:	c9 2e       	mov	r12, r25
     416:	91 e0       	ldi	r25, 0x01	; 1
     418:	d9 2e       	mov	r13, r25

0000041a <.Loc.105>:
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     41a:	c0 e2       	ldi	r28, 0x20	; 32
     41c:	d0 e0       	ldi	r29, 0x00	; 0

0000041e <.L9>:
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     41e:	ce 01       	movw	r24, r28
     420:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <eeprom_read_byte>

00000424 <.LVL12>:
     424:	b8 2e       	mov	r11, r24

00000426 <.Loc.108>:
     426:	ce 01       	movw	r24, r28
     428:	01 96       	adiw	r24, 0x01	; 1
     42a:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <eeprom_read_byte>

0000042e <.LVL13>:
     42e:	9b 2d       	mov	r25, r11

00000430 <.Loc.110>:
     430:	f8 01       	movw	r30, r16
     432:	81 93       	st	Z+, r24
     434:	91 93       	st	Z+, r25
     436:	8f 01       	movw	r16, r30

00000438 <.Loc.111>:
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     438:	ce 01       	movw	r24, r28
     43a:	c0 96       	adiw	r24, 0x30	; 48
     43c:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <eeprom_read_byte>

00000440 <.LVL14>:
     440:	b8 2e       	mov	r11, r24

00000442 <.Loc.113>:
     442:	ce 01       	movw	r24, r28
     444:	c1 96       	adiw	r24, 0x31	; 49
     446:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <eeprom_read_byte>

0000044a <.LVL15>:
     44a:	9b 2d       	mov	r25, r11

0000044c <.Loc.115>:
     44c:	f7 01       	movw	r30, r14
     44e:	81 93       	st	Z+, r24
     450:	91 93       	st	Z+, r25
     452:	7f 01       	movw	r14, r30

00000454 <.LVL16>:
    for (i=0; i<14; i++) {
     454:	22 96       	adiw	r28, 0x02	; 2

00000456 <.LVL17>:
     456:	c0 16       	cp	r12, r16
     458:	d1 06       	cpc	r13, r17
     45a:	09 f7       	brne	.-62     	; 0x41e <.L9>

0000045c <.Loc.119>:
    sei();
     45c:	78 94       	sei

0000045e <.Loc.120>:
}
     45e:	df 91       	pop	r29
     460:	cf 91       	pop	r28

00000462 <.LVL18>:
     462:	1f 91       	pop	r17
     464:	0f 91       	pop	r16
     466:	ff 90       	pop	r15
     468:	ef 90       	pop	r14
     46a:	df 90       	pop	r13
     46c:	cf 90       	pop	r12
     46e:	bf 90       	pop	r11
     470:	08 95       	ret

00000472 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     472:	0f 92       	push	r0
     474:	0f b6       	in	r0, 0x3f	; 63
     476:	0f 92       	push	r0
     478:	1f 92       	push	r1
     47a:	11 24       	eor	r1, r1
     47c:	8f 93       	push	r24

0000047e <.LBB78>:
     47e:	0f b6       	in	r0, 0x3f	; 63
     480:	f8 94       	cli
     482:	a8 95       	wdr
     484:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     488:	88 61       	ori	r24, 0x18	; 24
     48a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     48e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     492:	0f be       	out	0x3f, r0	; 63

00000494 <.LBE78>:
    wdt_disable();
}
     494:	8f 91       	pop	r24
     496:	1f 90       	pop	r1
     498:	0f 90       	pop	r0
     49a:	0f be       	out	0x3f, r0	; 63
     49c:	0f 90       	pop	r0
     49e:	18 95       	reti

000004a0 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     4a0:	3c 01       	movw	r6, r24
     4a2:	eb 01       	movw	r28, r22

000004a4 <.LVL20>:
    int16_t voltage;
    uint8_t has_setup = 0;
     4a4:	10 e0       	ldi	r17, 0x00	; 0

000004a6 <.LBB146>:
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     4a6:	99 24       	eor	r9, r9
     4a8:	9a 94       	dec	r9

000004aa <.LBE146>:
                kilo_state = RUNNING;
     4aa:	84 e0       	ldi	r24, 0x04	; 4
     4ac:	c8 2e       	mov	r12, r24

000004ae <.LBB149>:

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     4ae:	96 e0       	ldi	r25, 0x06	; 6
     4b0:	a9 2e       	mov	r10, r25
     4b2:	23 e8       	ldi	r18, 0x83	; 131
     4b4:	b2 2e       	mov	r11, r18

000004b6 <.LBB154>:
		__asm__ __volatile__ (
     4b6:	38 e1       	ldi	r19, 0x18	; 24
     4b8:	d3 2e       	mov	r13, r19
     4ba:	49 e2       	ldi	r20, 0x29	; 41
     4bc:	e4 2e       	mov	r14, r20

000004be <.L22>:
        switch(kilo_state) {
     4be:	e0 91 6f 01 	lds	r30, 0x016F	; 0x80016f <kilo_state>
     4c2:	e7 30       	cpi	r30, 0x07	; 7
     4c4:	e0 f7       	brcc	.-8      	; 0x4be <.L22>
     4c6:	f0 e0       	ldi	r31, 0x00	; 0
     4c8:	ec 5f       	subi	r30, 0xFC	; 252
     4ca:	ff 4e       	sbci	r31, 0xEF	; 239
     4cc:	0c 94 ec 0c 	jmp	0x19d8	; 0x19d8 <__tablejump2__>

000004d0 <.L27>:
                if (!has_setup) {
     4d0:	11 11       	cpse	r17, r1
     4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <.L38>

000004d4 <.Loc.152>:
                    setup();
     4d4:	f3 01       	movw	r30, r6
     4d6:	09 95       	icall

000004d8 <.L38>:
                kilo_state = RUNNING;
     4d8:	c0 92 6f 01 	sts	0x016F, r12	; 0x80016f <kilo_state>
     4dc:	11 e0       	ldi	r17, 0x01	; 1

000004de <.L26>:
                loop();
     4de:	fe 01       	movw	r30, r28
     4e0:	09 95       	icall

000004e2 <.LVL25>:
                break;
     4e2:	ed cf       	rjmp	.-38     	; 0x4be <.L22>

000004e4 <.L28>:
    if (!rx_busy) {
     4e4:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <rx_busy>

000004e8 <.Loc.163>:
     4e8:	81 11       	cpse	r24, r1
     4ea:	03 c1       	rjmp	.+518    	; 0x6f2 <.L33>

000004ec <.Loc.164>:
        cli();                                    // disable interrupts
     4ec:	f8 94       	cli

000004ee <.Loc.165>:
        adc_setup_conversion(6);
     4ee:	a0 92 7c 00 	sts	0x007C, r10	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>

000004f2 <.Loc.166>:
     4f2:	b0 92 7a 00 	sts	0x007A, r11	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>

000004f6 <.Loc.167>:
        adc_start_conversion();
     4f6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4fa:	80 64       	ori	r24, 0x40	; 64
     4fc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>

00000500 <.L34>:
        adc_finish_conversion();
     500:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     504:	86 fd       	sbrc	r24, 6
     506:	fc cf       	rjmp	.-8      	; 0x500 <.L34>

00000508 <.Loc.172>:
        voltage = ADCW;                           // store AD result
     508:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     50c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>

00000510 <.LVL27>:
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     510:	78 94       	sei

00000512 <.LBE151>:
                if(voltage > 682)
     512:	8b 3a       	cpi	r24, 0xAB	; 171
     514:	e2 e0       	ldi	r30, 0x02	; 2
     516:	9e 07       	cpc	r25, r30
     518:	0c f0       	brlt	.+2      	; 0x51c <.LVL29>

0000051a <L0^A>:
     51a:	e4 c0       	rjmp	.+456    	; 0x6e4 <.L48>

0000051c <.LVL29>:
                else if(voltage > 648)
     51c:	89 38       	cpi	r24, 0x89	; 137
     51e:	f2 e0       	ldi	r31, 0x02	; 2
     520:	9f 07       	cpc	r25, r31
     522:	0c f0       	brlt	.+2      	; 0x526 <.Loc.183>

00000524 <L0^A>:
     524:	ed c0       	rjmp	.+474    	; 0x700 <.L49>

00000526 <.Loc.183>:
                else if(voltage > 614)
     526:	87 36       	cpi	r24, 0x67	; 103
     528:	92 40       	sbci	r25, 0x02	; 2
     52a:	0c f4       	brge	.+2      	; 0x52e <.LBB158>

0000052c <L0^A>:
     52c:	e2 c0       	rjmp	.+452    	; 0x6f2 <.L33>

0000052e <.LBB158>:

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     52e:	55 9a       	sbi	0x0a, 5	; 10

00000530 <.Loc.190>:
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     530:	54 9a       	sbi	0x0a, 4	; 10

00000532 <.Loc.193>:
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     532:	3b 9a       	sbi	0x07, 3	; 7

00000534 <.Loc.196>:
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     534:	3a 9a       	sbi	0x07, 2	; 7

00000536 <.Loc.199>:
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     536:	3d 98       	cbi	0x07, 5	; 7

00000538 <.Loc.202>:

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     538:	3c 98       	cbi	0x07, 4	; 7

0000053a <.Loc.205>:
}
     53a:	c1 cf       	rjmp	.-126    	; 0x4be <.L22>

0000053c <.L29>:
        DDRD &= ~(1<<5);
     53c:	55 98       	cbi	0x0a, 5	; 10

0000053e <.Loc.212>:
        DDRD &= ~(1<<4);
     53e:	54 98       	cbi	0x0a, 4	; 10

00000540 <.Loc.215>:
        DDRC |= (1<<3);
     540:	3b 9a       	sbi	0x07, 3	; 7

00000542 <.Loc.218>:
        DDRC |= (1<<2);
     542:	3a 9a       	sbi	0x07, 2	; 7

00000544 <.Loc.221>:
        DDRC &= ~(1<<5);
     544:	3d 98       	cbi	0x07, 5	; 7

00000546 <.Loc.224>:
        DDRC &= ~(1<<4);
     546:	3c 98       	cbi	0x07, 4	; 7

00000548 <.LBB162>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     548:	ef ec       	ldi	r30, 0xCF	; 207
     54a:	f7 e0       	ldi	r31, 0x07	; 7

0000054c <.L1^B1>:
     54c:	31 97       	sbiw	r30, 0x01	; 1
     54e:	f1 f7       	brne	.-4      	; 0x54c <.L1^B1>
     550:	00 c0       	rjmp	.+0      	; 0x552 <L0^A>

00000552 <L0^A>:
	...

00000554 <.LBB164>:
        DDRD &= ~(1<<5);
     554:	55 98       	cbi	0x0a, 5	; 10

00000556 <.Loc.242>:
        DDRD &= ~(1<<4);
     556:	54 98       	cbi	0x0a, 4	; 10

00000558 <.Loc.245>:
        DDRC &= ~(1<<3);
     558:	3b 98       	cbi	0x07, 3	; 7

0000055a <.Loc.248>:
        DDRC &= ~(1<<2);
     55a:	3a 98       	cbi	0x07, 2	; 7

0000055c <.Loc.251>:
        DDRC &= ~(1<<5);
     55c:	3d 98       	cbi	0x07, 5	; 7

0000055e <.Loc.254>:
        DDRC &= ~(1<<4);
     55e:	3c 98       	cbi	0x07, 4	; 7

00000560 <.LBB166>:
     560:	ff ef       	ldi	r31, 0xFF	; 255
     562:	21 ee       	ldi	r18, 0xE1	; 225
     564:	84 e0       	ldi	r24, 0x04	; 4

00000566 <.L1^B2>:
     566:	f1 50       	subi	r31, 0x01	; 1
     568:	20 40       	sbci	r18, 0x00	; 0
     56a:	80 40       	sbci	r24, 0x00	; 0
     56c:	e1 f7       	brne	.-8      	; 0x566 <.L1^B2>
     56e:	00 c0       	rjmp	.+0      	; 0x570 <L0^A>

00000570 <L0^A>:
	...

00000572 <.Loc.266>:
	}
	else
		__ticks = (uint16_t)__tmp;
	_delay_loop_2(__ticks);
#endif
}
     572:	a5 cf       	rjmp	.-182    	; 0x4be <.L22>

00000574 <.L30>:
                cli();
     574:	f8 94       	cli

00000576 <.Loc.269>:
                acomp_off();
     576:	80 b7       	in	r24, 0x30	; 48
     578:	87 7f       	andi	r24, 0xF7	; 247
     57a:	80 bf       	out	0x30, r24	; 48

0000057c <.Loc.270>:
                adc_off();
     57c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     580:	8f 77       	andi	r24, 0x7F	; 127
     582:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>

00000586 <.Loc.271>:
                ports_off();
     586:	14 b8       	out	0x04, r1	; 4

00000588 <.Loc.272>:
     588:	17 b8       	out	0x07, r1	; 7

0000058a <.Loc.273>:
     58a:	1a b8       	out	0x0a, r1	; 10

0000058c <.Loc.274>:
     58c:	15 b8       	out	0x05, r1	; 5

0000058e <.Loc.275>:
     58e:	18 b8       	out	0x08, r1	; 8

00000590 <.Loc.276>:
     590:	1b b8       	out	0x0b, r1	; 11

00000592 <.LBB168>:
     592:	0f b6       	in	r0, 0x3f	; 63
     594:	f8 94       	cli
     596:	a8 95       	wdr
     598:	d0 92 60 00 	sts	0x0060, r13	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     59c:	0f be       	out	0x3f, r0	; 63
     59e:	e0 92 60 00 	sts	0x0060, r14	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>

000005a2 <.LBE168>:
                WDTCSR |= (1<<WDIE);
     5a2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>

000005a6 <.Loc.284>:
     5a6:	80 64       	ori	r24, 0x40	; 64
     5a8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>

000005ac <.Loc.285>:
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     5ac:	83 b7       	in	r24, 0x33	; 51
     5ae:	81 7f       	andi	r24, 0xF1	; 241
     5b0:	84 60       	ori	r24, 0x04	; 4
     5b2:	83 bf       	out	0x33, r24	; 51

000005b4 <.Loc.287>:
                cli();
     5b4:	f8 94       	cli

000005b6 <.Loc.289>:
                sleep_enable();
     5b6:	83 b7       	in	r24, 0x33	; 51
     5b8:	81 60       	ori	r24, 0x01	; 1
     5ba:	83 bf       	out	0x33, r24	; 51

000005bc <.Loc.291>:
                sei();
     5bc:	78 94       	sei

000005be <.Loc.293>:
                sleep_cpu();
     5be:	88 95       	sleep

000005c0 <.Loc.295>:
                sleep_disable();
     5c0:	83 b7       	in	r24, 0x33	; 51
     5c2:	8e 7f       	andi	r24, 0xFE	; 254
     5c4:	83 bf       	out	0x33, r24	; 51

000005c6 <.Loc.298>:
                sei();
     5c6:	78 94       	sei

000005c8 <.Loc.300>:
                rx_busy = 0;
     5c8:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <rx_busy>

000005cc <.Loc.302>:
                ports_on();
     5cc:	52 9a       	sbi	0x0a, 2	; 10

000005ce <.Loc.303>:
     5ce:	5a 9a       	sbi	0x0b, 2	; 11

000005d0 <.Loc.304>:
                adc_on();
     5d0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     5d4:	80 68       	ori	r24, 0x80	; 128
     5d6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>

000005da <.LBB169>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5da:	87 e5       	ldi	r24, 0x57	; 87
     5dc:	92 e0       	ldi	r25, 0x02	; 2

000005de <.L1^B3>:
     5de:	01 97       	sbiw	r24, 0x01	; 1
     5e0:	f1 f7       	brne	.-4      	; 0x5de <.L1^B3>
     5e2:	00 c0       	rjmp	.+0      	; 0x5e4 <L0^A>

000005e4 <L0^A>:
	...

000005e6 <.LBE169>:
                acomp_on();
     5e6:	80 b7       	in	r24, 0x30	; 48
     5e8:	88 61       	ori	r24, 0x18	; 24
     5ea:	80 bf       	out	0x30, r24	; 48

000005ec <.LBB171>:
        DDRD |= (1<<5);
     5ec:	55 9a       	sbi	0x0a, 5	; 10

000005ee <.Loc.321>:
        DDRD |= (1<<4);
     5ee:	54 9a       	sbi	0x0a, 4	; 10

000005f0 <.Loc.324>:
        DDRC |= (1<<3);
     5f0:	3b 9a       	sbi	0x07, 3	; 7

000005f2 <.Loc.327>:
        DDRC |= (1<<2);
     5f2:	3a 9a       	sbi	0x07, 2	; 7

000005f4 <.Loc.330>:
        DDRC |= (1<<5);
     5f4:	3d 9a       	sbi	0x07, 5	; 7

000005f6 <.Loc.333>:
        DDRC |= (1<<4);
     5f6:	3c 9a       	sbi	0x07, 4	; 7

000005f8 <.LBB173>:
	__builtin_avr_delay_cycles(__ticks_dc);
     5f8:	ef e1       	ldi	r30, 0x1F	; 31
     5fa:	fe e4       	ldi	r31, 0x4E	; 78

000005fc <.L1^B4>:
     5fc:	31 97       	sbiw	r30, 0x01	; 1
     5fe:	f1 f7       	brne	.-4      	; 0x5fc <.L1^B4>
     600:	00 c0       	rjmp	.+0      	; 0x602 <L0^A>

00000602 <L0^A>:
	...

00000604 <.LBE173>:
                if (rx_busy) {
     604:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <rx_busy>

00000608 <.Loc.348>:
     608:	81 11       	cpse	r24, r1
     60a:	5c c0       	rjmp	.+184    	; 0x6c4 <.L50>

0000060c <.L37>:
        DDRD &= ~(1<<5);
     60c:	55 98       	cbi	0x0a, 5	; 10

0000060e <.Loc.354>:
        DDRD &= ~(1<<4);
     60e:	54 98       	cbi	0x0a, 4	; 10

00000610 <.Loc.357>:
        DDRC &= ~(1<<3);
     610:	3b 98       	cbi	0x07, 3	; 7

00000612 <.Loc.360>:
        DDRC &= ~(1<<2);
     612:	3a 98       	cbi	0x07, 2	; 7

00000614 <.Loc.363>:
        DDRC &= ~(1<<5);
     614:	3d 98       	cbi	0x07, 5	; 7

00000616 <.Loc.366>:
        DDRC &= ~(1<<4);
     616:	3c 98       	cbi	0x07, 4	; 7

00000618 <.Loc.369>:
}
     618:	52 cf       	rjmp	.-348    	; 0x4be <.L22>

0000061a <.L23>:
                if (cur_motion == MOVE_STOP) {
     61a:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <cur_motion>

0000061e <.Loc.373>:
     61e:	81 11       	cpse	r24, r1
     620:	25 c0       	rjmp	.+74     	; 0x66c <.L40>

00000622 <.LBB177>:
    OCR2A = ccw;
     622:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>

00000626 <.Loc.378>:
    OCR2B = cw;
     626:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>

0000062a <.LBE177>:
                    prev_motion = MOVE_STOP;
     62a:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <prev_motion>
     62e:	47 cf       	rjmp	.-370    	; 0x4be <.L22>

00000630 <.L25>:
                if (is_charging()) {
     630:	48 99       	sbic	0x09, 0	; 9
     632:	ec cf       	rjmp	.-40     	; 0x60c <.L37>

00000634 <.LBB179>:
        DDRD |= (1<<5);
     634:	55 9a       	sbi	0x0a, 5	; 10

00000636 <.Loc.390>:
        DDRD &= ~(1<<4);
     636:	54 98       	cbi	0x0a, 4	; 10

00000638 <.Loc.393>:
        DDRC &= ~(1<<3);
     638:	3b 98       	cbi	0x07, 3	; 7

0000063a <.Loc.396>:
        DDRC &= ~(1<<2);
     63a:	3a 98       	cbi	0x07, 2	; 7

0000063c <.Loc.399>:
        DDRC &= ~(1<<5);
     63c:	3d 98       	cbi	0x07, 5	; 7

0000063e <.Loc.402>:
        DDRC &= ~(1<<4);
     63e:	3c 98       	cbi	0x07, 4	; 7

00000640 <.LBB181>:
     640:	8f ec       	ldi	r24, 0xCF	; 207
     642:	97 e0       	ldi	r25, 0x07	; 7

00000644 <.L1^B5>:
     644:	01 97       	sbiw	r24, 0x01	; 1
     646:	f1 f7       	brne	.-4      	; 0x644 <.L1^B5>
     648:	00 c0       	rjmp	.+0      	; 0x64a <L0^A>

0000064a <L0^A>:
	...

0000064c <.LBB183>:
        DDRD &= ~(1<<5);
     64c:	55 98       	cbi	0x0a, 5	; 10

0000064e <.Loc.420>:
        DDRD &= ~(1<<4);
     64e:	54 98       	cbi	0x0a, 4	; 10

00000650 <.Loc.423>:
        DDRC &= ~(1<<3);
     650:	3b 98       	cbi	0x07, 3	; 7

00000652 <.Loc.426>:
        DDRC &= ~(1<<2);
     652:	3a 98       	cbi	0x07, 2	; 7

00000654 <.Loc.429>:
        DDRC &= ~(1<<5);
     654:	3d 98       	cbi	0x07, 5	; 7

00000656 <.Loc.432>:
        DDRC &= ~(1<<4);
     656:	3c 98       	cbi	0x07, 4	; 7

00000658 <.LBB185>:
     658:	9f ef       	ldi	r25, 0xFF	; 255
     65a:	e1 ee       	ldi	r30, 0xE1	; 225
     65c:	f4 e0       	ldi	r31, 0x04	; 4

0000065e <.L1^B6>:
     65e:	91 50       	subi	r25, 0x01	; 1
     660:	e0 40       	sbci	r30, 0x00	; 0
     662:	f0 40       	sbci	r31, 0x00	; 0
     664:	e1 f7       	brne	.-8      	; 0x65e <.L1^B6>
     666:	00 c0       	rjmp	.+0      	; 0x668 <L0^A>

00000668 <L0^A>:
	...

0000066a <.Loc.444>:
}
     66a:	29 cf       	rjmp	.-430    	; 0x4be <.L22>

0000066c <.L40>:
                    if (cur_motion != prev_motion) {
     66c:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <cur_motion>
     670:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <prev_motion>

00000674 <.Loc.448>:
     674:	98 17       	cp	r25, r24
     676:	09 f4       	brne	.+2      	; 0x67a <.Loc.449>

00000678 <L0^A>:
     678:	22 cf       	rjmp	.-444    	; 0x4be <.L22>

0000067a <.Loc.449>:
                        prev_motion = cur_motion;
     67a:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <cur_motion>
     67e:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <prev_motion>

00000682 <.Loc.451>:
                        if (cur_motion == MOVE_LEFT) {
     682:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <cur_motion>

00000686 <.Loc.453>:
     686:	81 30       	cpi	r24, 0x01	; 1
     688:	09 f4       	brne	.+2      	; 0x68c <.Loc.454>

0000068a <L0^A>:
     68a:	41 c0       	rjmp	.+130    	; 0x70e <.L51>

0000068c <.Loc.454>:
                        } else if (cur_motion == MOVE_RIGHT) {
     68c:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <cur_motion>

00000690 <.LBB187>:
    OCR2A = ccw;
     690:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>

00000694 <.Loc.457>:
    OCR2B = cw;
     694:	90 92 b4 00 	sts	0x00B4, r9	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>

00000698 <.LBE187>:
                        } else if (cur_motion == MOVE_RIGHT) {
     698:	82 30       	cpi	r24, 0x02	; 2
     69a:	09 f4       	brne	.+2      	; 0x69e <.LBB190>

0000069c <L0^A>:
     69c:	49 c0       	rjmp	.+146    	; 0x730 <.L52>

0000069e <.LBB190>:
    OCR2A = ccw;
     69e:	90 92 b3 00 	sts	0x00B3, r9	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>

000006a2 <.Loc.468>:
    OCR2B = cw;
     6a2:	90 92 b4 00 	sts	0x00B4, r9	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>

000006a6 <.LBB193>:
	__builtin_avr_delay_cycles(__ticks_dc);
     6a6:	8f e2       	ldi	r24, 0x2F	; 47
     6a8:	95 e7       	ldi	r25, 0x75	; 117

000006aa <.L1^B7>:
     6aa:	01 97       	sbiw	r24, 0x01	; 1
     6ac:	f1 f7       	brne	.-4      	; 0x6aa <.L1^B7>
     6ae:	00 c0       	rjmp	.+0      	; 0x6b0 <L0^A>

000006b0 <L0^A>:
	...

000006b2 <.LBE193>:
                            set_motors(kilo_straight_left, kilo_straight_right);
     6b2:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <kilo_straight_right>
     6b6:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <kilo_straight_left>

000006ba <.LBB195>:
    OCR2A = ccw;
     6ba:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>

000006be <.Loc.484>:
    OCR2B = cw;
     6be:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>

000006c2 <.Loc.486>:
}
     6c2:	fd ce       	rjmp	.-518    	; 0x4be <.L22>

000006c4 <.L50>:
        DDRD |= (1<<5);
     6c4:	55 9a       	sbi	0x0a, 5	; 10

000006c6 <.Loc.493>:
        DDRD |= (1<<4);
     6c6:	54 9a       	sbi	0x0a, 4	; 10

000006c8 <.Loc.496>:
        DDRC &= ~(1<<3);
     6c8:	3b 98       	cbi	0x07, 3	; 7

000006ca <.Loc.499>:
        DDRC &= ~(1<<2);
     6ca:	3a 98       	cbi	0x07, 2	; 7

000006cc <.Loc.502>:
        DDRC &= ~(1<<5);
     6cc:	3d 98       	cbi	0x07, 5	; 7

000006ce <.Loc.505>:
        DDRC &= ~(1<<4);
     6ce:	3c 98       	cbi	0x07, 4	; 7

000006d0 <.LBB199>:
     6d0:	ff ef       	ldi	r31, 0xFF	; 255
     6d2:	20 e7       	ldi	r18, 0x70	; 112
     6d4:	82 e0       	ldi	r24, 0x02	; 2

000006d6 <.L1^B8>:
     6d6:	f1 50       	subi	r31, 0x01	; 1
     6d8:	20 40       	sbci	r18, 0x00	; 0
     6da:	80 40       	sbci	r24, 0x00	; 0
     6dc:	e1 f7       	brne	.-8      	; 0x6d6 <.L1^B8>
     6de:	00 c0       	rjmp	.+0      	; 0x6e0 <L0^A>

000006e0 <L0^A>:
	...

000006e2 <.LBB202>:
}
     6e2:	94 cf       	rjmp	.-216    	; 0x60c <.L37>

000006e4 <.L48>:
        DDRD &= ~(1<<5);
     6e4:	55 98       	cbi	0x0a, 5	; 10

000006e6 <.Loc.529>:
        DDRD &= ~(1<<4);
     6e6:	54 98       	cbi	0x0a, 4	; 10

000006e8 <.Loc.532>:
        DDRC |= (1<<3);
     6e8:	3b 9a       	sbi	0x07, 3	; 7

000006ea <.Loc.535>:
        DDRC |= (1<<2);
     6ea:	3a 9a       	sbi	0x07, 2	; 7

000006ec <.Loc.538>:
        DDRC &= ~(1<<5);
     6ec:	3d 98       	cbi	0x07, 5	; 7

000006ee <.Loc.541>:
        DDRC &= ~(1<<4);
     6ee:	3c 98       	cbi	0x07, 4	; 7

000006f0 <.Loc.544>:
}
     6f0:	e6 ce       	rjmp	.-564    	; 0x4be <.L22>

000006f2 <.L33>:
        DDRD |= (1<<5);
     6f2:	55 9a       	sbi	0x0a, 5	; 10

000006f4 <.Loc.551>:
        DDRD |= (1<<4);
     6f4:	54 9a       	sbi	0x0a, 4	; 10

000006f6 <.Loc.554>:
        DDRC &= ~(1<<3);
     6f6:	3b 98       	cbi	0x07, 3	; 7

000006f8 <.Loc.557>:
        DDRC &= ~(1<<2);
     6f8:	3a 98       	cbi	0x07, 2	; 7

000006fa <.Loc.560>:
        DDRC &= ~(1<<5);
     6fa:	3d 98       	cbi	0x07, 5	; 7

000006fc <.Loc.563>:
        DDRC &= ~(1<<4);
     6fc:	3c 98       	cbi	0x07, 4	; 7

000006fe <.Loc.566>:
}
     6fe:	df ce       	rjmp	.-578    	; 0x4be <.L22>

00000700 <.L49>:
        DDRD &= ~(1<<5);
     700:	55 98       	cbi	0x0a, 5	; 10

00000702 <.Loc.573>:
        DDRD &= ~(1<<4);
     702:	54 98       	cbi	0x0a, 4	; 10

00000704 <.Loc.576>:
        DDRC &= ~(1<<3);
     704:	3b 98       	cbi	0x07, 3	; 7

00000706 <.Loc.579>:
        DDRC &= ~(1<<2);
     706:	3a 98       	cbi	0x07, 2	; 7

00000708 <.Loc.582>:
        DDRC |= (1<<5);
     708:	3d 9a       	sbi	0x07, 5	; 7

0000070a <.Loc.585>:
        DDRC |= (1<<4);
     70a:	3c 9a       	sbi	0x07, 4	; 7

0000070c <.Loc.588>:
}
     70c:	d8 ce       	rjmp	.-592    	; 0x4be <.L22>

0000070e <.L51>:
    OCR2A = ccw;
     70e:	90 92 b3 00 	sts	0x00B3, r9	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>

00000712 <.Loc.594>:
    OCR2B = cw;
     712:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>

00000716 <.LBB213>:
	__builtin_avr_delay_cycles(__ticks_dc);
     716:	8f e2       	ldi	r24, 0x2F	; 47
     718:	95 e7       	ldi	r25, 0x75	; 117

0000071a <.L1^B9>:
     71a:	01 97       	sbiw	r24, 0x01	; 1
     71c:	f1 f7       	brne	.-4      	; 0x71a <.L1^B9>
     71e:	00 c0       	rjmp	.+0      	; 0x720 <L0^A>

00000720 <L0^A>:
	...

00000722 <.LBE213>:
                            set_motors(kilo_turn_left, 0);
     722:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <kilo_turn_left>

00000726 <.LBB215>:
    OCR2A = ccw;
     726:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>

0000072a <.Loc.610>:
    OCR2B = cw;
     72a:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>

0000072e <.Loc.612>:
}
     72e:	c7 ce       	rjmp	.-626    	; 0x4be <.L22>

00000730 <.L52>:
     730:	ef e2       	ldi	r30, 0x2F	; 47
     732:	f5 e7       	ldi	r31, 0x75	; 117

00000734 <.L1^B10>:
     734:	31 97       	sbiw	r30, 0x01	; 1
     736:	f1 f7       	brne	.-4      	; 0x734 <.L1^B10>
     738:	00 c0       	rjmp	.+0      	; 0x73a <L0^A>

0000073a <L0^A>:
	...

0000073c <.LBE218>:
                            set_motors(0, kilo_turn_right);
     73c:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <kilo_turn_right>

00000740 <.LBB220>:
    OCR2A = ccw;
     740:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>

00000744 <.Loc.631>:
    OCR2B = cw;
     744:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>

00000748 <.Loc.633>:
}
     748:	ba ce       	rjmp	.-652    	; 0x4be <.L22>

0000074a <delay>:
void delay(uint16_t ms) {
     74a:	9c 01       	movw	r18, r24

0000074c <.Loc.636>:
    while (ms > 0) {
     74c:	89 2b       	or	r24, r25
     74e:	59 f0       	breq	.+22     	; 0x766 <.L53>

00000750 <.L55>:
     750:	8f ec       	ldi	r24, 0xCF	; 207
     752:	97 e0       	ldi	r25, 0x07	; 7

00000754 <.L1^B11>:
     754:	01 97       	sbiw	r24, 0x01	; 1
     756:	f1 f7       	brne	.-4      	; 0x754 <.L1^B11>
     758:	00 c0       	rjmp	.+0      	; 0x75a <L0^A>

0000075a <L0^A>:
	...

0000075c <.LBE222>:
        ms--;
     75c:	21 50       	subi	r18, 0x01	; 1
     75e:	31 09       	sbc	r19, r1

00000760 <.Loc.649>:
    while (ms > 0) {
     760:	21 15       	cp	r18, r1
     762:	31 05       	cpc	r19, r1
     764:	a9 f7       	brne	.-22     	; 0x750 <.L55>

00000766 <.L53>:
}
     766:	08 95       	ret

00000768 <set_motors>:
    OCR2A = ccw;
     768:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>

0000076c <.Loc.654>:
    OCR2B = cw;
     76c:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>

00000770 <.Loc.656>:
}
     770:	08 95       	ret

00000772 <spinup_motors>:
    OCR2A = ccw;
     772:	8f ef       	ldi	r24, 0xFF	; 255
     774:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>

00000778 <.Loc.662>:
    OCR2B = cw;
     778:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>

0000077c <.LBB226>:
     77c:	8f ec       	ldi	r24, 0xCF	; 207
     77e:	97 e0       	ldi	r25, 0x07	; 7

00000780 <.L1^B12>:
     780:	01 97       	sbiw	r24, 0x01	; 1
     782:	f1 f7       	brne	.-4      	; 0x780 <.L1^B12>
     784:	00 c0       	rjmp	.+0      	; 0x786 <L0^A>

00000786 <L0^A>:
	...

00000788 <.LBB243>:
     788:	8f ec       	ldi	r24, 0xCF	; 207
     78a:	97 e0       	ldi	r25, 0x07	; 7

0000078c <.L1^B13>:
     78c:	01 97       	sbiw	r24, 0x01	; 1
     78e:	f1 f7       	brne	.-4      	; 0x78c <.L1^B13>
     790:	00 c0       	rjmp	.+0      	; 0x792 <L0^A>

00000792 <L0^A>:
	...

00000794 <.LBB244>:
     794:	8f ec       	ldi	r24, 0xCF	; 207
     796:	97 e0       	ldi	r25, 0x07	; 7

00000798 <.L1^B14>:
     798:	01 97       	sbiw	r24, 0x01	; 1
     79a:	f1 f7       	brne	.-4      	; 0x798 <.L1^B14>
     79c:	00 c0       	rjmp	.+0      	; 0x79e <L0^A>

0000079e <L0^A>:
	...

000007a0 <.LBB245>:
     7a0:	8f ec       	ldi	r24, 0xCF	; 207
     7a2:	97 e0       	ldi	r25, 0x07	; 7

000007a4 <.L1^B15>:
     7a4:	01 97       	sbiw	r24, 0x01	; 1
     7a6:	f1 f7       	brne	.-4      	; 0x7a4 <.L1^B15>
     7a8:	00 c0       	rjmp	.+0      	; 0x7aa <L0^A>

000007aa <L0^A>:
	...

000007ac <.LBB246>:
     7ac:	8f ec       	ldi	r24, 0xCF	; 207
     7ae:	97 e0       	ldi	r25, 0x07	; 7

000007b0 <.L1^B16>:
     7b0:	01 97       	sbiw	r24, 0x01	; 1
     7b2:	f1 f7       	brne	.-4      	; 0x7b0 <.L1^B16>
     7b4:	00 c0       	rjmp	.+0      	; 0x7b6 <L0^A>

000007b6 <L0^A>:
	...

000007b8 <.LBB247>:
     7b8:	8f ec       	ldi	r24, 0xCF	; 207
     7ba:	97 e0       	ldi	r25, 0x07	; 7

000007bc <.L1^B17>:
     7bc:	01 97       	sbiw	r24, 0x01	; 1
     7be:	f1 f7       	brne	.-4      	; 0x7bc <.L1^B17>
     7c0:	00 c0       	rjmp	.+0      	; 0x7c2 <L0^A>

000007c2 <L0^A>:
	...

000007c4 <.LBB248>:
     7c4:	8f ec       	ldi	r24, 0xCF	; 207
     7c6:	97 e0       	ldi	r25, 0x07	; 7

000007c8 <.L1^B18>:
     7c8:	01 97       	sbiw	r24, 0x01	; 1
     7ca:	f1 f7       	brne	.-4      	; 0x7c8 <.L1^B18>
     7cc:	00 c0       	rjmp	.+0      	; 0x7ce <L0^A>

000007ce <L0^A>:
	...

000007d0 <.LBB249>:
     7d0:	8f ec       	ldi	r24, 0xCF	; 207
     7d2:	97 e0       	ldi	r25, 0x07	; 7

000007d4 <.L1^B19>:
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	f1 f7       	brne	.-4      	; 0x7d4 <.L1^B19>
     7d8:	00 c0       	rjmp	.+0      	; 0x7da <L0^A>

000007da <L0^A>:
	...

000007dc <.LBB250>:
     7dc:	8f ec       	ldi	r24, 0xCF	; 207
     7de:	97 e0       	ldi	r25, 0x07	; 7

000007e0 <.L1^B20>:
     7e0:	01 97       	sbiw	r24, 0x01	; 1
     7e2:	f1 f7       	brne	.-4      	; 0x7e0 <.L1^B20>
     7e4:	00 c0       	rjmp	.+0      	; 0x7e6 <L0^A>

000007e6 <L0^A>:
	...

000007e8 <.LBB251>:
     7e8:	8f ec       	ldi	r24, 0xCF	; 207
     7ea:	97 e0       	ldi	r25, 0x07	; 7

000007ec <.L1^B21>:
     7ec:	01 97       	sbiw	r24, 0x01	; 1
     7ee:	f1 f7       	brne	.-4      	; 0x7ec <.L1^B21>
     7f0:	00 c0       	rjmp	.+0      	; 0x7f2 <L0^A>

000007f2 <L0^A>:
	...

000007f4 <.LBB252>:
     7f4:	8f ec       	ldi	r24, 0xCF	; 207
     7f6:	97 e0       	ldi	r25, 0x07	; 7

000007f8 <.L1^B22>:
     7f8:	01 97       	sbiw	r24, 0x01	; 1
     7fa:	f1 f7       	brne	.-4      	; 0x7f8 <.L1^B22>
     7fc:	00 c0       	rjmp	.+0      	; 0x7fe <L0^A>

000007fe <L0^A>:
	...

00000800 <.LBB253>:
     800:	8f ec       	ldi	r24, 0xCF	; 207
     802:	97 e0       	ldi	r25, 0x07	; 7

00000804 <.L1^B23>:
     804:	01 97       	sbiw	r24, 0x01	; 1
     806:	f1 f7       	brne	.-4      	; 0x804 <.L1^B23>
     808:	00 c0       	rjmp	.+0      	; 0x80a <L0^A>

0000080a <L0^A>:
	...

0000080c <.LBB254>:
     80c:	8f ec       	ldi	r24, 0xCF	; 207
     80e:	97 e0       	ldi	r25, 0x07	; 7

00000810 <.L1^B24>:
     810:	01 97       	sbiw	r24, 0x01	; 1
     812:	f1 f7       	brne	.-4      	; 0x810 <.L1^B24>
     814:	00 c0       	rjmp	.+0      	; 0x816 <L0^A>

00000816 <L0^A>:
	...

00000818 <.LBB255>:
     818:	8f ec       	ldi	r24, 0xCF	; 207
     81a:	97 e0       	ldi	r25, 0x07	; 7

0000081c <.L1^B25>:
     81c:	01 97       	sbiw	r24, 0x01	; 1
     81e:	f1 f7       	brne	.-4      	; 0x81c <.L1^B25>
     820:	00 c0       	rjmp	.+0      	; 0x822 <L0^A>

00000822 <L0^A>:
	...

00000824 <.LBB256>:
     824:	8f ec       	ldi	r24, 0xCF	; 207
     826:	97 e0       	ldi	r25, 0x07	; 7

00000828 <.L1^B26>:
     828:	01 97       	sbiw	r24, 0x01	; 1
     82a:	f1 f7       	brne	.-4      	; 0x828 <.L1^B26>
     82c:	00 c0       	rjmp	.+0      	; 0x82e <L0^A>

0000082e <L0^A>:
	...

00000830 <.LBE226>:
}
     830:	08 95       	ret

00000832 <get_ambientlight>:
    if (!rx_busy) {
     832:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <rx_busy>

00000836 <.Loc.836>:
     836:	81 11       	cpse	r24, r1
     838:	1e c0       	rjmp	.+60     	; 0x876 <.L65>

0000083a <.Loc.837>:
        cli();
     83a:	f8 94       	cli

0000083c <.Loc.838>:
        adc_setup_conversion(7);
     83c:	87 e0       	ldi	r24, 0x07	; 7
     83e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>

00000842 <.Loc.839>:
     842:	83 e8       	ldi	r24, 0x83	; 131
     844:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>

00000848 <.Loc.840>:
        adc_start_conversion();
     848:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     84c:	80 64       	ori	r24, 0x40	; 64
     84e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>

00000852 <.L64>:
        adc_finish_conversion();
     852:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     856:	86 fd       	sbrc	r24, 6
     858:	fc cf       	rjmp	.-8      	; 0x852 <.L64>

0000085a <.Loc.844>:
        light = ADCW;                             // store AD result
     85a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     85e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>

00000862 <.LVL92>:
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     862:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>

00000866 <.Loc.847>:
     866:	23 ea       	ldi	r18, 0xA3	; 163
     868:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>

0000086c <.Loc.848>:
     86c:	21 e0       	ldi	r18, 0x01	; 1
     86e:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>

00000872 <.Loc.849>:
        sei();                                    // reenable interrupts
     872:	78 94       	sei
     874:	08 95       	ret

00000876 <.L65>:
    int16_t light = -1;
     876:	8f ef       	ldi	r24, 0xFF	; 255
     878:	9f ef       	ldi	r25, 0xFF	; 255

0000087a <.Loc.852>:
}
     87a:	08 95       	ret

0000087c <get_temperature>:
    if (!rx_busy) {
     87c:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <rx_busy>

00000880 <.Loc.858>:
     880:	81 11       	cpse	r24, r1
     882:	1e c0       	rjmp	.+60     	; 0x8c0 <.L70>

00000884 <.Loc.859>:
        cli();
     884:	f8 94       	cli

00000886 <.Loc.860>:
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     886:	88 ec       	ldi	r24, 0xC8	; 200
     888:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>

0000088c <.Loc.862>:
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     88c:	87 e8       	ldi	r24, 0x87	; 135
     88e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>

00000892 <.Loc.864>:
        adc_start_conversion();
     892:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     896:	80 64       	ori	r24, 0x40	; 64
     898:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>

0000089c <.L69>:
        adc_finish_conversion();
     89c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     8a0:	86 fd       	sbrc	r24, 6
     8a2:	fc cf       	rjmp	.-8      	; 0x89c <.L69>

000008a4 <.Loc.867>:
        temp = ADCW;                             // store AD result
     8a4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     8a8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>

000008ac <.LVL95>:
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     8ac:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>

000008b0 <.Loc.870>:
     8b0:	23 ea       	ldi	r18, 0xA3	; 163
     8b2:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>

000008b6 <.Loc.871>:
     8b6:	21 e0       	ldi	r18, 0x01	; 1
     8b8:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>

000008bc <.Loc.872>:
        sei();                                    // reenable interrupts
     8bc:	78 94       	sei
     8be:	08 95       	ret

000008c0 <.L70>:
    int16_t temp = -1;
     8c0:	8f ef       	ldi	r24, 0xFF	; 255
     8c2:	9f ef       	ldi	r25, 0xFF	; 255

000008c4 <.Loc.875>:
}
     8c4:	08 95       	ret

000008c6 <rand_hard>:
uint8_t rand_hard() {
     8c6:	1f 93       	push	r17

000008c8 <.LCFI9>:
     8c8:	cf 93       	push	r28

000008ca <.LCFI10>:
     8ca:	df 93       	push	r29

000008cc <.LCFI11>:
     8cc:	e0 e0       	ldi	r30, 0x00	; 0
     8ce:	f0 e0       	ldi	r31, 0x00	; 0

000008d0 <.Loc.883>:
    uint8_t num = 0;
     8d0:	80 e0       	ldi	r24, 0x00	; 0

000008d2 <.Loc.884>:
            adc_setup_conversion(6);
     8d2:	16 e0       	ldi	r17, 0x06	; 6
     8d4:	d3 e8       	ldi	r29, 0x83	; 131

000008d6 <.Loc.885>:
            adc_trigger_high_gain();
     8d6:	c3 ea       	ldi	r28, 0xA3	; 163
     8d8:	71 e0       	ldi	r23, 0x01	; 1

000008da <.Loc.886>:
            num |= (1<<i);
     8da:	a1 e0       	ldi	r26, 0x01	; 1
     8dc:	b0 e0       	ldi	r27, 0x00	; 0

000008de <.L78>:
    uint8_t num = 0;
     8de:	60 e8       	ldi	r22, 0x80	; 128

000008e0 <.L76>:
            cli();
     8e0:	f8 94       	cli

000008e2 <.Loc.890>:
            adc_setup_conversion(6);
     8e2:	10 93 7c 00 	sts	0x007C, r17	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>

000008e6 <.Loc.891>:
     8e6:	d0 93 7a 00 	sts	0x007A, r29	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>

000008ea <.Loc.892>:
            adc_start_conversion();
     8ea:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     8ee:	90 64       	ori	r25, 0x40	; 64
     8f0:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>

000008f4 <.L73>:
            adc_finish_conversion();
     8f4:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     8f8:	96 fd       	sbrc	r25, 6
     8fa:	fc cf       	rjmp	.-8      	; 0x8f4 <.L73>

000008fc <.Loc.896>:
            a = ADCW&0x1;
     8fc:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     900:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>

00000904 <.Loc.898>:
     904:	21 70       	andi	r18, 0x01	; 1

00000906 <.LVL99>:
            adc_start_conversion();
     906:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     90a:	90 64       	ori	r25, 0x40	; 64
     90c:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>

00000910 <.L74>:
            adc_finish_conversion();
     910:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     914:	96 fd       	sbrc	r25, 6
     916:	fc cf       	rjmp	.-8      	; 0x910 <.L74>

00000918 <.Loc.902>:
            b = ADCW&0x1;
     918:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     91c:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>

00000920 <.LVL100>:
            adc_trigger_high_gain();
     920:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>

00000924 <.Loc.905>:
     924:	c0 93 7a 00 	sts	0x007A, r28	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>

00000928 <.Loc.906>:
     928:	70 93 7b 00 	sts	0x007B, r23	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>

0000092c <.Loc.907>:
            sei();
     92c:	78 94       	sei

0000092e <.Loc.909>:
            b = ADCW&0x1;
     92e:	41 70       	andi	r20, 0x01	; 1

00000930 <.LVL101>:
        } while (a == b && tries < 128);
     930:	24 13       	cpse	r18, r20
     932:	03 c0       	rjmp	.+6      	; 0x93a <.L75>

00000934 <.Loc.913>:
     934:	61 50       	subi	r22, 0x01	; 1
     936:	61 11       	cpse	r22, r1
     938:	d3 cf       	rjmp	.-90     	; 0x8e0 <.L76>

0000093a <.L75>:
        if (a)
     93a:	22 23       	and	r18, r18
     93c:	39 f0       	breq	.+14     	; 0x94c <.L77>

0000093e <.Loc.916>:
            num |= (1<<i);
     93e:	9d 01       	movw	r18, r26

00000940 <.LVL102>:
     940:	0e 2e       	mov	r0, r30
     942:	01 c0       	rjmp	.+2      	; 0x946 <.L2^B1>

00000944 <.L1^B27>:
     944:	22 0f       	add	r18, r18

00000946 <.L2^B1>:
     946:	0a 94       	dec	r0
     948:	ea f7       	brpl	.-6      	; 0x944 <.L1^B27>

0000094a <.Loc.919>:
     94a:	82 2b       	or	r24, r18

0000094c <.L77>:
    for (i = 0; i < 8; i++) {
     94c:	31 96       	adiw	r30, 0x01	; 1

0000094e <.LVL104>:
     94e:	e8 30       	cpi	r30, 0x08	; 8
     950:	f1 05       	cpc	r31, r1
     952:	29 f6       	brne	.-118    	; 0x8de <.L78>

00000954 <.Loc.923>:
}
     954:	df 91       	pop	r29
     956:	cf 91       	pop	r28
     958:	1f 91       	pop	r17
     95a:	08 95       	ret

0000095c <rand_soft>:
    seed ^= seed<<3;
     95c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <seed>
     960:	98 2f       	mov	r25, r24
     962:	99 0f       	add	r25, r25
     964:	99 0f       	add	r25, r25
     966:	99 0f       	add	r25, r25

00000968 <.Loc.928>:
     968:	98 27       	eor	r25, r24

0000096a <.Loc.929>:
    seed ^= accumulator++>>2;
     96a:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <accumulator>
     96e:	21 e0       	ldi	r18, 0x01	; 1
     970:	28 0f       	add	r18, r24
     972:	20 93 6c 01 	sts	0x016C, r18	; 0x80016c <accumulator>

00000976 <.Loc.932>:
     976:	86 95       	lsr	r24
     978:	86 95       	lsr	r24
     97a:	89 27       	eor	r24, r25

0000097c <.Loc.933>:
    seed ^= seed>>5;
     97c:	92 95       	swap	r25
     97e:	96 95       	lsr	r25
     980:	97 70       	andi	r25, 0x07	; 7
     982:	89 27       	eor	r24, r25

00000984 <.Loc.934>:
    seed ^= accumulator++>>2;
     984:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <seed>

00000988 <.Loc.935>:
}
     988:	08 95       	ret

0000098a <rand_seed>:
    seed = s;
     98a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <seed>

0000098e <.Loc.940>:
}
     98e:	08 95       	ret

00000990 <get_voltage>:
    if (!rx_busy) {
     990:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <rx_busy>

00000994 <.Loc.945>:
     994:	81 11       	cpse	r24, r1
     996:	16 c0       	rjmp	.+44     	; 0x9c4 <.L91>

00000998 <.Loc.946>:
        cli();                                    // disable interrupts
     998:	f8 94       	cli

0000099a <.Loc.947>:
        adc_setup_conversion(6);
     99a:	86 e0       	ldi	r24, 0x06	; 6
     99c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>

000009a0 <.Loc.948>:
     9a0:	83 e8       	ldi	r24, 0x83	; 131
     9a2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>

000009a6 <.Loc.949>:
        adc_start_conversion();
     9a6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     9aa:	80 64       	ori	r24, 0x40	; 64
     9ac:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>

000009b0 <.L90>:
        adc_finish_conversion();
     9b0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     9b4:	86 fd       	sbrc	r24, 6
     9b6:	fc cf       	rjmp	.-8      	; 0x9b0 <.L90>

000009b8 <.Loc.954>:
        voltage = ADCW;                           // store AD result
     9b8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     9bc:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>

000009c0 <.LVL107>:
        sei();                                    // reenable interrupts
     9c0:	78 94       	sei

000009c2 <.LVL108>:
    return voltage;
     9c2:	08 95       	ret

000009c4 <.L91>:
    int16_t voltage=-1;
     9c4:	8f ef       	ldi	r24, 0xFF	; 255
     9c6:	9f ef       	ldi	r25, 0xFF	; 255

000009c8 <.Loc.960>:
}
     9c8:	08 95       	ret

000009ca <estimate_distance>:
uint8_t estimate_distance(const distance_measurement_t *dist) {
     9ca:	2f 92       	push	r2

000009cc <.LCFI12>:
     9cc:	3f 92       	push	r3

000009ce <.LCFI13>:
     9ce:	4f 92       	push	r4

000009d0 <.LCFI14>:
     9d0:	5f 92       	push	r5

000009d2 <.LCFI15>:
     9d2:	6f 92       	push	r6

000009d4 <.LCFI16>:
     9d4:	7f 92       	push	r7

000009d6 <.LCFI17>:
     9d6:	8f 92       	push	r8

000009d8 <.LCFI18>:
     9d8:	9f 92       	push	r9

000009da <.LCFI19>:
     9da:	af 92       	push	r10

000009dc <.LCFI20>:
     9dc:	bf 92       	push	r11

000009de <.LCFI21>:
     9de:	cf 92       	push	r12

000009e0 <.LCFI22>:
     9e0:	df 92       	push	r13

000009e2 <.LCFI23>:
     9e2:	ef 92       	push	r14

000009e4 <.LCFI24>:
     9e4:	ff 92       	push	r15

000009e6 <.LCFI25>:
     9e6:	0f 93       	push	r16

000009e8 <.LCFI26>:
     9e8:	1f 93       	push	r17

000009ea <.LCFI27>:
     9ea:	cf 93       	push	r28

000009ec <.LCFI28>:
     9ec:	df 93       	push	r29

000009ee <.LCFI29>:
     9ee:	cd b7       	in	r28, 0x3d	; 61
     9f0:	de b7       	in	r29, 0x3e	; 62

000009f2 <.LCFI30>:
     9f2:	28 97       	sbiw	r28, 0x08	; 8

000009f4 <.LCFI31>:
     9f4:	0f b6       	in	r0, 0x3f	; 63
     9f6:	f8 94       	cli
     9f8:	de bf       	out	0x3e, r29	; 62
     9fa:	0f be       	out	0x3f, r0	; 63
     9fc:	cd bf       	out	0x3d, r28	; 61
     9fe:	7c 01       	movw	r14, r24

00000a00 <.LVL110>:
    if (dist->high_gain < 900) {
     a00:	dc 01       	movw	r26, r24
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	0d 90       	ld	r0, X+
     a06:	bc 91       	ld	r27, X
     a08:	a0 2d       	mov	r26, r0
     a0a:	b8 87       	std	Y+8, r27	; 0x08
     a0c:	af 83       	std	Y+7, r26	; 0x07

00000a0e <.Loc.971>:
     a0e:	a4 38       	cpi	r26, 0x84	; 132
     a10:	e3 e0       	ldi	r30, 0x03	; 3
     a12:	be 07       	cpc	r27, r30
     a14:	0c f4       	brge	.+2      	; 0xa18 <.LVL111>

00000a16 <L0^A>:
     a16:	0d c1       	rjmp	.+538    	; 0xc32 <.L94>

00000a18 <.LVL111>:
        if (dist->low_gain > kilo_irlow[0]) {
     a18:	dc 01       	movw	r26, r24
     a1a:	0d 91       	ld	r16, X+
     a1c:	1c 91       	ld	r17, X

00000a1e <.Loc.974>:
     a1e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <kilo_irlow>
     a22:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <kilo_irlow+0x1>

00000a26 <.LVL112>:
    uint8_t dist_high=255;
     a26:	dd 24       	eor	r13, r13
     a28:	da 94       	dec	r13

00000a2a <.Loc.976>:
        if (dist->low_gain > kilo_irlow[0]) {
     a2a:	80 17       	cp	r24, r16
     a2c:	91 07       	cpc	r25, r17
     a2e:	08 f4       	brcc	.+2      	; 0xa32 <.L96>

00000a30 <L0^A>:
     a30:	1a c2       	rjmp	.+1076   	; 0xe66 <.L108>

00000a32 <.L96>:
                if(dist->low_gain > kilo_irlow[i]) {
     a32:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <kilo_irlow+0x2>
     a36:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <kilo_irlow+0x3>
     a3a:	80 17       	cp	r24, r16
     a3c:	91 07       	cpc	r25, r17
     a3e:	08 f4       	brcc	.+2      	; 0xa42 <.LVL114>

00000a40 <L0^A>:
     a40:	52 c3       	rjmp	.+1700   	; 0x10e6 <.L124>

00000a42 <.LVL114>:
     a42:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <kilo_irlow+0x4>
     a46:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <kilo_irlow+0x5>
     a4a:	80 17       	cp	r24, r16
     a4c:	91 07       	cpc	r25, r17
     a4e:	08 f4       	brcc	.+2      	; 0xa52 <.LVL115>

00000a50 <L0^A>:
     a50:	4f c3       	rjmp	.+1694   	; 0x10f0 <.L125>

00000a52 <.LVL115>:
     a52:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <kilo_irlow+0x6>
     a56:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <kilo_irlow+0x7>
     a5a:	80 17       	cp	r24, r16
     a5c:	91 07       	cpc	r25, r17
     a5e:	08 f4       	brcc	.+2      	; 0xa62 <.LVL116>

00000a60 <L0^A>:
     a60:	4c c3       	rjmp	.+1688   	; 0x10fa <.L126>

00000a62 <.LVL116>:
     a62:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <kilo_irlow+0x8>
     a66:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <kilo_irlow+0x9>
     a6a:	80 17       	cp	r24, r16
     a6c:	91 07       	cpc	r25, r17
     a6e:	08 f4       	brcc	.+2      	; 0xa72 <.LVL117>

00000a70 <L0^A>:
     a70:	49 c3       	rjmp	.+1682   	; 0x1104 <.L127>

00000a72 <.LVL117>:
     a72:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <kilo_irlow+0xa>
     a76:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <kilo_irlow+0xb>
     a7a:	80 17       	cp	r24, r16
     a7c:	91 07       	cpc	r25, r17
     a7e:	08 f4       	brcc	.+2      	; 0xa82 <.LVL118>

00000a80 <L0^A>:
     a80:	46 c3       	rjmp	.+1676   	; 0x110e <.L128>

00000a82 <.LVL118>:
     a82:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <kilo_irlow+0xc>
     a86:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <kilo_irlow+0xd>
     a8a:	80 17       	cp	r24, r16
     a8c:	91 07       	cpc	r25, r17
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <.LVL119>

00000a90 <L0^A>:
     a90:	43 c3       	rjmp	.+1670   	; 0x1118 <.L129>

00000a92 <.LVL119>:
     a92:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <kilo_irlow+0xe>
     a96:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <kilo_irlow+0xf>
     a9a:	80 17       	cp	r24, r16
     a9c:	91 07       	cpc	r25, r17
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <.LVL120>

00000aa0 <L0^A>:
     aa0:	44 c3       	rjmp	.+1672   	; 0x112a <.L130>

00000aa2 <.LVL120>:
     aa2:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <kilo_irlow+0x10>
     aa6:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <kilo_irlow+0x11>
     aaa:	80 17       	cp	r24, r16
     aac:	91 07       	cpc	r25, r17
     aae:	08 f4       	brcc	.+2      	; 0xab2 <.LVL121>

00000ab0 <L0^A>:
     ab0:	45 c3       	rjmp	.+1674   	; 0x113c <.L131>

00000ab2 <.LVL121>:
     ab2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <kilo_irlow+0x12>
     ab6:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <kilo_irlow+0x13>
     aba:	80 17       	cp	r24, r16
     abc:	91 07       	cpc	r25, r17
     abe:	08 f4       	brcc	.+2      	; 0xac2 <.LVL122>

00000ac0 <L0^A>:
     ac0:	40 c2       	rjmp	.+1152   	; 0xf42 <.L132>

00000ac2 <.LVL122>:
     ac2:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <kilo_irlow+0x14>
     ac6:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <kilo_irlow+0x15>
     aca:	80 17       	cp	r24, r16
     acc:	91 07       	cpc	r25, r17
     ace:	08 f4       	brcc	.+2      	; 0xad2 <.LVL123>

00000ad0 <L0^A>:
     ad0:	3e c3       	rjmp	.+1660   	; 0x114e <.L133>

00000ad2 <.LVL123>:
     ad2:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <kilo_irlow+0x16>
     ad6:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <kilo_irlow+0x17>
     ada:	80 17       	cp	r24, r16
     adc:	91 07       	cpc	r25, r17
     ade:	08 f4       	brcc	.+2      	; 0xae2 <.LVL124>

00000ae0 <L0^A>:
     ae0:	3f c3       	rjmp	.+1662   	; 0x1160 <.L134>

00000ae2 <.LVL124>:
     ae2:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <kilo_irlow+0x18>
     ae6:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <kilo_irlow+0x19>
     aea:	80 17       	cp	r24, r16
     aec:	91 07       	cpc	r25, r17
     aee:	08 f4       	brcc	.+2      	; 0xaf2 <.LVL125>

00000af0 <L0^A>:
     af0:	3c c3       	rjmp	.+1656   	; 0x116a <.L135>

00000af2 <.LVL125>:
     af2:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <kilo_irlow+0x1a>
     af6:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <kilo_irlow+0x1b>
     afa:	80 17       	cp	r24, r16
     afc:	91 07       	cpc	r25, r17
     afe:	08 f4       	brcc	.+2      	; 0xb02 <.Loc.1028>

00000b00 <L0^A>:
     b00:	3d c3       	rjmp	.+1658   	; 0x117c <.L137>

00000b02 <.Loc.1028>:
                dist_low=90;
     b02:	1a e5       	ldi	r17, 0x5A	; 90

00000b04 <.L103>:
        if (dist_high != 255) {
     b04:	9f ef       	ldi	r25, 0xFF	; 255
     b06:	d9 16       	cp	r13, r25
     b08:	09 f4       	brne	.+2      	; 0xb0c <.Loc.1031>

00000b0a <L0^A>:
     b0a:	ea c2       	rjmp	.+1492   	; 0x10e0 <.L105>

00000b0c <.Loc.1031>:
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     b0c:	2d 2d       	mov	r18, r13
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	40 e0       	ldi	r20, 0x00	; 0
     b12:	50 e0       	ldi	r21, 0x00	; 0
     b14:	29 83       	std	Y+1, r18	; 0x01
     b16:	3a 83       	std	Y+2, r19	; 0x02
     b18:	4b 83       	std	Y+3, r20	; 0x03
     b1a:	5c 83       	std	Y+4, r21	; 0x04
     b1c:	ca 01       	movw	r24, r20
     b1e:	b9 01       	movw	r22, r18
     b20:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__floatunsisf>

00000b24 <.LVL127>:
     b24:	6b 01       	movw	r12, r22
     b26:	7c 01       	movw	r14, r24

00000b28 <.Loc.1032>:
     b28:	81 2f       	mov	r24, r17
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	a0 e0       	ldi	r26, 0x00	; 0
     b2e:	b0 e0       	ldi	r27, 0x00	; 0
     b30:	89 83       	std	Y+1, r24	; 0x01
     b32:	9a 83       	std	Y+2, r25	; 0x02
     b34:	ab 83       	std	Y+3, r26	; 0x03
     b36:	bc 83       	std	Y+4, r27	; 0x04
     b38:	bc 01       	movw	r22, r24
     b3a:	cd 01       	movw	r24, r26
     b3c:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__floatunsisf>

00000b40 <.LVL128>:
     b40:	4b 01       	movw	r8, r22
     b42:	5c 01       	movw	r10, r24

00000b44 <.L99>:
     b44:	2f 81       	ldd	r18, Y+7	; 0x07
     b46:	38 85       	ldd	r19, Y+8	; 0x08
     b48:	03 2e       	mov	r0, r19
     b4a:	00 0c       	add	r0, r0
     b4c:	44 0b       	sbc	r20, r20
     b4e:	55 0b       	sbc	r21, r21
     b50:	29 83       	std	Y+1, r18	; 0x01
     b52:	3a 83       	std	Y+2, r19	; 0x02
     b54:	4b 83       	std	Y+3, r20	; 0x03
     b56:	5c 83       	std	Y+4, r21	; 0x04
     b58:	ca 01       	movw	r24, r20
     b5a:	b9 01       	movw	r22, r18
     b5c:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__floatsisf>

00000b60 <.LVL129>:
     b60:	8b 01       	movw	r16, r22
     b62:	8e 83       	std	Y+6, r24	; 0x06
     b64:	9d 83       	std	Y+5, r25	; 0x05
     b66:	9b 01       	movw	r18, r22
     b68:	ac 01       	movw	r20, r24
     b6a:	60 e0       	ldi	r22, 0x00	; 0
     b6c:	70 e0       	ldi	r23, 0x00	; 0
     b6e:	81 e6       	ldi	r24, 0x61	; 97
     b70:	94 e4       	ldi	r25, 0x44	; 68
     b72:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <__subsf3>

00000b76 <.LVL130>:
     b76:	96 01       	movw	r18, r12
     b78:	a7 01       	movw	r20, r14
     b7a:	69 83       	std	Y+1, r22	; 0x01
     b7c:	7a 83       	std	Y+2, r23	; 0x02
     b7e:	8b 83       	std	Y+3, r24	; 0x03
     b80:	9c 83       	std	Y+4, r25	; 0x04
     b82:	69 81       	ldd	r22, Y+1	; 0x01
     b84:	7a 81       	ldd	r23, Y+2	; 0x02
     b86:	8b 81       	ldd	r24, Y+3	; 0x03
     b88:	9c 81       	ldd	r25, Y+4	; 0x04
     b8a:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <__mulsf3>

00000b8e <.LVL131>:
     b8e:	6b 01       	movw	r12, r22
     b90:	7c 01       	movw	r14, r24

00000b92 <.Loc.1036>:
     b92:	20 e0       	ldi	r18, 0x00	; 0
     b94:	30 e0       	ldi	r19, 0x00	; 0
     b96:	4f e2       	ldi	r20, 0x2F	; 47
     b98:	54 e4       	ldi	r21, 0x44	; 68
     b9a:	09 83       	std	Y+1, r16	; 0x01
     b9c:	1a 83       	std	Y+2, r17	; 0x02
     b9e:	8e 81       	ldd	r24, Y+6	; 0x06
     ba0:	8b 83       	std	Y+3, r24	; 0x03
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	9c 83       	std	Y+4, r25	; 0x04
     ba6:	69 81       	ldd	r22, Y+1	; 0x01
     ba8:	7a 81       	ldd	r23, Y+2	; 0x02
     baa:	8b 81       	ldd	r24, Y+3	; 0x03
     bac:	9c 81       	ldd	r25, Y+4	; 0x04
     bae:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <__subsf3>

00000bb2 <.LVL132>:
     bb2:	94 01       	movw	r18, r8
     bb4:	a5 01       	movw	r20, r10
     bb6:	69 83       	std	Y+1, r22	; 0x01
     bb8:	7a 83       	std	Y+2, r23	; 0x02
     bba:	8b 83       	std	Y+3, r24	; 0x03
     bbc:	9c 83       	std	Y+4, r25	; 0x04
     bbe:	69 81       	ldd	r22, Y+1	; 0x01
     bc0:	7a 81       	ldd	r23, Y+2	; 0x02
     bc2:	8b 81       	ldd	r24, Y+3	; 0x03
     bc4:	9c 81       	ldd	r25, Y+4	; 0x04
     bc6:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <__mulsf3>

00000bca <.LVL133>:
     bca:	9b 01       	movw	r18, r22
     bcc:	ac 01       	movw	r20, r24
     bce:	c9 82       	std	Y+1, r12	; 0x01
     bd0:	da 82       	std	Y+2, r13	; 0x02
     bd2:	eb 82       	std	Y+3, r14	; 0x03
     bd4:	fc 82       	std	Y+4, r15	; 0x04
     bd6:	69 81       	ldd	r22, Y+1	; 0x01
     bd8:	7a 81       	ldd	r23, Y+2	; 0x02
     bda:	8b 81       	ldd	r24, Y+3	; 0x03
     bdc:	9c 81       	ldd	r25, Y+4	; 0x04
     bde:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__addsf3>

00000be2 <.LVL134>:
     be2:	20 e0       	ldi	r18, 0x00	; 0
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	48 e4       	ldi	r20, 0x48	; 72
     be8:	53 e4       	ldi	r21, 0x43	; 67
     bea:	69 83       	std	Y+1, r22	; 0x01
     bec:	7a 83       	std	Y+2, r23	; 0x02
     bee:	8b 83       	std	Y+3, r24	; 0x03
     bf0:	9c 83       	std	Y+4, r25	; 0x04
     bf2:	69 81       	ldd	r22, Y+1	; 0x01
     bf4:	7a 81       	ldd	r23, Y+2	; 0x02
     bf6:	8b 81       	ldd	r24, Y+3	; 0x03
     bf8:	9c 81       	ldd	r25, Y+4	; 0x04
     bfa:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__divsf3>

00000bfe <.LVL135>:
     bfe:	20 e0       	ldi	r18, 0x00	; 0
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	44 e0       	ldi	r20, 0x04	; 4
     c04:	52 e4       	ldi	r21, 0x42	; 66
     c06:	69 83       	std	Y+1, r22	; 0x01
     c08:	7a 83       	std	Y+2, r23	; 0x02
     c0a:	8b 83       	std	Y+3, r24	; 0x03
     c0c:	9c 83       	std	Y+4, r25	; 0x04
     c0e:	69 81       	ldd	r22, Y+1	; 0x01
     c10:	7a 81       	ldd	r23, Y+2	; 0x02
     c12:	8b 81       	ldd	r24, Y+3	; 0x03
     c14:	9c 81       	ldd	r25, Y+4	; 0x04
     c16:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__addsf3>

00000c1a <.LVL136>:
     c1a:	69 83       	std	Y+1, r22	; 0x01
     c1c:	7a 83       	std	Y+2, r23	; 0x02
     c1e:	8b 83       	std	Y+3, r24	; 0x03
     c20:	9c 83       	std	Y+4, r25	; 0x04
     c22:	69 81       	ldd	r22, Y+1	; 0x01
     c24:	7a 81       	ldd	r23, Y+2	; 0x02
     c26:	8b 81       	ldd	r24, Y+3	; 0x03
     c28:	9c 81       	ldd	r25, Y+4	; 0x04
     c2a:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <__fixunssfsi>

00000c2e <.LVL137>:
     c2e:	86 2f       	mov	r24, r22
     c30:	1b c1       	rjmp	.+566    	; 0xe68 <.L93>

00000c32 <.L94>:
        if (dist->high_gain > kilo_irhigh[0]) {
     c32:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <kilo_irhigh>
     c36:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <kilo_irhigh+0x1>
     c3a:	8a 17       	cp	r24, r26
     c3c:	9b 07       	cpc	r25, r27
     c3e:	08 f4       	brcc	.+2      	; 0xc42 <.LBB261>

00000c40 <L0^A>:
     c40:	0f c1       	rjmp	.+542    	; 0xe60 <.L138>

00000c42 <.LBB261>:
                if (dist->high_gain > kilo_irhigh[i]) {
     c42:	00 91 2c 01 	lds	r16, 0x012C	; 0x80012c <kilo_irhigh+0x2>
     c46:	10 91 2d 01 	lds	r17, 0x012D	; 0x80012d <kilo_irhigh+0x3>

00000c4a <.Loc.1045>:
     c4a:	0a 17       	cp	r16, r26
     c4c:	1b 07       	cpc	r17, r27
     c4e:	08 f4       	brcc	.+2      	; 0xc52 <.LVL140>

00000c50 <L0^A>:
     c50:	39 c1       	rjmp	.+626    	; 0xec4 <.L110>

00000c52 <.LVL140>:
     c52:	00 91 2e 01 	lds	r16, 0x012E	; 0x80012e <kilo_irhigh+0x4>
     c56:	10 91 2f 01 	lds	r17, 0x012F	; 0x80012f <kilo_irhigh+0x5>

00000c5a <.Loc.1050>:
     c5a:	0a 17       	cp	r16, r26
     c5c:	1b 07       	cpc	r17, r27
     c5e:	08 f4       	brcc	.+2      	; 0xc62 <.LVL141>

00000c60 <L0^A>:
     c60:	60 c2       	rjmp	.+1216   	; 0x1122 <.L111>

00000c62 <.LVL141>:
     c62:	00 91 30 01 	lds	r16, 0x0130	; 0x800130 <kilo_irhigh+0x6>
     c66:	10 91 31 01 	lds	r17, 0x0131	; 0x800131 <kilo_irhigh+0x7>

00000c6a <.Loc.1055>:
     c6a:	0a 17       	cp	r16, r26
     c6c:	1b 07       	cpc	r17, r27
     c6e:	08 f4       	brcc	.+2      	; 0xc72 <.LVL142>

00000c70 <L0^A>:
     c70:	61 c2       	rjmp	.+1218   	; 0x1134 <.L112>

00000c72 <.LVL142>:
     c72:	00 91 32 01 	lds	r16, 0x0132	; 0x800132 <kilo_irhigh+0x8>
     c76:	10 91 33 01 	lds	r17, 0x0133	; 0x800133 <kilo_irhigh+0x9>

00000c7a <.Loc.1060>:
     c7a:	0a 17       	cp	r16, r26
     c7c:	1b 07       	cpc	r17, r27
     c7e:	08 f4       	brcc	.+2      	; 0xc82 <.LVL143>

00000c80 <L0^A>:
     c80:	2b c2       	rjmp	.+1110   	; 0x10d8 <.L113>

00000c82 <.LVL143>:
     c82:	00 91 34 01 	lds	r16, 0x0134	; 0x800134 <kilo_irhigh+0xa>
     c86:	10 91 35 01 	lds	r17, 0x0135	; 0x800135 <kilo_irhigh+0xb>

00000c8a <.Loc.1065>:
     c8a:	0a 17       	cp	r16, r26
     c8c:	1b 07       	cpc	r17, r27
     c8e:	08 f4       	brcc	.+2      	; 0xc92 <.LVL144>

00000c90 <L0^A>:
     c90:	5a c2       	rjmp	.+1204   	; 0x1146 <.L114>

00000c92 <.LVL144>:
     c92:	00 91 36 01 	lds	r16, 0x0136	; 0x800136 <kilo_irhigh+0xc>
     c96:	10 91 37 01 	lds	r17, 0x0137	; 0x800137 <kilo_irhigh+0xd>

00000c9a <.Loc.1070>:
     c9a:	0a 17       	cp	r16, r26
     c9c:	1b 07       	cpc	r17, r27
     c9e:	08 f4       	brcc	.+2      	; 0xca2 <.LVL145>

00000ca0 <L0^A>:
     ca0:	5b c2       	rjmp	.+1206   	; 0x1158 <.L115>

00000ca2 <.LVL145>:
     ca2:	00 91 38 01 	lds	r16, 0x0138	; 0x800138 <kilo_irhigh+0xe>
     ca6:	10 91 39 01 	lds	r17, 0x0139	; 0x800139 <kilo_irhigh+0xf>

00000caa <.Loc.1075>:
     caa:	0a 17       	cp	r16, r26
     cac:	1b 07       	cpc	r17, r27
     cae:	08 f4       	brcc	.+2      	; 0xcb2 <.LVL146>

00000cb0 <L0^A>:
     cb0:	61 c2       	rjmp	.+1218   	; 0x1174 <.L116>

00000cb2 <.LVL146>:
     cb2:	00 91 3a 01 	lds	r16, 0x013A	; 0x80013a <kilo_irhigh+0x10>
     cb6:	10 91 3b 01 	lds	r17, 0x013B	; 0x80013b <kilo_irhigh+0x11>

00000cba <.Loc.1080>:
     cba:	0a 17       	cp	r16, r26
     cbc:	1b 07       	cpc	r17, r27
     cbe:	08 f4       	brcc	.+2      	; 0xcc2 <.LVL147>

00000cc0 <L0^A>:
     cc0:	62 c2       	rjmp	.+1220   	; 0x1186 <.L117>

00000cc2 <.LVL147>:
     cc2:	00 91 3c 01 	lds	r16, 0x013C	; 0x80013c <kilo_irhigh+0x12>
     cc6:	10 91 3d 01 	lds	r17, 0x013D	; 0x80013d <kilo_irhigh+0x13>

00000cca <.Loc.1085>:
     cca:	0a 17       	cp	r16, r26
     ccc:	1b 07       	cpc	r17, r27
     cce:	08 f4       	brcc	.+2      	; 0xcd2 <.LVL148>

00000cd0 <L0^A>:
     cd0:	5e c2       	rjmp	.+1212   	; 0x118e <.L118>

00000cd2 <.LVL148>:
     cd2:	00 91 3e 01 	lds	r16, 0x013E	; 0x80013e <kilo_irhigh+0x14>
     cd6:	10 91 3f 01 	lds	r17, 0x013F	; 0x80013f <kilo_irhigh+0x15>

00000cda <.Loc.1090>:
     cda:	0a 17       	cp	r16, r26
     cdc:	1b 07       	cpc	r17, r27
     cde:	08 f4       	brcc	.+2      	; 0xce2 <.LVL149>

00000ce0 <L0^A>:
     ce0:	5a c2       	rjmp	.+1204   	; 0x1196 <.L119>

00000ce2 <.LVL149>:
     ce2:	00 91 40 01 	lds	r16, 0x0140	; 0x800140 <kilo_irhigh+0x16>
     ce6:	10 91 41 01 	lds	r17, 0x0141	; 0x800141 <kilo_irhigh+0x17>

00000cea <.Loc.1095>:
     cea:	0a 17       	cp	r16, r26
     cec:	1b 07       	cpc	r17, r27
     cee:	08 f4       	brcc	.+2      	; 0xcf2 <.LVL150>

00000cf0 <L0^A>:
     cf0:	56 c2       	rjmp	.+1196   	; 0x119e <.L120>

00000cf2 <.LVL150>:
     cf2:	00 91 42 01 	lds	r16, 0x0142	; 0x800142 <kilo_irhigh+0x18>
     cf6:	10 91 43 01 	lds	r17, 0x0143	; 0x800143 <kilo_irhigh+0x19>

00000cfa <.Loc.1100>:
     cfa:	0a 17       	cp	r16, r26
     cfc:	1b 07       	cpc	r17, r27
     cfe:	08 f4       	brcc	.+2      	; 0xd02 <.LVL151>

00000d00 <L0^A>:
     d00:	52 c2       	rjmp	.+1188   	; 0x11a6 <.L121>

00000d02 <.LVL151>:
     d02:	00 91 44 01 	lds	r16, 0x0144	; 0x800144 <kilo_irhigh+0x1a>
     d06:	10 91 45 01 	lds	r17, 0x0145	; 0x800145 <kilo_irhigh+0x1b>

00000d0a <.Loc.1105>:
            for (i=1; i<14; i++) {
     d0a:	8d e0       	ldi	r24, 0x0D	; 13

00000d0c <.Loc.1106>:
                if (dist->high_gain > kilo_irhigh[i]) {
     d0c:	2d e0       	ldi	r18, 0x0D	; 13
     d0e:	30 e0       	ldi	r19, 0x00	; 0

00000d10 <.Loc.1107>:
     d10:	0a 17       	cp	r16, r26
     d12:	1b 07       	cpc	r17, r27
     d14:	08 f4       	brcc	.+2      	; 0xd18 <L0^A+0x2>

00000d16 <L0^A>:
     d16:	d9 c0       	rjmp	.+434    	; 0xeca <.L100>
     d18:	41 2c       	mov	r4, r1
     d1a:	51 2c       	mov	r5, r1
     d1c:	30 ed       	ldi	r19, 0xD0	; 208
     d1e:	3d 83       	std	Y+5, r19	; 0x05
     d20:	40 e4       	ldi	r20, 0x40	; 64
     d22:	4e 83       	std	Y+6, r20	; 0x06
     d24:	5c e0       	ldi	r21, 0x0C	; 12
     d26:	c5 2e       	mov	r12, r21
     d28:	d1 2c       	mov	r13, r1

00000d2a <.L101>:
            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     d2a:	f6 01       	movw	r30, r12
     d2c:	ee 0f       	add	r30, r30
     d2e:	ff 1f       	adc	r31, r31
     d30:	e6 5d       	subi	r30, 0xD6	; 214
     d32:	fe 4f       	sbci	r31, 0xFE	; 254

00000d34 <.Loc.1110>:
     d34:	80 81       	ld	r24, Z
     d36:	91 81       	ldd	r25, Z+1	; 0x01
     d38:	d8 01       	movw	r26, r16
     d3a:	a8 1b       	sub	r26, r24
     d3c:	b9 0b       	sbc	r27, r25

00000d3e <.Loc.1111>:
     d3e:	9d 01       	movw	r18, r26
     d40:	40 e0       	ldi	r20, 0x00	; 0
     d42:	50 e0       	ldi	r21, 0x00	; 0
     d44:	29 83       	std	Y+1, r18	; 0x01
     d46:	3a 83       	std	Y+2, r19	; 0x02
     d48:	4b 83       	std	Y+3, r20	; 0x03
     d4a:	5c 83       	std	Y+4, r21	; 0x04
     d4c:	ca 01       	movw	r24, r20
     d4e:	b9 01       	movw	r22, r18
     d50:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__floatunsisf>

00000d54 <.LVL153>:
     d54:	9b 01       	movw	r18, r22
     d56:	ac 01       	movw	r20, r24
     d58:	69 83       	std	Y+1, r22	; 0x01
     d5a:	7a 83       	std	Y+2, r23	; 0x02
     d5c:	8b 83       	std	Y+3, r24	; 0x03
     d5e:	9c 83       	std	Y+4, r25	; 0x04
     d60:	69 81       	ldd	r22, Y+1	; 0x01
     d62:	7a 81       	ldd	r23, Y+2	; 0x02
     d64:	8b 81       	ldd	r24, Y+3	; 0x03
     d66:	9c 81       	ldd	r25, Y+4	; 0x04
     d68:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__addsf3>

00000d6c <.LVL154>:
     d6c:	5b 01       	movw	r10, r22
     d6e:	6c 01       	movw	r12, r24

00000d70 <.LVL155>:
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     d70:	8f 81       	ldd	r24, Y+7	; 0x07
     d72:	98 85       	ldd	r25, Y+8	; 0x08
     d74:	09 2e       	mov	r0, r25
     d76:	00 0c       	add	r0, r0
     d78:	aa 0b       	sbc	r26, r26
     d7a:	bb 0b       	sbc	r27, r27
     d7c:	89 83       	std	Y+1, r24	; 0x01
     d7e:	9a 83       	std	Y+2, r25	; 0x02
     d80:	ab 83       	std	Y+3, r26	; 0x03
     d82:	bc 83       	std	Y+4, r27	; 0x04
     d84:	bc 01       	movw	r22, r24
     d86:	cd 01       	movw	r24, r26
     d88:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__floatsisf>

00000d8c <.LVL156>:
     d8c:	3b 01       	movw	r6, r22
     d8e:	4c 01       	movw	r8, r24

00000d90 <.Loc.1116>:
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
     d90:	98 01       	movw	r18, r16
     d92:	40 e0       	ldi	r20, 0x00	; 0
     d94:	50 e0       	ldi	r21, 0x00	; 0
     d96:	29 83       	std	Y+1, r18	; 0x01
     d98:	3a 83       	std	Y+2, r19	; 0x02
     d9a:	4b 83       	std	Y+3, r20	; 0x03
     d9c:	5c 83       	std	Y+4, r21	; 0x04
     d9e:	ca 01       	movw	r24, r20
     da0:	b9 01       	movw	r22, r18
     da2:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__floatunsisf>

00000da6 <.LVL157>:
     da6:	1b 01       	movw	r2, r22
     da8:	8c 01       	movw	r16, r24

00000daa <.Loc.1117>:
     daa:	92 01       	movw	r18, r4
     dac:	4d 81       	ldd	r20, Y+5	; 0x05
     dae:	5e 81       	ldd	r21, Y+6	; 0x06
     db0:	a9 82       	std	Y+1, r10	; 0x01
     db2:	ba 82       	std	Y+2, r11	; 0x02
     db4:	cb 82       	std	Y+3, r12	; 0x03
     db6:	dc 82       	std	Y+4, r13	; 0x04
     db8:	69 81       	ldd	r22, Y+1	; 0x01
     dba:	7a 81       	ldd	r23, Y+2	; 0x02
     dbc:	8b 81       	ldd	r24, Y+3	; 0x03
     dbe:	9c 81       	ldd	r25, Y+4	; 0x04
     dc0:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <__mulsf3>

00000dc4 <.LVL159>:
     dc4:	9b 01       	movw	r18, r22
     dc6:	ac 01       	movw	r20, r24
     dc8:	29 82       	std	Y+1, r2	; 0x01
     dca:	3a 82       	std	Y+2, r3	; 0x02
     dcc:	0b 83       	std	Y+3, r16	; 0x03
     dce:	1c 83       	std	Y+4, r17	; 0x04
     dd0:	69 81       	ldd	r22, Y+1	; 0x01
     dd2:	7a 81       	ldd	r23, Y+2	; 0x02
     dd4:	8b 81       	ldd	r24, Y+3	; 0x03
     dd6:	9c 81       	ldd	r25, Y+4	; 0x04
     dd8:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <__subsf3>

00000ddc <.LVL160>:
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     ddc:	9b 01       	movw	r18, r22
     dde:	ac 01       	movw	r20, r24
     de0:	69 82       	std	Y+1, r6	; 0x01
     de2:	7a 82       	std	Y+2, r7	; 0x02
     de4:	8b 82       	std	Y+3, r8	; 0x03
     de6:	9c 82       	std	Y+4, r9	; 0x04
     de8:	69 81       	ldd	r22, Y+1	; 0x01
     dea:	7a 81       	ldd	r23, Y+2	; 0x02
     dec:	8b 81       	ldd	r24, Y+3	; 0x03
     dee:	9c 81       	ldd	r25, Y+4	; 0x04
     df0:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <__subsf3>

00000df4 <.LVL161>:
     df4:	20 e0       	ldi	r18, 0x00	; 0
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	40 e2       	ldi	r20, 0x20	; 32
     dfa:	51 e4       	ldi	r21, 0x41	; 65
     dfc:	69 83       	std	Y+1, r22	; 0x01
     dfe:	7a 83       	std	Y+2, r23	; 0x02
     e00:	8b 83       	std	Y+3, r24	; 0x03
     e02:	9c 83       	std	Y+4, r25	; 0x04
     e04:	69 81       	ldd	r22, Y+1	; 0x01
     e06:	7a 81       	ldd	r23, Y+2	; 0x02
     e08:	8b 81       	ldd	r24, Y+3	; 0x03
     e0a:	9c 81       	ldd	r25, Y+4	; 0x04

00000e0c <.Loc.1123>:
     e0c:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <__mulsf3>

00000e10 <.LVL163>:
            b=((int)((int)b/(int)slope));
     e10:	69 83       	std	Y+1, r22	; 0x01

00000e12 <.Loc.1125>:
     e12:	7a 83       	std	Y+2, r23	; 0x02
     e14:	8b 83       	std	Y+3, r24	; 0x03
     e16:	9c 83       	std	Y+4, r25	; 0x04
     e18:	69 81       	ldd	r22, Y+1	; 0x01
     e1a:	7a 81       	ldd	r23, Y+2	; 0x02
     e1c:	8b 81       	ldd	r24, Y+3	; 0x03
     e1e:	9c 81       	ldd	r25, Y+4	; 0x04
     e20:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <__fixsfsi>

00000e24 <.LVL165>:
     e24:	8b 01       	movw	r16, r22

00000e26 <.Loc.1126>:
     e26:	a9 82       	std	Y+1, r10	; 0x01
     e28:	ba 82       	std	Y+2, r11	; 0x02
     e2a:	cb 82       	std	Y+3, r12	; 0x03
     e2c:	dc 82       	std	Y+4, r13	; 0x04
     e2e:	69 81       	ldd	r22, Y+1	; 0x01
     e30:	7a 81       	ldd	r23, Y+2	; 0x02
     e32:	8b 81       	ldd	r24, Y+3	; 0x03
     e34:	9c 81       	ldd	r25, Y+4	; 0x04
     e36:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <__fixsfsi>

00000e3a <.LVL166>:
     e3a:	69 83       	std	Y+1, r22	; 0x01
     e3c:	7a 83       	std	Y+2, r23	; 0x02
     e3e:	8b 83       	std	Y+3, r24	; 0x03
     e40:	9c 83       	std	Y+4, r25	; 0x04

00000e42 <.Loc.1127>:
     e42:	c8 01       	movw	r24, r16
     e44:	69 81       	ldd	r22, Y+1	; 0x01
     e46:	7a 81       	ldd	r23, Y+2	; 0x02
     e48:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <__divmodhi4>

00000e4c <.Loc.1128>:
            dist_high=b;
     e4c:	d6 2e       	mov	r13, r22

00000e4e <.LBE261>:
    if (dist->high_gain > 700) {
     e4e:	4f 81       	ldd	r20, Y+7	; 0x07
     e50:	58 85       	ldd	r21, Y+8	; 0x08
     e52:	4d 3b       	cpi	r20, 0xBD	; 189
     e54:	52 40       	sbci	r21, 0x02	; 2
     e56:	0c f0       	brlt	.+2      	; 0xe5a <.Loc.1132>

00000e58 <L0^A>:
     e58:	67 c0       	rjmp	.+206    	; 0xf28 <.L102>

00000e5a <.Loc.1132>:
        return 33 + dist_high;
     e5a:	81 e2       	ldi	r24, 0x21	; 33
     e5c:	86 0f       	add	r24, r22
     e5e:	04 c0       	rjmp	.+8      	; 0xe68 <.L93>

00000e60 <.L138>:
    if (dist->high_gain > 700) {
     e60:	ad 3b       	cpi	r26, 0xBD	; 189
     e62:	b2 40       	sbci	r27, 0x02	; 2
     e64:	d4 f4       	brge	.+52     	; 0xe9a <.L139>

00000e66 <.L108>:
     e66:	81 e2       	ldi	r24, 0x21	; 33

00000e68 <.L93>:
}
     e68:	28 96       	adiw	r28, 0x08	; 8
     e6a:	0f b6       	in	r0, 0x3f	; 63
     e6c:	f8 94       	cli
     e6e:	de bf       	out	0x3e, r29	; 62
     e70:	0f be       	out	0x3f, r0	; 63
     e72:	cd bf       	out	0x3d, r28	; 61
     e74:	df 91       	pop	r29
     e76:	cf 91       	pop	r28
     e78:	1f 91       	pop	r17
     e7a:	0f 91       	pop	r16
     e7c:	ff 90       	pop	r15
     e7e:	ef 90       	pop	r14
     e80:	df 90       	pop	r13
     e82:	cf 90       	pop	r12
     e84:	bf 90       	pop	r11
     e86:	af 90       	pop	r10
     e88:	9f 90       	pop	r9
     e8a:	8f 90       	pop	r8
     e8c:	7f 90       	pop	r7
     e8e:	6f 90       	pop	r6
     e90:	5f 90       	pop	r5
     e92:	4f 90       	pop	r4
     e94:	3f 90       	pop	r3
     e96:	2f 90       	pop	r2
     e98:	08 95       	ret

00000e9a <.L139>:
        if (dist->low_gain > kilo_irlow[0]) {
     e9a:	d7 01       	movw	r26, r14
     e9c:	0d 91       	ld	r16, X+
     e9e:	1c 91       	ld	r17, X

00000ea0 <.Loc.1140>:
     ea0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <kilo_irlow>
     ea4:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <kilo_irlow+0x1>

00000ea8 <.Loc.1141>:
            dist_high=0;
     ea8:	d1 2c       	mov	r13, r1

00000eaa <.Loc.1142>:
        if (dist->low_gain > kilo_irlow[0]) {
     eaa:	80 17       	cp	r24, r16
     eac:	91 07       	cpc	r25, r17
     eae:	08 f0       	brcs	.+2      	; 0xeb2 <.Loc.1143>

00000eb0 <L0^A>:
     eb0:	c0 cd       	rjmp	.-1152   	; 0xa32 <.L96>

00000eb2 <.Loc.1143>:
     eb2:	81 2c       	mov	r8, r1
     eb4:	91 2c       	mov	r9, r1
     eb6:	a1 2c       	mov	r10, r1
     eb8:	b1 2c       	mov	r11, r1
     eba:	c1 2c       	mov	r12, r1
     ebc:	d1 2c       	mov	r13, r1
     ebe:	e1 2c       	mov	r14, r1

00000ec0 <.LVL172>:
     ec0:	f1 2c       	mov	r15, r1
     ec2:	40 ce       	rjmp	.-896    	; 0xb44 <.L99>

00000ec4 <.L110>:
            for (i=1; i<14; i++) {
     ec4:	81 e0       	ldi	r24, 0x01	; 1

00000ec6 <.Loc.1146>:
                if (dist->high_gain > kilo_irhigh[i]) {
     ec6:	21 e0       	ldi	r18, 0x01	; 1
     ec8:	30 e0       	ldi	r19, 0x00	; 0

00000eca <.L100>:
            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     eca:	69 01       	movw	r12, r18
     ecc:	f1 e0       	ldi	r31, 0x01	; 1
     ece:	cf 1a       	sub	r12, r31
     ed0:	d1 08       	sbc	r13, r1

00000ed2 <.Loc.1148>:
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
     ed2:	28 2f       	mov	r18, r24
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	40 e0       	ldi	r20, 0x00	; 0
     ed8:	50 e0       	ldi	r21, 0x00	; 0
     eda:	29 83       	std	Y+1, r18	; 0x01
     edc:	3a 83       	std	Y+2, r19	; 0x02
     ede:	4b 83       	std	Y+3, r20	; 0x03
     ee0:	5c 83       	std	Y+4, r21	; 0x04
     ee2:	ca 01       	movw	r24, r20
     ee4:	b9 01       	movw	r22, r18
     ee6:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__floatunsisf>

00000eea <.LVL175>:
     eea:	20 e0       	ldi	r18, 0x00	; 0
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	40 e0       	ldi	r20, 0x00	; 0
     ef0:	5f e3       	ldi	r21, 0x3F	; 63
     ef2:	69 83       	std	Y+1, r22	; 0x01
     ef4:	7a 83       	std	Y+2, r23	; 0x02
     ef6:	8b 83       	std	Y+3, r24	; 0x03
     ef8:	9c 83       	std	Y+4, r25	; 0x04
     efa:	69 81       	ldd	r22, Y+1	; 0x01
     efc:	7a 81       	ldd	r23, Y+2	; 0x02
     efe:	8b 81       	ldd	r24, Y+3	; 0x03
     f00:	9c 81       	ldd	r25, Y+4	; 0x04
     f02:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <__mulsf3>

00000f06 <.LVL176>:
     f06:	20 e0       	ldi	r18, 0x00	; 0
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	a9 01       	movw	r20, r18
     f0c:	69 83       	std	Y+1, r22	; 0x01
     f0e:	7a 83       	std	Y+2, r23	; 0x02
     f10:	8b 83       	std	Y+3, r24	; 0x03
     f12:	9c 83       	std	Y+4, r25	; 0x04
     f14:	69 81       	ldd	r22, Y+1	; 0x01
     f16:	7a 81       	ldd	r23, Y+2	; 0x02
     f18:	8b 81       	ldd	r24, Y+3	; 0x03
     f1a:	9c 81       	ldd	r25, Y+4	; 0x04
     f1c:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__addsf3>

00000f20 <.LVL177>:
     f20:	2b 01       	movw	r4, r22
     f22:	8d 83       	std	Y+5, r24	; 0x05
     f24:	9e 83       	std	Y+6, r25	; 0x06
     f26:	01 cf       	rjmp	.-510    	; 0xd2a <.L101>

00000f28 <.L102>:
        if (dist->low_gain > kilo_irlow[0]) {
     f28:	d7 01       	movw	r26, r14
     f2a:	0d 91       	ld	r16, X+
     f2c:	1c 91       	ld	r17, X

00000f2e <.Loc.1154>:
     f2e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <kilo_irlow>
     f32:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <kilo_irlow+0x1>
     f36:	80 17       	cp	r24, r16
     f38:	91 07       	cpc	r25, r17
     f3a:	08 f0       	brcs	.+2      	; 0xf3e <.Loc.1155>

00000f3c <L0^A>:
     f3c:	7a cd       	rjmp	.-1292   	; 0xa32 <.L96>

00000f3e <.Loc.1155>:
            dist_low=0;
     f3e:	10 e0       	ldi	r17, 0x00	; 0
     f40:	e1 cd       	rjmp	.-1086   	; 0xb04 <.L103>

00000f42 <.L132>:
            for(i=1; i<14; i++) {
     f42:	79 e0       	ldi	r23, 0x09	; 9
     f44:	87 2e       	mov	r8, r23

00000f46 <.Loc.1157>:
                if(dist->low_gain > kilo_irlow[i]) {
     f46:	89 e0       	ldi	r24, 0x09	; 9
     f48:	90 e0       	ldi	r25, 0x00	; 0

00000f4a <.L104>:
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     f4a:	fc 01       	movw	r30, r24
     f4c:	ee 0f       	add	r30, r30
     f4e:	ff 1f       	adc	r31, r31
     f50:	e2 5f       	subi	r30, 0xF2	; 242
     f52:	fe 4f       	sbci	r31, 0xFE	; 254
     f54:	e0 80       	ld	r14, Z
     f56:	f1 80       	ldd	r15, Z+1	; 0x01

00000f58 <.LVL181>:
     f58:	fc 01       	movw	r30, r24
     f5a:	ee 0f       	add	r30, r30
     f5c:	ff 1f       	adc	r31, r31
     f5e:	e4 5f       	subi	r30, 0xF4	; 244
     f60:	fe 4f       	sbci	r31, 0xFE	; 254

00000f62 <.Loc.1162>:
     f62:	80 81       	ld	r24, Z
     f64:	91 81       	ldd	r25, Z+1	; 0x01
     f66:	f7 01       	movw	r30, r14
     f68:	e8 1b       	sub	r30, r24
     f6a:	f9 0b       	sbc	r31, r25

00000f6c <.Loc.1163>:
     f6c:	9f 01       	movw	r18, r30
     f6e:	40 e0       	ldi	r20, 0x00	; 0
     f70:	50 e0       	ldi	r21, 0x00	; 0
     f72:	29 83       	std	Y+1, r18	; 0x01
     f74:	3a 83       	std	Y+2, r19	; 0x02
     f76:	4b 83       	std	Y+3, r20	; 0x03
     f78:	5c 83       	std	Y+4, r21	; 0x04
     f7a:	ca 01       	movw	r24, r20
     f7c:	b9 01       	movw	r22, r18
     f7e:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__floatunsisf>

00000f82 <.LVL182>:
     f82:	9b 01       	movw	r18, r22
     f84:	ac 01       	movw	r20, r24
     f86:	69 83       	std	Y+1, r22	; 0x01
     f88:	7a 83       	std	Y+2, r23	; 0x02
     f8a:	8b 83       	std	Y+3, r24	; 0x03
     f8c:	9c 83       	std	Y+4, r25	; 0x04
     f8e:	69 81       	ldd	r22, Y+1	; 0x01
     f90:	7a 81       	ldd	r23, Y+2	; 0x02
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	9c 81       	ldd	r25, Y+4	; 0x04
     f96:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__addsf3>

00000f9a <.LVL183>:
     f9a:	96 2e       	mov	r9, r22
     f9c:	a7 2e       	mov	r10, r23
     f9e:	b8 2e       	mov	r11, r24
     fa0:	c9 2e       	mov	r12, r25

00000fa2 <.LVL184>:
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     fa2:	c8 01       	movw	r24, r16
     fa4:	11 0f       	add	r17, r17
     fa6:	aa 0b       	sbc	r26, r26
     fa8:	bb 0b       	sbc	r27, r27
     faa:	89 83       	std	Y+1, r24	; 0x01
     fac:	9a 83       	std	Y+2, r25	; 0x02
     fae:	ab 83       	std	Y+3, r26	; 0x03
     fb0:	bc 83       	std	Y+4, r27	; 0x04
     fb2:	bc 01       	movw	r22, r24
     fb4:	cd 01       	movw	r24, r26
     fb6:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__floatsisf>

00000fba <.LVL185>:
     fba:	3b 01       	movw	r6, r22
     fbc:	8c 01       	movw	r16, r24

00000fbe <.Loc.1168>:
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
     fbe:	97 01       	movw	r18, r14
     fc0:	40 e0       	ldi	r20, 0x00	; 0
     fc2:	50 e0       	ldi	r21, 0x00	; 0
     fc4:	29 83       	std	Y+1, r18	; 0x01
     fc6:	3a 83       	std	Y+2, r19	; 0x02
     fc8:	4b 83       	std	Y+3, r20	; 0x03
     fca:	5c 83       	std	Y+4, r21	; 0x04
     fcc:	ca 01       	movw	r24, r20
     fce:	b9 01       	movw	r22, r18
     fd0:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__floatunsisf>

00000fd4 <.LVL186>:
     fd4:	2b 01       	movw	r4, r22
     fd6:	7c 01       	movw	r14, r24

00000fd8 <.Loc.1169>:
     fd8:	88 2d       	mov	r24, r8
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	a0 e0       	ldi	r26, 0x00	; 0
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	89 83       	std	Y+1, r24	; 0x01
     fe2:	9a 83       	std	Y+2, r25	; 0x02
     fe4:	ab 83       	std	Y+3, r26	; 0x03
     fe6:	bc 83       	std	Y+4, r27	; 0x04
     fe8:	bc 01       	movw	r22, r24
     fea:	cd 01       	movw	r24, r26
     fec:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__floatunsisf>

00000ff0 <.LVL188>:
     ff0:	20 e0       	ldi	r18, 0x00	; 0
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	40 e0       	ldi	r20, 0x00	; 0
     ff6:	5f e3       	ldi	r21, 0x3F	; 63
     ff8:	69 83       	std	Y+1, r22	; 0x01
     ffa:	7a 83       	std	Y+2, r23	; 0x02
     ffc:	8b 83       	std	Y+3, r24	; 0x03
     ffe:	9c 83       	std	Y+4, r25	; 0x04
    1000:	69 81       	ldd	r22, Y+1	; 0x01
    1002:	7a 81       	ldd	r23, Y+2	; 0x02
    1004:	8b 81       	ldd	r24, Y+3	; 0x03
    1006:	9c 81       	ldd	r25, Y+4	; 0x04
    1008:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <__mulsf3>

0000100c <.LVL189>:
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	a9 01       	movw	r20, r18
    1012:	69 83       	std	Y+1, r22	; 0x01
    1014:	7a 83       	std	Y+2, r23	; 0x02
    1016:	8b 83       	std	Y+3, r24	; 0x03
    1018:	9c 83       	std	Y+4, r25	; 0x04
    101a:	69 81       	ldd	r22, Y+1	; 0x01
    101c:	7a 81       	ldd	r23, Y+2	; 0x02
    101e:	8b 81       	ldd	r24, Y+3	; 0x03
    1020:	9c 81       	ldd	r25, Y+4	; 0x04
    1022:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__addsf3>

00001026 <.LVL190>:
    1026:	29 2d       	mov	r18, r9
    1028:	3a 2d       	mov	r19, r10
    102a:	4b 2d       	mov	r20, r11
    102c:	5c 2d       	mov	r21, r12
    102e:	69 83       	std	Y+1, r22	; 0x01
    1030:	7a 83       	std	Y+2, r23	; 0x02
    1032:	8b 83       	std	Y+3, r24	; 0x03
    1034:	9c 83       	std	Y+4, r25	; 0x04
    1036:	69 81       	ldd	r22, Y+1	; 0x01
    1038:	7a 81       	ldd	r23, Y+2	; 0x02
    103a:	8b 81       	ldd	r24, Y+3	; 0x03
    103c:	9c 81       	ldd	r25, Y+4	; 0x04
    103e:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <__mulsf3>

00001042 <.LVL191>:
    1042:	9b 01       	movw	r18, r22
    1044:	ac 01       	movw	r20, r24
    1046:	49 82       	std	Y+1, r4	; 0x01
    1048:	5a 82       	std	Y+2, r5	; 0x02
    104a:	eb 82       	std	Y+3, r14	; 0x03
    104c:	fc 82       	std	Y+4, r15	; 0x04
    104e:	69 81       	ldd	r22, Y+1	; 0x01
    1050:	7a 81       	ldd	r23, Y+2	; 0x02
    1052:	8b 81       	ldd	r24, Y+3	; 0x03
    1054:	9c 81       	ldd	r25, Y+4	; 0x04
    1056:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <__subsf3>

0000105a <.LVL192>:
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
    105a:	9b 01       	movw	r18, r22
    105c:	ac 01       	movw	r20, r24
    105e:	69 82       	std	Y+1, r6	; 0x01
    1060:	7a 82       	std	Y+2, r7	; 0x02
    1062:	0b 83       	std	Y+3, r16	; 0x03
    1064:	1c 83       	std	Y+4, r17	; 0x04
    1066:	69 81       	ldd	r22, Y+1	; 0x01
    1068:	7a 81       	ldd	r23, Y+2	; 0x02
    106a:	8b 81       	ldd	r24, Y+3	; 0x03
    106c:	9c 81       	ldd	r25, Y+4	; 0x04
    106e:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <__subsf3>

00001072 <.LVL193>:
    1072:	20 e0       	ldi	r18, 0x00	; 0
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	40 e2       	ldi	r20, 0x20	; 32
    1078:	51 e4       	ldi	r21, 0x41	; 65
    107a:	69 83       	std	Y+1, r22	; 0x01
    107c:	7a 83       	std	Y+2, r23	; 0x02
    107e:	8b 83       	std	Y+3, r24	; 0x03
    1080:	9c 83       	std	Y+4, r25	; 0x04
    1082:	69 81       	ldd	r22, Y+1	; 0x01
    1084:	7a 81       	ldd	r23, Y+2	; 0x02
    1086:	8b 81       	ldd	r24, Y+3	; 0x03
    1088:	9c 81       	ldd	r25, Y+4	; 0x04

0000108a <.Loc.1178>:
    108a:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <__mulsf3>

0000108e <.LVL195>:
                b=((int)((int)b/(int)slope));
    108e:	69 83       	std	Y+1, r22	; 0x01

00001090 <.Loc.1180>:
    1090:	7a 83       	std	Y+2, r23	; 0x02
    1092:	8b 83       	std	Y+3, r24	; 0x03
    1094:	9c 83       	std	Y+4, r25	; 0x04
    1096:	69 81       	ldd	r22, Y+1	; 0x01
    1098:	7a 81       	ldd	r23, Y+2	; 0x02
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	9c 81       	ldd	r25, Y+4	; 0x04
    109e:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <__fixsfsi>

000010a2 <.LVL197>:
    10a2:	8b 01       	movw	r16, r22

000010a4 <.Loc.1181>:
    10a4:	99 82       	std	Y+1, r9	; 0x01
    10a6:	aa 82       	std	Y+2, r10	; 0x02
    10a8:	bb 82       	std	Y+3, r11	; 0x03
    10aa:	cc 82       	std	Y+4, r12	; 0x04
    10ac:	69 81       	ldd	r22, Y+1	; 0x01
    10ae:	7a 81       	ldd	r23, Y+2	; 0x02
    10b0:	8b 81       	ldd	r24, Y+3	; 0x03
    10b2:	9c 81       	ldd	r25, Y+4	; 0x04
    10b4:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <__fixsfsi>

000010b8 <.LVL198>:
    10b8:	69 83       	std	Y+1, r22	; 0x01
    10ba:	7a 83       	std	Y+2, r23	; 0x02
    10bc:	8b 83       	std	Y+3, r24	; 0x03
    10be:	9c 83       	std	Y+4, r25	; 0x04

000010c0 <.Loc.1182>:
    10c0:	c8 01       	movw	r24, r16
    10c2:	69 81       	ldd	r22, Y+1	; 0x01
    10c4:	7a 81       	ldd	r23, Y+2	; 0x02
    10c6:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <__divmodhi4>

000010ca <.Loc.1183>:
                dist_low=b;
    10ca:	16 2f       	mov	r17, r22

000010cc <.LBE263>:
        return 33 + dist_high;
    10cc:	81 e2       	ldi	r24, 0x21	; 33
    10ce:	8d 0d       	add	r24, r13

000010d0 <.Loc.1187>:
    if (dist_low != 255) {
    10d0:	6f 3f       	cpi	r22, 0xFF	; 255
    10d2:	09 f0       	breq	.+2      	; 0x10d6 <L0^A+0x2>

000010d4 <L0^A>:
    10d4:	17 cd       	rjmp	.-1490   	; 0xb04 <.L103>
    10d6:	c8 ce       	rjmp	.-624    	; 0xe68 <.L93>

000010d8 <.L113>:
            for (i=1; i<14; i++) {
    10d8:	84 e0       	ldi	r24, 0x04	; 4

000010da <.Loc.1189>:
                if (dist->high_gain > kilo_irhigh[i]) {
    10da:	24 e0       	ldi	r18, 0x04	; 4
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	f5 ce       	rjmp	.-534    	; 0xeca <.L100>

000010e0 <.L105>:
            return 33 + dist_low;
    10e0:	81 e2       	ldi	r24, 0x21	; 33
    10e2:	81 0f       	add	r24, r17
    10e4:	c1 ce       	rjmp	.-638    	; 0xe68 <.L93>

000010e6 <.L124>:
            for(i=1; i<14; i++) {
    10e6:	88 24       	eor	r8, r8
    10e8:	83 94       	inc	r8

000010ea <.Loc.1193>:
                if(dist->low_gain > kilo_irlow[i]) {
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	2d cf       	rjmp	.-422    	; 0xf4a <.L104>

000010f0 <.L125>:
            for(i=1; i<14; i++) {
    10f0:	22 e0       	ldi	r18, 0x02	; 2
    10f2:	82 2e       	mov	r8, r18

000010f4 <.Loc.1195>:
                if(dist->low_gain > kilo_irlow[i]) {
    10f4:	82 e0       	ldi	r24, 0x02	; 2
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	28 cf       	rjmp	.-432    	; 0xf4a <.L104>

000010fa <.L126>:
            for(i=1; i<14; i++) {
    10fa:	93 e0       	ldi	r25, 0x03	; 3
    10fc:	89 2e       	mov	r8, r25

000010fe <.Loc.1197>:
                if(dist->low_gain > kilo_irlow[i]) {
    10fe:	83 e0       	ldi	r24, 0x03	; 3
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	23 cf       	rjmp	.-442    	; 0xf4a <.L104>

00001104 <.L127>:
            for(i=1; i<14; i++) {
    1104:	84 e0       	ldi	r24, 0x04	; 4
    1106:	88 2e       	mov	r8, r24

00001108 <.Loc.1199>:
                if(dist->low_gain > kilo_irlow[i]) {
    1108:	84 e0       	ldi	r24, 0x04	; 4
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	1e cf       	rjmp	.-452    	; 0xf4a <.L104>

0000110e <.L128>:
            for(i=1; i<14; i++) {
    110e:	b5 e0       	ldi	r27, 0x05	; 5
    1110:	8b 2e       	mov	r8, r27

00001112 <.Loc.1201>:
                if(dist->low_gain > kilo_irlow[i]) {
    1112:	85 e0       	ldi	r24, 0x05	; 5
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	19 cf       	rjmp	.-462    	; 0xf4a <.L104>

00001118 <.L129>:
            for(i=1; i<14; i++) {
    1118:	a6 e0       	ldi	r26, 0x06	; 6
    111a:	8a 2e       	mov	r8, r26

0000111c <.Loc.1203>:
                if(dist->low_gain > kilo_irlow[i]) {
    111c:	86 e0       	ldi	r24, 0x06	; 6
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	14 cf       	rjmp	.-472    	; 0xf4a <.L104>

00001122 <.L111>:
            for (i=1; i<14; i++) {
    1122:	82 e0       	ldi	r24, 0x02	; 2

00001124 <.Loc.1205>:
                if (dist->high_gain > kilo_irhigh[i]) {
    1124:	22 e0       	ldi	r18, 0x02	; 2
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	d0 ce       	rjmp	.-608    	; 0xeca <.L100>

0000112a <.L130>:
            for(i=1; i<14; i++) {
    112a:	f7 e0       	ldi	r31, 0x07	; 7
    112c:	8f 2e       	mov	r8, r31

0000112e <.Loc.1208>:
                if(dist->low_gain > kilo_irlow[i]) {
    112e:	87 e0       	ldi	r24, 0x07	; 7
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	0b cf       	rjmp	.-490    	; 0xf4a <.L104>

00001134 <.L112>:
            for (i=1; i<14; i++) {
    1134:	83 e0       	ldi	r24, 0x03	; 3

00001136 <.Loc.1210>:
                if (dist->high_gain > kilo_irhigh[i]) {
    1136:	23 e0       	ldi	r18, 0x03	; 3
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	c7 ce       	rjmp	.-626    	; 0xeca <.L100>

0000113c <.L131>:
            for(i=1; i<14; i++) {
    113c:	e8 e0       	ldi	r30, 0x08	; 8
    113e:	8e 2e       	mov	r8, r30

00001140 <.Loc.1213>:
                if(dist->low_gain > kilo_irlow[i]) {
    1140:	88 e0       	ldi	r24, 0x08	; 8
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	02 cf       	rjmp	.-508    	; 0xf4a <.L104>

00001146 <.L114>:
            for (i=1; i<14; i++) {
    1146:	85 e0       	ldi	r24, 0x05	; 5

00001148 <.Loc.1215>:
                if (dist->high_gain > kilo_irhigh[i]) {
    1148:	25 e0       	ldi	r18, 0x05	; 5
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	be ce       	rjmp	.-644    	; 0xeca <.L100>

0000114e <.L133>:
            for(i=1; i<14; i++) {
    114e:	6a e0       	ldi	r22, 0x0A	; 10
    1150:	86 2e       	mov	r8, r22

00001152 <.Loc.1218>:
                if(dist->low_gain > kilo_irlow[i]) {
    1152:	8a e0       	ldi	r24, 0x0A	; 10
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	f9 ce       	rjmp	.-526    	; 0xf4a <.L104>

00001158 <.L115>:
            for (i=1; i<14; i++) {
    1158:	86 e0       	ldi	r24, 0x06	; 6

0000115a <.Loc.1220>:
                if (dist->high_gain > kilo_irhigh[i]) {
    115a:	26 e0       	ldi	r18, 0x06	; 6
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	b5 ce       	rjmp	.-662    	; 0xeca <.L100>

00001160 <.L134>:
            for(i=1; i<14; i++) {
    1160:	5b e0       	ldi	r21, 0x0B	; 11
    1162:	85 2e       	mov	r8, r21

00001164 <.Loc.1223>:
                if(dist->low_gain > kilo_irlow[i]) {
    1164:	8b e0       	ldi	r24, 0x0B	; 11
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	f0 ce       	rjmp	.-544    	; 0xf4a <.L104>

0000116a <.L135>:
            for(i=1; i<14; i++) {
    116a:	4c e0       	ldi	r20, 0x0C	; 12
    116c:	84 2e       	mov	r8, r20

0000116e <.Loc.1225>:
                if(dist->low_gain > kilo_irlow[i]) {
    116e:	8c e0       	ldi	r24, 0x0C	; 12
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	eb ce       	rjmp	.-554    	; 0xf4a <.L104>

00001174 <.L116>:
            for (i=1; i<14; i++) {
    1174:	87 e0       	ldi	r24, 0x07	; 7

00001176 <.Loc.1227>:
                if (dist->high_gain > kilo_irhigh[i]) {
    1176:	27 e0       	ldi	r18, 0x07	; 7
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	a7 ce       	rjmp	.-690    	; 0xeca <.L100>

0000117c <.L137>:
            for(i=1; i<14; i++) {
    117c:	3d e0       	ldi	r19, 0x0D	; 13
    117e:	83 2e       	mov	r8, r19

00001180 <.Loc.1230>:
                if(dist->low_gain > kilo_irlow[i]) {
    1180:	8d e0       	ldi	r24, 0x0D	; 13
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	e2 ce       	rjmp	.-572    	; 0xf4a <.L104>

00001186 <.L117>:
            for (i=1; i<14; i++) {
    1186:	88 e0       	ldi	r24, 0x08	; 8

00001188 <.Loc.1232>:
                if (dist->high_gain > kilo_irhigh[i]) {
    1188:	28 e0       	ldi	r18, 0x08	; 8
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	9e ce       	rjmp	.-708    	; 0xeca <.L100>

0000118e <.L118>:
            for (i=1; i<14; i++) {
    118e:	89 e0       	ldi	r24, 0x09	; 9

00001190 <.Loc.1234>:
                if (dist->high_gain > kilo_irhigh[i]) {
    1190:	29 e0       	ldi	r18, 0x09	; 9
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	9a ce       	rjmp	.-716    	; 0xeca <.L100>

00001196 <.L119>:
            for (i=1; i<14; i++) {
    1196:	8a e0       	ldi	r24, 0x0A	; 10

00001198 <.Loc.1236>:
                if (dist->high_gain > kilo_irhigh[i]) {
    1198:	2a e0       	ldi	r18, 0x0A	; 10
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	96 ce       	rjmp	.-724    	; 0xeca <.L100>

0000119e <.L120>:
            for (i=1; i<14; i++) {
    119e:	8b e0       	ldi	r24, 0x0B	; 11

000011a0 <.Loc.1238>:
                if (dist->high_gain > kilo_irhigh[i]) {
    11a0:	2b e0       	ldi	r18, 0x0B	; 11
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	92 ce       	rjmp	.-732    	; 0xeca <.L100>

000011a6 <.L121>:
            for (i=1; i<14; i++) {
    11a6:	8c e0       	ldi	r24, 0x0C	; 12

000011a8 <.Loc.1240>:
                if (dist->high_gain > kilo_irhigh[i]) {
    11a8:	2c e0       	ldi	r18, 0x0C	; 12
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	8e ce       	rjmp	.-740    	; 0xeca <.L100>

000011ae <__vector_14>:
ISR(TIMER0_COMPA_vect) {
    11ae:	1f 92       	push	r1

000011b0 <.LCFI32>:
    11b0:	0f 92       	push	r0

000011b2 <.LCFI33>:
    11b2:	0f b6       	in	r0, 0x3f	; 63
    11b4:	0f 92       	push	r0
    11b6:	11 24       	eor	r1, r1
    11b8:	2f 93       	push	r18

000011ba <.LCFI34>:
    11ba:	3f 93       	push	r19

000011bc <.LCFI35>:
    11bc:	4f 93       	push	r20

000011be <.LCFI36>:
    11be:	5f 93       	push	r21

000011c0 <.LCFI37>:
    11c0:	6f 93       	push	r22

000011c2 <.LCFI38>:
    11c2:	7f 93       	push	r23

000011c4 <.LCFI39>:
    11c4:	8f 93       	push	r24

000011c6 <.LCFI40>:
    11c6:	9f 93       	push	r25

000011c8 <.LCFI41>:
    11c8:	af 93       	push	r26

000011ca <.LCFI42>:
    11ca:	bf 93       	push	r27

000011cc <.LCFI43>:
    11cc:	ef 93       	push	r30

000011ce <.LCFI44>:
    11ce:	ff 93       	push	r31

000011d0 <.LCFI45>:
    tx_clock += tx_increment;
    11d0:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <tx_clock>
    11d4:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <tx_clock+0x1>
    11d8:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <tx_increment>
    11dc:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <tx_increment+0x1>
    11e0:	82 0f       	add	r24, r18
    11e2:	93 1f       	adc	r25, r19
    11e4:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <tx_clock+0x1>
    11e8:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <tx_clock>

000011ec <.Loc.1244>:
    tx_increment = 0xFF;
    11ec:	8f ef       	ldi	r24, 0xFF	; 255
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <tx_increment+0x1>
    11f4:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <tx_increment>

000011f8 <.Loc.1246>:
    OCR0A = tx_increment;
    11f8:	8f ef       	ldi	r24, 0xFF	; 255
    11fa:	87 bd       	out	0x27, r24	; 39

000011fc <.Loc.1248>:
    kilo_ticks++;
    11fc:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <kilo_ticks>
    1200:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <kilo_ticks+0x1>
    1204:	a0 91 4e 01 	lds	r26, 0x014E	; 0x80014e <kilo_ticks+0x2>
    1208:	b0 91 4f 01 	lds	r27, 0x014F	; 0x80014f <kilo_ticks+0x3>
    120c:	01 96       	adiw	r24, 0x01	; 1
    120e:	a1 1d       	adc	r26, r1
    1210:	b1 1d       	adc	r27, r1
    1212:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <kilo_ticks>
    1216:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <kilo_ticks+0x1>
    121a:	a0 93 4e 01 	sts	0x014E, r26	; 0x80014e <kilo_ticks+0x2>
    121e:	b0 93 4f 01 	sts	0x014F, r27	; 0x80014f <kilo_ticks+0x3>

00001222 <.Loc.1250>:
    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
    1222:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <rx_busy>

00001226 <.Loc.1252>:
    1226:	81 11       	cpse	r24, r1
    1228:	0f c0       	rjmp	.+30     	; 0x1248 <.L140>

0000122a <.Loc.1253>:
    122a:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <kilo_tx_period>
    122e:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <kilo_tx_period+0x1>

00001232 <.Loc.1254>:
    1232:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <tx_clock>
    1236:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <tx_clock+0x1>
    123a:	82 17       	cp	r24, r18
    123c:	93 07       	cpc	r25, r19
    123e:	20 f4       	brcc	.+8      	; 0x1248 <.L140>

00001240 <.Loc.1255>:
    1240:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <kilo_state>

00001244 <.Loc.1256>:
    1244:	84 30       	cpi	r24, 0x04	; 4
    1246:	89 f0       	breq	.+34     	; 0x126a <.L148>

00001248 <.L140>:
}
    1248:	ff 91       	pop	r31
    124a:	ef 91       	pop	r30
    124c:	bf 91       	pop	r27
    124e:	af 91       	pop	r26
    1250:	9f 91       	pop	r25
    1252:	8f 91       	pop	r24
    1254:	7f 91       	pop	r23
    1256:	6f 91       	pop	r22
    1258:	5f 91       	pop	r21
    125a:	4f 91       	pop	r20
    125c:	3f 91       	pop	r19
    125e:	2f 91       	pop	r18
    1260:	0f 90       	pop	r0
    1262:	0f be       	out	0x3f, r0	; 63
    1264:	0f 90       	pop	r0
    1266:	1f 90       	pop	r1
    1268:	18 95       	reti

0000126a <.L148>:
        message_t *msg = kilo_message_tx();
    126a:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <kilo_message_tx>
    126e:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <kilo_message_tx+0x1>
    1272:	09 95       	icall

00001274 <.LVL224>:
        if (msg) {
    1274:	00 97       	sbiw	r24, 0x00	; 0
    1276:	41 f3       	breq	.-48     	; 0x1248 <.L140>

00001278 <.Loc.1262>:
            if (message_send(msg)) {
    1278:	0e 94 4a 0c 	call	0x1894	; 0x1894 <message_send>

0000127c <.LVL225>:
    127c:	88 23       	and	r24, r24
    127e:	51 f0       	breq	.+20     	; 0x1294 <.L144>

00001280 <.Loc.1265>:
                kilo_message_tx_success();
    1280:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <kilo_message_tx_success>
    1284:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <kilo_message_tx_success+0x1>
    1288:	09 95       	icall

0000128a <.Loc.1266>:
                tx_clock = 0;
    128a:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <tx_clock+0x1>
    128e:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <tx_clock>
    1292:	da cf       	rjmp	.-76     	; 0x1248 <.L140>

00001294 <.L144>:
                tx_increment = rand()&0xFF;
    1294:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <rand>

00001298 <.LVL227>:
    1298:	9c 01       	movw	r18, r24

0000129a <.Loc.1270>:
    129a:	99 27       	eor	r25, r25

0000129c <.Loc.1271>:
    129c:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <tx_increment+0x1>
    12a0:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <tx_increment>

000012a4 <.Loc.1272>:
                OCR0A = tx_increment;
    12a4:	27 bd       	out	0x27, r18	; 39

000012a6 <.LBE271>:
}
    12a6:	d0 cf       	rjmp	.-96     	; 0x1248 <.L140>

000012a8 <set_color>:
    if (rgb&(1<<0))
    12a8:	80 ff       	sbrs	r24, 0
    12aa:	11 c0       	rjmp	.+34     	; 0x12ce <.L150>

000012ac <.Loc.1278>:
        DDRD |= (1<<5);
    12ac:	55 9a       	sbi	0x0a, 5	; 10

000012ae <.Loc.1280>:
    if (rgb&(1<<1))
    12ae:	81 ff       	sbrs	r24, 1
    12b0:	11 c0       	rjmp	.+34     	; 0x12d4 <.L152>

000012b2 <.L162>:
        DDRD |= (1<<4);
    12b2:	54 9a       	sbi	0x0a, 4	; 10

000012b4 <.Loc.1284>:
    if (rgb&(1<<2))
    12b4:	82 ff       	sbrs	r24, 2
    12b6:	11 c0       	rjmp	.+34     	; 0x12da <.L154>

000012b8 <.L163>:
        DDRC |= (1<<3);
    12b8:	3b 9a       	sbi	0x07, 3	; 7

000012ba <.Loc.1288>:
    if (rgb&(1<<3))
    12ba:	83 ff       	sbrs	r24, 3
    12bc:	11 c0       	rjmp	.+34     	; 0x12e0 <.L156>

000012be <.L164>:
        DDRC |= (1<<2);
    12be:	3a 9a       	sbi	0x07, 2	; 7

000012c0 <.Loc.1292>:
    if (rgb&(1<<4))
    12c0:	84 ff       	sbrs	r24, 4
    12c2:	11 c0       	rjmp	.+34     	; 0x12e6 <.L158>

000012c4 <.L165>:
        DDRC |= (1<<5);
    12c4:	3d 9a       	sbi	0x07, 5	; 7

000012c6 <.Loc.1296>:
    if (rgb&(1<<5))
    12c6:	85 ff       	sbrs	r24, 5
    12c8:	11 c0       	rjmp	.+34     	; 0x12ec <.L160>

000012ca <.L166>:
        DDRC |= (1<<4);
    12ca:	3c 9a       	sbi	0x07, 4	; 7
    12cc:	08 95       	ret

000012ce <.L150>:
        DDRD &= ~(1<<5);
    12ce:	55 98       	cbi	0x0a, 5	; 10

000012d0 <.Loc.1302>:
    if (rgb&(1<<1))
    12d0:	81 fd       	sbrc	r24, 1
    12d2:	ef cf       	rjmp	.-34     	; 0x12b2 <.L162>

000012d4 <.L152>:
        DDRD &= ~(1<<4);
    12d4:	54 98       	cbi	0x0a, 4	; 10

000012d6 <.Loc.1306>:
    if (rgb&(1<<2))
    12d6:	82 fd       	sbrc	r24, 2
    12d8:	ef cf       	rjmp	.-34     	; 0x12b8 <.L163>

000012da <.L154>:
        DDRC &= ~(1<<3);
    12da:	3b 98       	cbi	0x07, 3	; 7

000012dc <.Loc.1310>:
    if (rgb&(1<<3))
    12dc:	83 fd       	sbrc	r24, 3
    12de:	ef cf       	rjmp	.-34     	; 0x12be <.L164>

000012e0 <.L156>:
        DDRC &= ~(1<<2);
    12e0:	3a 98       	cbi	0x07, 2	; 7

000012e2 <.Loc.1314>:
    if (rgb&(1<<4))
    12e2:	84 fd       	sbrc	r24, 4
    12e4:	ef cf       	rjmp	.-34     	; 0x12c4 <.L165>

000012e6 <.L158>:
        DDRC &= ~(1<<5);
    12e6:	3d 98       	cbi	0x07, 5	; 7

000012e8 <.Loc.1318>:
    if (rgb&(1<<5))
    12e8:	85 fd       	sbrc	r24, 5
    12ea:	ef cf       	rjmp	.-34     	; 0x12ca <.L166>

000012ec <.L160>:
        DDRC &= ~(1<<4);
    12ec:	3c 98       	cbi	0x07, 4	; 7

000012ee <.Loc.1322>:
}
    12ee:	08 95       	ret

000012f0 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
    12f0:	1f 92       	push	r1
    12f2:	1f b6       	in	r1, 0x3f	; 63
    12f4:	1f 92       	push	r1
    12f6:	11 24       	eor	r1, r1
    12f8:	8f 93       	push	r24
    12fa:	9f 93       	push	r25

000012fc <.LCFI46>:
    rx_timer_off();
    12fc:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>

00001300 <.Loc.1325>:
    1300:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    1304:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>

00001308 <.Loc.1326>:
    rx_leadingbit = 1;
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <rx_leadingbit>

0000130e <.Loc.1329>:
    rx_leadingbyte = 1;
    130e:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <rx_leadingbyte>

00001312 <.Loc.1331>:
    rx_busy = 0;
    1312:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <rx_busy>

00001316 <.Loc.1333>:
    adc_trigger_high_gain();
    1316:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>

0000131a <.Loc.1334>:
    131a:	93 ea       	ldi	r25, 0xA3	; 163
    131c:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>

00001320 <.Loc.1335>:
    1320:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>

00001324 <.Loc.1336>:
}
    1324:	9f 91       	pop	r25
    1326:	8f 91       	pop	r24
    1328:	1f 90       	pop	r1
    132a:	1f be       	out	0x3f, r1	; 63
    132c:	1f 90       	pop	r1
    132e:	18 95       	reti

00001330 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
    1330:	1f 92       	push	r1

00001332 <.LCFI47>:
    1332:	0f 92       	push	r0

00001334 <.LCFI48>:
    1334:	0f b6       	in	r0, 0x3f	; 63
    1336:	0f 92       	push	r0
    1338:	11 24       	eor	r1, r1
    133a:	cf 92       	push	r12

0000133c <.LCFI49>:
    133c:	df 92       	push	r13

0000133e <.LCFI50>:
    133e:	ef 92       	push	r14

00001340 <.LCFI51>:
    1340:	ff 92       	push	r15

00001342 <.LCFI52>:
    1342:	2f 93       	push	r18

00001344 <.LCFI53>:
    1344:	3f 93       	push	r19

00001346 <.LCFI54>:
    1346:	4f 93       	push	r20

00001348 <.LCFI55>:
    1348:	5f 93       	push	r21

0000134a <.LCFI56>:
    134a:	6f 93       	push	r22

0000134c <.LCFI57>:
    134c:	7f 93       	push	r23

0000134e <.LCFI58>:
    134e:	8f 93       	push	r24

00001350 <.LCFI59>:
    1350:	9f 93       	push	r25

00001352 <.LCFI60>:
    1352:	af 93       	push	r26

00001354 <.LCFI61>:
    1354:	bf 93       	push	r27

00001356 <.LCFI62>:
    1356:	ef 93       	push	r30

00001358 <.LCFI63>:
    1358:	ff 93       	push	r31

0000135a <.LCFI64>:
    uint16_t timer = TCNT1;
    135a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    135e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>

00001362 <.LVL229>:

    rx_busy = 1;
    1362:	41 e0       	ldi	r20, 0x01	; 1
    1364:	40 93 5b 01 	sts	0x015B, r20	; 0x80015b <rx_busy>

00001368 <.Loc.1343>:
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
    1368:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <rx_leadingbit>
    136c:	88 23       	and	r24, r24
    136e:	b9 f1       	breq	.+110    	; 0x13de <.L169>

00001370 <.Loc.1345>:
        rx_timer_on();
    1370:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    1374:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>

00001378 <.Loc.1346>:
    1378:	40 93 81 00 	sts	0x0081, r20	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>

0000137c <.Loc.1347>:
        rx_bytevalue = 0;
    137c:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <rx_bytevalue>

00001380 <.Loc.1350>:
        rx_leadingbit = 0;
    1380:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <rx_leadingbit>

00001384 <.Loc.1352>:
        if (rx_leadingbyte) {
    1384:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <rx_leadingbyte>
    1388:	88 23       	and	r24, r24
    138a:	a1 f0       	breq	.+40     	; 0x13b4 <.L168>

0000138c <.L170>:
            adc_finish_conversion();
    138c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1390:	86 fd       	sbrc	r24, 6
    1392:	fc cf       	rjmp	.-8      	; 0x138c <.L170>

00001394 <.Loc.1355>:
            rx_dist.high_gain = ADCW;
    1394:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    1398:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>

0000139c <.Loc.1357>:
    139c:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <rx_dist+0x3>
    13a0:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <rx_dist+0x2>

000013a4 <.Loc.1358>:
            adc_trigger_low_gain();
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>

000013aa <.Loc.1359>:
    13aa:	93 ea       	ldi	r25, 0xA3	; 163
    13ac:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>

000013b0 <.Loc.1360>:
    13b0:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>

000013b4 <.L168>:
                    }
                }
            }
        }
    }
}
    13b4:	ff 91       	pop	r31
    13b6:	ef 91       	pop	r30
    13b8:	bf 91       	pop	r27
    13ba:	af 91       	pop	r26
    13bc:	9f 91       	pop	r25
    13be:	8f 91       	pop	r24
    13c0:	7f 91       	pop	r23
    13c2:	6f 91       	pop	r22
    13c4:	5f 91       	pop	r21
    13c6:	4f 91       	pop	r20
    13c8:	3f 91       	pop	r19
    13ca:	2f 91       	pop	r18
    13cc:	ff 90       	pop	r15
    13ce:	ef 90       	pop	r14
    13d0:	df 90       	pop	r13
    13d2:	cf 90       	pop	r12
    13d4:	0f 90       	pop	r0
    13d6:	0f be       	out	0x3f, r0	; 63
    13d8:	0f 90       	pop	r0
    13da:	1f 90       	pop	r1
    13dc:	18 95       	reti

000013de <.L169>:
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
    13de:	c9 01       	movw	r24, r18
    13e0:	87 58       	subi	r24, 0x87	; 135
    13e2:	91 09       	sbc	r25, r1

000013e4 <.Loc.1364>:
    13e4:	84 37       	cpi	r24, 0x74	; 116
    13e6:	99 40       	sbci	r25, 0x09	; 9
    13e8:	a0 f0       	brcs	.+40     	; 0x1412 <.L172>

000013ea <.Loc.1365>:
            rx_timer_off();
    13ea:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>

000013ee <.Loc.1366>:
    13ee:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    13f2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>

000013f6 <.Loc.1367>:
            rx_leadingbit = 1;
    13f6:	40 93 5a 01 	sts	0x015A, r20	; 0x80015a <rx_leadingbit>

000013fa <.Loc.1370>:
            rx_leadingbyte = 1;
    13fa:	40 93 59 01 	sts	0x0159, r20	; 0x800159 <rx_leadingbyte>

000013fe <.Loc.1372>:
            rx_busy = 0;
    13fe:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <rx_busy>

00001402 <.Loc.1374>:
            adc_trigger_high_gain();
    1402:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>

00001406 <.Loc.1375>:
    1406:	83 ea       	ldi	r24, 0xA3	; 163
    1408:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>

0000140c <.Loc.1376>:
    140c:	40 93 7b 00 	sts	0x007B, r20	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>

00001410 <.Loc.1377>:
    1410:	d1 cf       	rjmp	.-94     	; 0x13b4 <.L168>

00001412 <.L172>:
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
    1412:	26 58       	subi	r18, 0x86	; 134
    1414:	31 09       	sbc	r19, r1

00001416 <.LVL233>:
    1416:	a4 ef       	ldi	r26, 0xF4	; 244
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <__umulhisi3>

0000141e <.LVL234>:
            if (bitindex <= 7) { // Data bit received.
    141e:	88 30       	cpi	r24, 0x08	; 8
    1420:	08 f4       	brcc	.+2      	; 0x1424 <.Loc.1384>

00001422 <L0^A>:
    1422:	65 c0       	rjmp	.+202    	; 0x14ee <.L216>

00001424 <.Loc.1384>:
                rx_leadingbit = 1;
    1424:	40 93 5a 01 	sts	0x015A, r20	; 0x80015a <rx_leadingbit>

00001428 <.Loc.1386>:
                if (rx_leadingbyte) {
    1428:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <rx_leadingbyte>
    142c:	81 11       	cpse	r24, r1
    142e:	3c c0       	rjmp	.+120    	; 0x14a8 <.L175>

00001430 <.Loc.1388>:
                    rawmsg[rx_byteindex] = rx_bytevalue;
    1430:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <rx_byteindex>
    1434:	e8 2f       	mov	r30, r24
    1436:	f0 e0       	ldi	r31, 0x00	; 0

00001438 <.Loc.1390>:
    1438:	e0 5a       	subi	r30, 0xA0	; 160
    143a:	fe 4f       	sbci	r31, 0xFE	; 254
    143c:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <rx_bytevalue>
    1440:	90 83       	st	Z, r25

00001442 <.Loc.1391>:
                    rx_byteindex++;
    1442:	8f 5f       	subi	r24, 0xFF	; 255
    1444:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <rx_byteindex>

00001448 <.Loc.1393>:
                    if (rx_byteindex == sizeof(message_t)) {
    1448:	8c 30       	cpi	r24, 0x0C	; 12
    144a:	09 f0       	breq	.+2      	; 0x144e <.Loc.1395>

0000144c <L0^A>:
    144c:	b3 cf       	rjmp	.-154    	; 0x13b4 <.L168>

0000144e <.Loc.1395>:
                        rx_timer_off();
    144e:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>

00001452 <.Loc.1396>:
    1452:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    1456:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>

0000145a <.Loc.1397>:
                        rx_leadingbyte = 1;
    145a:	40 93 59 01 	sts	0x0159, r20	; 0x800159 <rx_leadingbyte>

0000145e <.Loc.1400>:
                        rx_busy = 0;
    145e:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <rx_busy>

00001462 <.Loc.1402>:
                        if (rx_msg.crc == message_crc(&rx_msg))
    1462:	e0 90 6a 01 	lds	r14, 0x016A	; 0x80016a <rx_msg+0xa>
    1466:	f0 90 6b 01 	lds	r15, 0x016B	; 0x80016b <rx_msg+0xb>

0000146a <.Loc.1404>:
    146a:	80 e6       	ldi	r24, 0x60	; 96
    146c:	91 e0       	ldi	r25, 0x01	; 1
    146e:	0e 94 92 0b 	call	0x1724	; 0x1724 <message_crc>

00001472 <.LVL235>:
    1472:	e8 16       	cp	r14, r24
    1474:	f9 06       	cpc	r15, r25
    1476:	09 f0       	breq	.+2      	; 0x147a <.LBB278>

00001478 <L0^A>:
    1478:	9d cf       	rjmp	.-198    	; 0x13b4 <.L168>

0000147a <.LBB278>:
    if (rx_msg.type < BOOT) {
    147a:	e0 91 69 01 	lds	r30, 0x0169	; 0x800169 <rx_msg+0x9>

0000147e <.Loc.1412>:
    147e:	e7 ff       	sbrs	r30, 7
    1480:	47 c0       	rjmp	.+142    	; 0x1510 <.L217>

00001482 <.Loc.1413>:
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    1482:	98 e7       	ldi	r25, 0x78	; 120
    1484:	9e 0f       	add	r25, r30

00001486 <.Loc.1415>:
    1486:	93 30       	cpi	r25, 0x03	; 3
    1488:	30 f0       	brcs	.+12     	; 0x1496 <.L179>

0000148a <.Loc.1416>:
        motors_off();
    148a:	53 98       	cbi	0x0a, 3	; 10

0000148c <.Loc.1417>:
    148c:	23 98       	cbi	0x04, 3	; 4

0000148e <.Loc.1418>:
    148e:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>

00001492 <.Loc.1419>:
    1492:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>

00001496 <.L179>:
    switch (rx_msg.type) {
    1496:	e0 58       	subi	r30, 0x80	; 128
    1498:	eb 30       	cpi	r30, 0x0B	; 11
    149a:	08 f0       	brcs	.+2      	; 0x149e <.LLST32>

0000149c <L0^A>:
    149c:	8b cf       	rjmp	.-234    	; 0x13b4 <.L168>
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	e5 5f       	subi	r30, 0xF5	; 245
    14a2:	ff 4e       	sbci	r31, 0xEF	; 239
    14a4:	0c 94 ec 0c 	jmp	0x19d8	; 0x19d8 <__tablejump2__>

000014a8 <.L175>:
                    adc_finish_conversion();
    14a8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    14ac:	86 fd       	sbrc	r24, 6
    14ae:	fc cf       	rjmp	.-8      	; 0x14a8 <.L175>

000014b0 <.Loc.1424>:
                    rx_dist.low_gain = ADCW;
    14b0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    14b4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>

000014b8 <.Loc.1426>:
    14b8:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <rx_dist+0x1>
    14bc:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <rx_dist>

000014c0 <.Loc.1427>:
                    adc_trigger_high_gain();
    14c0:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>

000014c4 <.Loc.1428>:
    14c4:	83 ea       	ldi	r24, 0xA3	; 163
    14c6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>

000014ca <.Loc.1429>:
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>

000014d0 <.Loc.1430>:
                    if (rx_bytevalue != 0) { // Collision detected.
    14d0:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <rx_bytevalue>
    14d4:	99 23       	and	r25, r25
    14d6:	b9 f0       	breq	.+46     	; 0x1506 <.L176>

000014d8 <.Loc.1433>:
                        rx_timer_off();
    14d8:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>

000014dc <.Loc.1434>:
    14dc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    14e0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>

000014e4 <.Loc.1435>:
                        rx_leadingbyte = 1;
    14e4:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <rx_leadingbyte>

000014e8 <.Loc.1438>:
                        rx_busy = 0;
    14e8:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <rx_busy>
    14ec:	63 cf       	rjmp	.-314    	; 0x13b4 <.L168>

000014ee <.L216>:
                rx_bytevalue |= (1<<bitindex);
    14ee:	21 e0       	ldi	r18, 0x01	; 1
    14f0:	30 e0       	ldi	r19, 0x00	; 0

000014f2 <.LVL238>:
    14f2:	01 c0       	rjmp	.+2      	; 0x14f6 <.L2^B2>

000014f4 <.L1^B28>:
    14f4:	22 0f       	add	r18, r18

000014f6 <.L2^B2>:
    14f6:	8a 95       	dec	r24
    14f8:	ea f7       	brpl	.-6      	; 0x14f4 <.L1^B28>

000014fa <.Loc.1443>:
    14fa:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <rx_bytevalue>
    14fe:	82 2b       	or	r24, r18
    1500:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <rx_bytevalue>
    1504:	57 cf       	rjmp	.-338    	; 0x13b4 <.L168>

00001506 <.L176>:
                        rx_leadingbyte = 0;
    1506:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <rx_leadingbyte>

0000150a <.Loc.1446>:
                        rx_byteindex = 0;
    150a:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <rx_byteindex>
    150e:	52 cf       	rjmp	.-348    	; 0x13b4 <.L168>

00001510 <.L217>:
        kilo_message_rx(&rx_msg, &rx_dist);
    1510:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <kilo_message_rx>
    1514:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <kilo_message_rx+0x1>
    1518:	6c e5       	ldi	r22, 0x5C	; 92
    151a:	71 e0       	ldi	r23, 0x01	; 1
    151c:	80 e6       	ldi	r24, 0x60	; 96
    151e:	91 e0       	ldi	r25, 0x01	; 1
    1520:	09 95       	icall

00001522 <.LVL241>:
        return;
    1522:	48 cf       	rjmp	.-368    	; 0x13b4 <.L168>

00001524 <.L180>:
            switch(calibmsg->mode) {
    1524:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <rx_msg>
    1528:	82 30       	cpi	r24, 0x02	; 2
    152a:	09 f4       	brne	.+2      	; 0x152e <L0^A+0x2>

0000152c <L0^A>:
    152c:	85 c0       	rjmp	.+266    	; 0x1638 <.L190>
    152e:	08 f0       	brcs	.+2      	; 0x1532 <.LVUS38>

00001530 <L0^A>:
    1530:	6c c0       	rjmp	.+216    	; 0x160a <.L191>
    1532:	88 23       	and	r24, r24
    1534:	09 f4       	brne	.+2      	; 0x1538 <.Loc.1452>

00001536 <L0^A>:
    1536:	be c0       	rjmp	.+380    	; 0x16b4 <.L218>

00001538 <.Loc.1452>:
                    kilo_uid = calibmsg->uid;
    1538:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <rx_msg+0x1>
    153c:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <rx_msg+0x2>
    1540:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <kilo_uid+0x1>
    1544:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <kilo_uid>

00001548 <.Loc.1454>:
                    cur_motion = MOVE_STOP;
    1548:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <cur_motion>

0000154c <.L196>:
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    154c:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <kilo_state>

00001550 <.Loc.1459>:
    1550:	86 30       	cpi	r24, 0x06	; 6
    1552:	09 f4       	brne	.+2      	; 0x1556 <.Loc.1460>

00001554 <L0^A>:
    1554:	2f cf       	rjmp	.-418    	; 0x13b4 <.L168>

00001556 <.Loc.1460>:
                motors_on();
    1556:	53 9a       	sbi	0x0a, 3	; 10

00001558 <.Loc.1461>:
    1558:	23 9a       	sbi	0x04, 3	; 4

0000155a <.Loc.1462>:
    155a:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>

0000155e <.Loc.1463>:
    155e:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>

00001562 <.Loc.1464>:
                kilo_state = MOVING;
    1562:	86 e0       	ldi	r24, 0x06	; 6
    1564:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <kilo_state>
    1568:	25 cf       	rjmp	.-438    	; 0x13b4 <.L168>

0000156a <.L182>:
            if (kilo_state != MOVING) {
    156a:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <kilo_state>

0000156e <.Loc.1469>:
    156e:	86 30       	cpi	r24, 0x06	; 6
    1570:	99 f0       	breq	.+38     	; 0x1598 <.L200>

00001572 <.Loc.1470>:
                motors_on();
    1572:	53 9a       	sbi	0x0a, 3	; 10

00001574 <.Loc.1471>:
    1574:	23 9a       	sbi	0x04, 3	; 4

00001576 <.Loc.1472>:
    1576:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>

0000157a <.Loc.1473>:
    157a:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>

0000157e <.LBB280>:
        DDRD &= ~(1<<5);
    157e:	55 98       	cbi	0x0a, 5	; 10

00001580 <.Loc.1480>:
        DDRD &= ~(1<<4);
    1580:	54 98       	cbi	0x0a, 4	; 10

00001582 <.Loc.1483>:
        DDRC &= ~(1<<3);
    1582:	3b 98       	cbi	0x07, 3	; 7

00001584 <.Loc.1486>:
        DDRC &= ~(1<<2);
    1584:	3a 98       	cbi	0x07, 2	; 7

00001586 <.Loc.1489>:
        DDRC &= ~(1<<5);
    1586:	3d 98       	cbi	0x07, 5	; 7

00001588 <.Loc.1492>:
        DDRC &= ~(1<<4);
    1588:	3c 98       	cbi	0x07, 4	; 7

0000158a <.LBE280>:
                prev_motion = cur_motion = MOVE_STOP;
    158a:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <cur_motion>

0000158e <.Loc.1498>:
    158e:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <prev_motion>

00001592 <.Loc.1499>:
                kilo_state = MOVING;
    1592:	86 e0       	ldi	r24, 0x06	; 6
    1594:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <kilo_state>

00001598 <.L200>:
            if (kilo_uid&(1<<rx_msg.data[0]))
    1598:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <rx_msg>

0000159c <.Loc.1503>:
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	02 c0       	rjmp	.+4      	; 0x15a6 <.L2^B3>

000015a2 <.L1^B29>:
    15a2:	88 0f       	add	r24, r24
    15a4:	99 1f       	adc	r25, r25

000015a6 <.L2^B3>:
    15a6:	2a 95       	dec	r18
    15a8:	e2 f7       	brpl	.-8      	; 0x15a2 <.L1^B29>

000015aa <.Loc.1504>:
    15aa:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <kilo_uid>
    15ae:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <kilo_uid+0x1>
    15b2:	82 23       	and	r24, r18
    15b4:	93 23       	and	r25, r19

000015b6 <.Loc.1505>:
    15b6:	89 2b       	or	r24, r25
    15b8:	09 f4       	brne	.+2      	; 0x15bc <.Loc.1506>

000015ba <L0^A>:
    15ba:	79 c0       	rjmp	.+242    	; 0x16ae <.L201>

000015bc <.Loc.1506>:
                cur_motion = MOVE_LEFT;
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <cur_motion>
    15c2:	f8 ce       	rjmp	.-528    	; 0x13b4 <.L168>

000015c4 <.L184>:
            kilo_state = BATTERY;
    15c4:	82 e0       	ldi	r24, 0x02	; 2
    15c6:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <kilo_state>

000015ca <.Loc.1510>:
            break;
    15ca:	f4 ce       	rjmp	.-536    	; 0x13b4 <.L168>

000015cc <.L185>:
            kilo_state = CHARGING;
    15cc:	85 e0       	ldi	r24, 0x05	; 5
    15ce:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <kilo_state>

000015d2 <.Loc.1513>:
            break;
    15d2:	f0 ce       	rjmp	.-544    	; 0x13b4 <.L168>

000015d4 <.L186>:
            kilo_state = IDLE;
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <kilo_state>

000015da <.Loc.1516>:
            break;
    15da:	ec ce       	rjmp	.-552    	; 0x13b4 <.L168>

000015dc <.L187>:
            kilo_state = SLEEPING;
    15dc:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <kilo_state>

000015e0 <.Loc.1520>:
            break;
    15e0:	e9 ce       	rjmp	.-558    	; 0x13b4 <.L168>

000015e2 <.L183>:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    15e2:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <kilo_state>

000015e6 <.Loc.1523>:
    15e6:	83 30       	cpi	r24, 0x03	; 3
    15e8:	09 f4       	brne	.+2      	; 0x15ec <.Loc.1524>

000015ea <L0^A>:
    15ea:	e4 ce       	rjmp	.-568    	; 0x13b4 <.L168>

000015ec <.Loc.1524>:
    15ec:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <kilo_state>

000015f0 <.Loc.1525>:
    15f0:	84 30       	cpi	r24, 0x04	; 4
    15f2:	09 f4       	brne	.+2      	; 0x15f6 <.Loc.1526>

000015f4 <L0^A>:
    15f4:	df ce       	rjmp	.-578    	; 0x13b4 <.L168>

000015f6 <.Loc.1526>:
                motors_on();
    15f6:	53 9a       	sbi	0x0a, 3	; 10

000015f8 <.Loc.1527>:
    15f8:	23 9a       	sbi	0x04, 3	; 4

000015fa <.Loc.1528>:
    15fa:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>

000015fe <.Loc.1529>:
    15fe:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>

00001602 <.Loc.1530>:
                kilo_state = SETUP;
    1602:	83 e0       	ldi	r24, 0x03	; 3
    1604:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <kilo_state>
    1608:	d5 ce       	rjmp	.-598    	; 0x13b4 <.L168>

0000160a <.L191>:
    160a:	83 30       	cpi	r24, 0x03	; 3
    160c:	61 f1       	breq	.+88     	; 0x1666 <.L194>
    160e:	84 30       	cpi	r24, 0x04	; 4
    1610:	09 f0       	breq	.+2      	; 0x1614 <.Loc.1533>

00001612 <L0^A>:
    1612:	9c cf       	rjmp	.-200    	; 0x154c <.L196>

00001614 <.Loc.1533>:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    1614:	20 91 6d 01 	lds	r18, 0x016D	; 0x80016d <cur_motion>

00001618 <.Loc.1535>:
    1618:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <rx_msg+0x6>

0000161c <.Loc.1536>:
    161c:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <rx_msg+0x5>

00001620 <.Loc.1537>:
    1620:	23 30       	cpi	r18, 0x03	; 3
    1622:	c1 f0       	breq	.+48     	; 0x1654 <.L219>

00001624 <.L199>:
                        prev_motion = MOVE_STOP;
    1624:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <prev_motion>

00001628 <.Loc.1540>:
                        cur_motion = MOVE_STRAIGHT;
    1628:	23 e0       	ldi	r18, 0x03	; 3
    162a:	20 93 6d 01 	sts	0x016D, r18	; 0x80016d <cur_motion>

0000162e <.Loc.1542>:
                        kilo_straight_left = calibmsg->straight_left;
    162e:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <kilo_straight_left>

00001632 <.Loc.1544>:
                        kilo_straight_right = calibmsg->straight_right;
    1632:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <kilo_straight_right>
    1636:	8a cf       	rjmp	.-236    	; 0x154c <.L196>

00001638 <.L190>:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1638:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <cur_motion>

0000163c <.Loc.1548>:
    163c:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <rx_msg+0x3>

00001640 <.Loc.1549>:
    1640:	91 30       	cpi	r25, 0x01	; 1
    1642:	f9 f0       	breq	.+62     	; 0x1682 <.L220>

00001644 <.L197>:
                        prev_motion = MOVE_STOP;
    1644:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <prev_motion>

00001648 <.Loc.1552>:
                        cur_motion = MOVE_LEFT;
    1648:	91 e0       	ldi	r25, 0x01	; 1
    164a:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <cur_motion>

0000164e <.Loc.1554>:
                        kilo_turn_left = calibmsg->turn_left;
    164e:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <kilo_turn_left>
    1652:	7c cf       	rjmp	.-264    	; 0x154c <.L196>

00001654 <.L219>:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    1654:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <kilo_straight_right>
    1658:	28 13       	cpse	r18, r24
    165a:	e4 cf       	rjmp	.-56     	; 0x1624 <.L199>

0000165c <.Loc.1557>:
    165c:	20 91 47 01 	lds	r18, 0x0147	; 0x800147 <kilo_straight_left>
    1660:	92 13       	cpse	r25, r18
    1662:	e0 cf       	rjmp	.-64     	; 0x1624 <.L199>
    1664:	73 cf       	rjmp	.-282    	; 0x154c <.L196>

00001666 <.L194>:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1666:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <cur_motion>

0000166a <.Loc.1560>:
    166a:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <rx_msg+0x4>

0000166e <.Loc.1561>:
    166e:	92 30       	cpi	r25, 0x02	; 2
    1670:	69 f0       	breq	.+26     	; 0x168c <.L221>

00001672 <.L198>:
                        prev_motion = MOVE_STOP;
    1672:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <prev_motion>

00001676 <.Loc.1564>:
                        cur_motion = MOVE_RIGHT;
    1676:	92 e0       	ldi	r25, 0x02	; 2
    1678:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <cur_motion>

0000167c <.Loc.1566>:
                        kilo_turn_right = calibmsg->turn_right;
    167c:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <kilo_turn_right>
    1680:	65 cf       	rjmp	.-310    	; 0x154c <.L196>

00001682 <.L220>:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1682:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <kilo_turn_left>
    1686:	98 13       	cpse	r25, r24
    1688:	dd cf       	rjmp	.-70     	; 0x1644 <.L197>
    168a:	60 cf       	rjmp	.-320    	; 0x154c <.L196>

0000168c <.L221>:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    168c:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <kilo_turn_right>
    1690:	98 13       	cpse	r25, r24
    1692:	ef cf       	rjmp	.-34     	; 0x1672 <.L198>
    1694:	5b cf       	rjmp	.-330    	; 0x154c <.L196>

00001696 <.L188>:
            reset();
    1696:	e0 e0       	ldi	r30, 0x00	; 0
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	09 95       	icall

0000169c <.L189>:
            tx_timer_off();
    169c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    16a0:	8d 7f       	andi	r24, 0xFD	; 253
    16a2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>

000016a6 <.Loc.1573>:
    16a6:	16 bc       	out	0x26, r1	; 38

000016a8 <.Loc.1574>:
            bootload();
    16a8:	e0 e0       	ldi	r30, 0x00	; 0
    16aa:	f0 e7       	ldi	r31, 0x70	; 112
    16ac:	09 95       	icall

000016ae <.L201>:
                cur_motion = MOVE_STOP;
    16ae:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <cur_motion>

000016b2 <.LBE277>:
}
    16b2:	80 ce       	rjmp	.-768    	; 0x13b4 <.L168>

000016b4 <.L218>:
                    if (kilo_state == MOVING) {
    16b4:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <kilo_state>

000016b8 <.Loc.1581>:
    16b8:	86 30       	cpi	r24, 0x06	; 6
    16ba:	09 f0       	breq	.+2      	; 0x16be <.Loc.1582>

000016bc <L0^A>:
    16bc:	7b ce       	rjmp	.-778    	; 0x13b4 <.L168>

000016be <.Loc.1582>:
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    16be:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <kilo_uid>
    16c2:	80 eb       	ldi	r24, 0xB0	; 176
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <eeprom_write_byte>

000016ca <.LVL246>:
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    16ca:	60 91 4b 01 	lds	r22, 0x014B	; 0x80014b <kilo_uid+0x1>

000016ce <.Loc.1585>:
    16ce:	81 eb       	ldi	r24, 0xB1	; 177
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <eeprom_write_byte>

000016d6 <.LVL247>:
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    16d6:	60 91 49 01 	lds	r22, 0x0149	; 0x800149 <kilo_turn_left>
    16da:	85 e0       	ldi	r24, 0x05	; 5
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <eeprom_write_byte>

000016e2 <.LVL248>:
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    16e2:	60 91 48 01 	lds	r22, 0x0148	; 0x800148 <kilo_turn_right>
    16e6:	89 e0       	ldi	r24, 0x09	; 9
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <eeprom_write_byte>

000016ee <.LVL249>:
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    16ee:	60 91 47 01 	lds	r22, 0x0147	; 0x800147 <kilo_straight_left>
    16f2:	8c e0       	ldi	r24, 0x0C	; 12
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <eeprom_write_byte>

000016fa <.LVL250>:
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    16fa:	60 91 46 01 	lds	r22, 0x0146	; 0x800146 <kilo_straight_right>
    16fe:	84 e1       	ldi	r24, 0x14	; 20
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <eeprom_write_byte>

00001706 <.LVL251>:
                        motors_off();
    1706:	53 98       	cbi	0x0a, 3	; 10

00001708 <.Loc.1591>:
    1708:	23 98       	cbi	0x04, 3	; 4

0000170a <.Loc.1592>:
    170a:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>

0000170e <.Loc.1593>:
    170e:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>

00001712 <.Loc.1594>:
                        kilo_state = IDLE;
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <kilo_state>

00001718 <.Loc.1597>:
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1718:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <rx_msg>
    171c:	88 23       	and	r24, r24
    171e:	09 f4       	brne	.+2      	; 0x1722 <L0^A+0x2>

00001720 <L0^A>:
    1720:	49 ce       	rjmp	.-878    	; 0x13b4 <.L168>
    1722:	14 cf       	rjmp	.-472    	; 0x154c <.L196>

00001724 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    1724:	fc 01       	movw	r30, r24

00001726 <.LBB4>:
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    1726:	20 81       	ld	r18, Z
    1728:	8f ef       	ldi	r24, 0xFF	; 255
    172a:	9f ef       	ldi	r25, 0xFF	; 255

0000172c <.LVL2>:
    172c:	82 27       	eor	r24, r18
    172e:	08 2e       	mov	r0, r24
    1730:	82 95       	swap	r24
    1732:	80 7f       	andi	r24, 0xF0	; 240
    1734:	80 25       	eor	r24, r0
    1736:	09 2e       	mov	r0, r25
    1738:	98 2f       	mov	r25, r24
    173a:	82 95       	swap	r24
    173c:	8f 70       	andi	r24, 0x0F	; 15
    173e:	08 26       	eor	r0, r24
    1740:	86 95       	lsr	r24
    1742:	98 27       	eor	r25, r24
    1744:	89 27       	eor	r24, r25
    1746:	88 0f       	add	r24, r24
    1748:	88 0f       	add	r24, r24
    174a:	88 0f       	add	r24, r24
    174c:	80 25       	eor	r24, r0

0000174e <.LBB15>:
    174e:	21 81       	ldd	r18, Z+1	; 0x01
    1750:	82 27       	eor	r24, r18
    1752:	08 2e       	mov	r0, r24
    1754:	82 95       	swap	r24
    1756:	80 7f       	andi	r24, 0xF0	; 240
    1758:	80 25       	eor	r24, r0
    175a:	09 2e       	mov	r0, r25
    175c:	98 2f       	mov	r25, r24
    175e:	82 95       	swap	r24
    1760:	8f 70       	andi	r24, 0x0F	; 15
    1762:	08 26       	eor	r0, r24
    1764:	86 95       	lsr	r24
    1766:	98 27       	eor	r25, r24
    1768:	89 27       	eor	r24, r25
    176a:	88 0f       	add	r24, r24
    176c:	88 0f       	add	r24, r24
    176e:	88 0f       	add	r24, r24
    1770:	80 25       	eor	r24, r0

00001772 <.LBB16>:
    1772:	22 81       	ldd	r18, Z+2	; 0x02
    1774:	82 27       	eor	r24, r18
    1776:	08 2e       	mov	r0, r24
    1778:	82 95       	swap	r24
    177a:	80 7f       	andi	r24, 0xF0	; 240
    177c:	80 25       	eor	r24, r0
    177e:	09 2e       	mov	r0, r25
    1780:	98 2f       	mov	r25, r24
    1782:	82 95       	swap	r24
    1784:	8f 70       	andi	r24, 0x0F	; 15
    1786:	08 26       	eor	r0, r24
    1788:	86 95       	lsr	r24
    178a:	98 27       	eor	r25, r24
    178c:	89 27       	eor	r24, r25
    178e:	88 0f       	add	r24, r24
    1790:	88 0f       	add	r24, r24
    1792:	88 0f       	add	r24, r24
    1794:	80 25       	eor	r24, r0

00001796 <.LBB17>:
    1796:	23 81       	ldd	r18, Z+3	; 0x03
    1798:	82 27       	eor	r24, r18
    179a:	08 2e       	mov	r0, r24
    179c:	82 95       	swap	r24
    179e:	80 7f       	andi	r24, 0xF0	; 240
    17a0:	80 25       	eor	r24, r0
    17a2:	09 2e       	mov	r0, r25
    17a4:	98 2f       	mov	r25, r24
    17a6:	82 95       	swap	r24
    17a8:	8f 70       	andi	r24, 0x0F	; 15
    17aa:	08 26       	eor	r0, r24
    17ac:	86 95       	lsr	r24
    17ae:	98 27       	eor	r25, r24
    17b0:	89 27       	eor	r24, r25
    17b2:	88 0f       	add	r24, r24
    17b4:	88 0f       	add	r24, r24
    17b6:	88 0f       	add	r24, r24
    17b8:	80 25       	eor	r24, r0

000017ba <.LBB18>:
    17ba:	24 81       	ldd	r18, Z+4	; 0x04
    17bc:	82 27       	eor	r24, r18
    17be:	08 2e       	mov	r0, r24
    17c0:	82 95       	swap	r24
    17c2:	80 7f       	andi	r24, 0xF0	; 240
    17c4:	80 25       	eor	r24, r0
    17c6:	09 2e       	mov	r0, r25
    17c8:	98 2f       	mov	r25, r24
    17ca:	82 95       	swap	r24
    17cc:	8f 70       	andi	r24, 0x0F	; 15
    17ce:	08 26       	eor	r0, r24
    17d0:	86 95       	lsr	r24
    17d2:	98 27       	eor	r25, r24
    17d4:	89 27       	eor	r24, r25
    17d6:	88 0f       	add	r24, r24
    17d8:	88 0f       	add	r24, r24
    17da:	88 0f       	add	r24, r24
    17dc:	80 25       	eor	r24, r0

000017de <.LBB19>:
    17de:	25 81       	ldd	r18, Z+5	; 0x05
    17e0:	82 27       	eor	r24, r18
    17e2:	08 2e       	mov	r0, r24
    17e4:	82 95       	swap	r24
    17e6:	80 7f       	andi	r24, 0xF0	; 240
    17e8:	80 25       	eor	r24, r0
    17ea:	09 2e       	mov	r0, r25
    17ec:	98 2f       	mov	r25, r24
    17ee:	82 95       	swap	r24
    17f0:	8f 70       	andi	r24, 0x0F	; 15
    17f2:	08 26       	eor	r0, r24
    17f4:	86 95       	lsr	r24
    17f6:	98 27       	eor	r25, r24
    17f8:	89 27       	eor	r24, r25
    17fa:	88 0f       	add	r24, r24
    17fc:	88 0f       	add	r24, r24
    17fe:	88 0f       	add	r24, r24
    1800:	80 25       	eor	r24, r0

00001802 <.LBB20>:
    1802:	26 81       	ldd	r18, Z+6	; 0x06
    1804:	82 27       	eor	r24, r18
    1806:	08 2e       	mov	r0, r24
    1808:	82 95       	swap	r24
    180a:	80 7f       	andi	r24, 0xF0	; 240
    180c:	80 25       	eor	r24, r0
    180e:	09 2e       	mov	r0, r25
    1810:	98 2f       	mov	r25, r24
    1812:	82 95       	swap	r24
    1814:	8f 70       	andi	r24, 0x0F	; 15
    1816:	08 26       	eor	r0, r24
    1818:	86 95       	lsr	r24
    181a:	98 27       	eor	r25, r24
    181c:	89 27       	eor	r24, r25
    181e:	88 0f       	add	r24, r24
    1820:	88 0f       	add	r24, r24
    1822:	88 0f       	add	r24, r24
    1824:	80 25       	eor	r24, r0

00001826 <.LBB21>:
    1826:	27 81       	ldd	r18, Z+7	; 0x07
    1828:	82 27       	eor	r24, r18
    182a:	08 2e       	mov	r0, r24
    182c:	82 95       	swap	r24
    182e:	80 7f       	andi	r24, 0xF0	; 240
    1830:	80 25       	eor	r24, r0
    1832:	09 2e       	mov	r0, r25
    1834:	98 2f       	mov	r25, r24
    1836:	82 95       	swap	r24
    1838:	8f 70       	andi	r24, 0x0F	; 15
    183a:	08 26       	eor	r0, r24
    183c:	86 95       	lsr	r24
    183e:	98 27       	eor	r25, r24
    1840:	89 27       	eor	r24, r25
    1842:	88 0f       	add	r24, r24
    1844:	88 0f       	add	r24, r24
    1846:	88 0f       	add	r24, r24
    1848:	80 25       	eor	r24, r0

0000184a <.LBB22>:
    184a:	20 85       	ldd	r18, Z+8	; 0x08
    184c:	82 27       	eor	r24, r18
    184e:	08 2e       	mov	r0, r24
    1850:	82 95       	swap	r24
    1852:	80 7f       	andi	r24, 0xF0	; 240
    1854:	80 25       	eor	r24, r0
    1856:	09 2e       	mov	r0, r25
    1858:	98 2f       	mov	r25, r24
    185a:	82 95       	swap	r24
    185c:	8f 70       	andi	r24, 0x0F	; 15
    185e:	08 26       	eor	r0, r24
    1860:	86 95       	lsr	r24
    1862:	98 27       	eor	r25, r24
    1864:	89 27       	eor	r24, r25
    1866:	88 0f       	add	r24, r24
    1868:	88 0f       	add	r24, r24
    186a:	88 0f       	add	r24, r24
    186c:	80 25       	eor	r24, r0

0000186e <.LBB23>:
    186e:	21 85       	ldd	r18, Z+9	; 0x09
    1870:	82 27       	eor	r24, r18
    1872:	08 2e       	mov	r0, r24
    1874:	82 95       	swap	r24
    1876:	80 7f       	andi	r24, 0xF0	; 240
    1878:	80 25       	eor	r24, r0
    187a:	09 2e       	mov	r0, r25
    187c:	98 2f       	mov	r25, r24
    187e:	82 95       	swap	r24
    1880:	8f 70       	andi	r24, 0x0F	; 15
    1882:	08 26       	eor	r0, r24
    1884:	86 95       	lsr	r24
    1886:	98 27       	eor	r25, r24
    1888:	89 27       	eor	r24, r25
    188a:	88 0f       	add	r24, r24
    188c:	88 0f       	add	r24, r24
    188e:	88 0f       	add	r24, r24
    1890:	80 25       	eor	r24, r0

00001892 <.LBE23>:
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    1892:	08 95       	ret

00001894 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    1894:	0f b6       	in	r0, 0x3f	; 63

00001896 <.Loc.1>:
#ifndef OHC
    cli
    1896:	f8 94       	cli

00001898 <.Loc.2>:
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    1898:	a4 b1       	in	r26, 0x04	; 4

0000189a <.Loc.3>:

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    189a:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <tx_mask>

0000189e <.Loc.4>:
    or tmpreg1, ddrreg
    189e:	2a 2b       	or	r18, r26

000018a0 <.Loc.5>:
    out IR_DDR, tmpreg1
    18a0:	24 b9       	out	0x04, r18	; 4

000018a2 <.Loc.6>:

    ldi tmpreg1, 0x01
    18a2:	21 e0       	ldi	r18, 0x01	; 1

000018a4 <.Loc.7>:
    irsend
    18a4:	30 91 56 01 	lds	r19, 0x0156	; 0x800156 <tx_mask>
    18a8:	20 30       	cpi	r18, 0x00	; 0
    18aa:	29 f0       	breq	.+10     	; 0x18b6 <.L1^B1>
    18ac:	00 00       	nop
    18ae:	25 b1       	in	r18, 0x05	; 5
    18b0:	23 2b       	or	r18, r19
    18b2:	25 b9       	out	0x05, r18	; 5
    18b4:	04 c0       	rjmp	.+8      	; 0x18be <.L2^B1>

000018b6 <.L1^B1>:
    18b6:	00 00       	nop
    18b8:	00 00       	nop
    18ba:	00 00       	nop
    18bc:	00 c0       	rjmp	.+0      	; 0x18be <.L2^B1>

000018be <.L2^B1>:
    18be:	00 00       	nop
    18c0:	00 00       	nop
    18c2:	00 00       	nop
    18c4:	30 95       	com	r19
    18c6:	25 b1       	in	r18, 0x05	; 5
    18c8:	23 23       	and	r18, r19
    18ca:	25 b9       	out	0x05, r18	; 5

000018cc <.Loc.8>:
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    18cc:	2e ea       	ldi	r18, 0xAE	; 174

000018ce <.L1^B2>:
    18ce:	2a 95       	dec	r18
    18d0:	f1 f7       	brne	.-4      	; 0x18ce <.L1^B2>

000018d2 <.Loc.9>:

    ldi tmpreg1, rx_bitcycles*7/8
    18d2:	2b ee       	ldi	r18, 0xEB	; 235

000018d4 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    18d4:	30 b7       	in	r19, 0x30	; 48

000018d6 <.Loc.11>:
    sbrs tmpreg2, ACO
    18d6:	35 ff       	sbrs	r19, 5

000018d8 <.Loc.12>:
    rjmp nocollision
    18d8:	0a c0       	rjmp	.+20     	; 0x18ee <nocollision>

000018da <.Loc.13>:
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    18da:	a4 b9       	out	0x04, r26	; 4

000018dc <.Loc.14>:
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    18dc:	30 91 56 01 	lds	r19, 0x0156	; 0x800156 <tx_mask>

000018e0 <.Loc.15>:
    com tmpreg2
    18e0:	30 95       	com	r19

000018e2 <.Loc.16>:
    in tmpreg1, IR_PORT
    18e2:	25 b1       	in	r18, 0x05	; 5

000018e4 <.Loc.17>:
    and tmpreg1, tmpreg2
    18e4:	23 23       	and	r18, r19

000018e6 <.Loc.18>:
    out IR_PORT, tmpreg1
    18e6:	25 b9       	out	0x05, r18	; 5

000018e8 <.Loc.19>:
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    18e8:	0f be       	out	0x3f, r0	; 63

000018ea <.Loc.20>:
    return 0
    18ea:	80 e0       	ldi	r24, 0x00	; 0
    18ec:	08 95       	ret

000018ee <nocollision>:
	...

000018f0 <.Loc.22>:
nocollision:
    nop
    dec tmpreg1
    18f0:	2a 95       	dec	r18

000018f2 <.Loc.23>:
    brne checkcollision
    18f2:	81 f7       	brne	.-32     	; 0x18d4 <checkcollision>

000018f4 <.Loc.24>:

    ldi tmpreg1, 0x01
    18f4:	21 e0       	ldi	r18, 0x01	; 1

000018f6 <.Loc.25>:
    irsend
    18f6:	30 91 56 01 	lds	r19, 0x0156	; 0x800156 <tx_mask>
    18fa:	20 30       	cpi	r18, 0x00	; 0
    18fc:	29 f0       	breq	.+10     	; 0x1908 <.L1^B3>
    18fe:	00 00       	nop
    1900:	25 b1       	in	r18, 0x05	; 5
    1902:	23 2b       	or	r18, r19
    1904:	25 b9       	out	0x05, r18	; 5
    1906:	04 c0       	rjmp	.+8      	; 0x1910 <.L2^B2>

00001908 <.L1^B3>:
    1908:	00 00       	nop
    190a:	00 00       	nop
    190c:	00 00       	nop
    190e:	00 c0       	rjmp	.+0      	; 0x1910 <.L2^B2>

00001910 <.L2^B2>:
    1910:	00 00       	nop
    1912:	00 00       	nop
    1914:	00 00       	nop
    1916:	30 95       	com	r19
    1918:	25 b1       	in	r18, 0x05	; 5
    191a:	23 23       	and	r18, r19
    191c:	25 b9       	out	0x05, r18	; 5

0000191e <.Loc.26>:
    delay_cycles (rx_bitcycles-irsend_cycles)
    191e:	00 00       	nop
    1920:	24 e5       	ldi	r18, 0x54	; 84

00001922 <.L1^B4>:
    1922:	2a 95       	dec	r18
    1924:	f1 f7       	brne	.-4      	; 0x1922 <.L1^B4>

00001926 <.Loc.27>:

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    1926:	fc 01       	movw	r30, r24

00001928 <.Loc.28>:
    ldi byteidx, 12
    1928:	8c e0       	ldi	r24, 0x0C	; 12

0000192a <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    192a:	61 91       	ld	r22, Z+

0000192c <.Loc.30>:
    ldi bytevalH, 0x00
    192c:	70 e0       	ldi	r23, 0x00	; 0

0000192e <.Loc.31>:
    add bytevalL, bytevalL
    192e:	66 0f       	add	r22, r22

00001930 <.Loc.32>:
    adc bytevalH, bytevalH
    1930:	77 1f       	adc	r23, r23

00001932 <.Loc.33>:
    ori bytevalL, 0x01
    1932:	61 60       	ori	r22, 0x01	; 1

00001934 <.Loc.34>:
    ori bytevalH, 0x02
    1934:	72 60       	ori	r23, 0x02	; 2

00001936 <.Loc.35>:
    ; bitidex = 10
    ldi bitidx, 10
    1936:	9a e0       	ldi	r25, 0x0A	; 10

00001938 <.Loc.36>:
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    1938:	41 e0       	ldi	r20, 0x01	; 1

0000193a <.Loc.37>:
    ldi bitmaskH, 0x00
    193a:	50 e0       	ldi	r21, 0x00	; 0

0000193c <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    193c:	9a 01       	movw	r18, r20

0000193e <.Loc.39>:
    and tmpreg1, bytevalL
    193e:	26 23       	and	r18, r22

00001940 <.Loc.40>:
    and tmpreg2, bytevalH
    1940:	37 23       	and	r19, r23

00001942 <.Loc.41>:
    or  tmpreg1, tmpreg2
    1942:	23 2b       	or	r18, r19

00001944 <.Loc.42>:

    ; irsend tmpreg
    irsend
    1944:	30 91 56 01 	lds	r19, 0x0156	; 0x800156 <tx_mask>
    1948:	20 30       	cpi	r18, 0x00	; 0
    194a:	29 f0       	breq	.+10     	; 0x1956 <.L1^B5>
    194c:	00 00       	nop
    194e:	25 b1       	in	r18, 0x05	; 5
    1950:	23 2b       	or	r18, r19
    1952:	25 b9       	out	0x05, r18	; 5
    1954:	04 c0       	rjmp	.+8      	; 0x195e <.L2^B3>

00001956 <.L1^B5>:
    1956:	00 00       	nop
    1958:	00 00       	nop
    195a:	00 00       	nop
    195c:	00 c0       	rjmp	.+0      	; 0x195e <.L2^B3>

0000195e <.L2^B3>:
    195e:	00 00       	nop
    1960:	00 00       	nop
    1962:	00 00       	nop
    1964:	30 95       	com	r19
    1966:	25 b1       	in	r18, 0x05	; 5
    1968:	23 23       	and	r18, r19
    196a:	25 b9       	out	0x05, r18	; 5

0000196c <.Loc.43>:
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    196c:	00 00       	nop
    196e:	21 e5       	ldi	r18, 0x51	; 81

00001970 <.L1^B6>:
    1970:	2a 95       	dec	r18
    1972:	f1 f7       	brne	.-4      	; 0x1970 <.L1^B6>

00001974 <.Loc.44>:

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    1974:	44 0f       	add	r20, r20

00001976 <.Loc.45>:
    adc bitmaskH, bitmaskH
    1976:	55 1f       	adc	r21, r21

00001978 <.Loc.46>:

    ; if (bitidex--) goto sendbit
    dec bitidx
    1978:	9a 95       	dec	r25

0000197a <.Loc.47>:
    brne sendbit
    197a:	01 f7       	brne	.-64     	; 0x193c <sendbit>

0000197c <.Loc.48>:

    ; if (byteidx--) goto sendbyte
    dec byteidx
    197c:	8a 95       	dec	r24

0000197e <.Loc.49>:
    brne sendbyte
    197e:	a9 f6       	brne	.-86     	; 0x192a <sendbyte>

00001980 <.Loc.50>:

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    1980:	20 b7       	in	r18, 0x30	; 48

00001982 <.Loc.51>:
    ori tmpreg1, (1<<ACI)
    1982:	20 61       	ori	r18, 0x10	; 16

00001984 <.Loc.52>:
    out ACSR, tmpreg1
    1984:	20 bf       	out	0x30, r18	; 48

00001986 <.Loc.53>:
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1986:	a4 b9       	out	0x04, r26	; 4

00001988 <.Loc.54>:

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1988:	30 91 56 01 	lds	r19, 0x0156	; 0x800156 <tx_mask>

0000198c <.Loc.55>:
    com tmpreg2
    198c:	30 95       	com	r19

0000198e <.Loc.56>:
    in tmpreg1, IR_PORT
    198e:	25 b1       	in	r18, 0x05	; 5

00001990 <.Loc.57>:
    and tmpreg1, tmpreg2
    1990:	23 23       	and	r18, r19

00001992 <.Loc.58>:
    out IR_PORT, tmpreg1
    1992:	25 b9       	out	0x05, r18	; 5

00001994 <.Loc.59>:

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1994:	0f be       	out	0x3f, r0	; 63

00001996 <.Loc.60>:
    return 1
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	08 95       	ret

0000199a <main>:

int main()
{
    kilo_init();
    199a:	0e 94 56 01 	call	0x2ac	; 0x2ac <kilo_init>

0000199e <.LVL53>:
    //debug_init();
    kilo_start(setup, loop);
    199e:	6f e8       	ldi	r22, 0x8F	; 143
    19a0:	70 e0       	ldi	r23, 0x00	; 0
    19a2:	8f e5       	ldi	r24, 0x5F	; 95
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	0e 94 50 02 	call	0x4a0	; 0x4a0 <kilo_start>

000019aa <.LVL54>:

    return 0;
}
    19aa:	80 e0       	ldi	r24, 0x00	; 0
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	08 95       	ret

000019b0 <__divmodhi4>:
    19b0:	97 fb       	bst	r25, 7

000019b2 <.Loc.1>:
    19b2:	07 2e       	mov	r0, r23

000019b4 <.Loc.2>:
    19b4:	16 f4       	brtc	.+4      	; 0x19ba <.L^B1>

000019b6 <.Loc.3>:
    19b6:	00 94       	com	r0

000019b8 <.Loc.4>:
    19b8:	07 d0       	rcall	.+14     	; 0x19c8 <__divmodhi4_neg1>

000019ba <.L^B1>:
    19ba:	77 fd       	sbrc	r23, 7

000019bc <.Loc.6>:
    19bc:	09 d0       	rcall	.+18     	; 0x19d0 <__divmodhi4_neg2>

000019be <.Loc.7>:
    19be:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <__udivmodhi4>

000019c2 <.Loc.8>:
    19c2:	07 fc       	sbrc	r0, 7

000019c4 <.Loc.9>:
    19c4:	05 d0       	rcall	.+10     	; 0x19d0 <__divmodhi4_neg2>

000019c6 <.Loc.10>:
    19c6:	3e f4       	brtc	.+14     	; 0x19d6 <__divmodhi4_exit>

000019c8 <__divmodhi4_neg1>:
    19c8:	90 95       	com	r25

000019ca <.Loc.12>:
    19ca:	81 95       	neg	r24

000019cc <.Loc.13>:
    19cc:	9f 4f       	sbci	r25, 0xFF	; 255

000019ce <.Loc.14>:
    19ce:	08 95       	ret

000019d0 <__divmodhi4_neg2>:
    19d0:	70 95       	com	r23

000019d2 <.Loc.16>:
    19d2:	61 95       	neg	r22

000019d4 <.Loc.17>:
    19d4:	7f 4f       	sbci	r23, 0xFF	; 255

000019d6 <__divmodhi4_exit>:
    19d6:	08 95       	ret

000019d8 <__tablejump2__>:
    19d8:	ee 0f       	add	r30, r30

000019da <.Loc.1>:
    19da:	ff 1f       	adc	r31, r31

000019dc <.Loc.2>:
    19dc:	05 90       	lpm	r0, Z+

000019de <.Loc.3>:
    19de:	f4 91       	lpm	r31, Z

000019e0 <.Loc.4>:
    19e0:	e0 2d       	mov	r30, r0

000019e2 <.Loc.5>:
    19e2:	09 94       	ijmp

000019e4 <__umulhisi3>:
    19e4:	a2 9f       	mul	r26, r18

000019e6 <.Loc.1>:
    19e6:	b0 01       	movw	r22, r0

000019e8 <.Loc.2>:
    19e8:	b3 9f       	mul	r27, r19

000019ea <.Loc.3>:
    19ea:	c0 01       	movw	r24, r0

000019ec <.Loc.4>:
    19ec:	a3 9f       	mul	r26, r19

000019ee <.Loc.5>:
    19ee:	70 0d       	add	r23, r0

000019f0 <.Loc.6>:
    19f0:	81 1d       	adc	r24, r1

000019f2 <.Loc.7>:
    19f2:	11 24       	eor	r1, r1

000019f4 <.Loc.8>:
    19f4:	91 1d       	adc	r25, r1

000019f6 <.Loc.9>:
    19f6:	b2 9f       	mul	r27, r18

000019f8 <.Loc.10>:
    19f8:	70 0d       	add	r23, r0

000019fa <.Loc.11>:
    19fa:	81 1d       	adc	r24, r1

000019fc <.Loc.12>:
    19fc:	11 24       	eor	r1, r1

000019fe <.Loc.13>:
    19fe:	91 1d       	adc	r25, r1

00001a00 <.Loc.14>:
    1a00:	08 95       	ret

00001a02 <__udivmodhi4>:
    1a02:	aa 1b       	sub	r26, r26

00001a04 <.Loc.1>:
    1a04:	bb 1b       	sub	r27, r27

00001a06 <.Loc.2>:
    1a06:	51 e1       	ldi	r21, 0x11	; 17

00001a08 <.Loc.3>:
    1a08:	07 c0       	rjmp	.+14     	; 0x1a18 <__udivmodhi4_ep>

00001a0a <__udivmodhi4_loop>:
    1a0a:	aa 1f       	adc	r26, r26

00001a0c <.Loc.5>:
    1a0c:	bb 1f       	adc	r27, r27

00001a0e <.Loc.6>:
    1a0e:	a6 17       	cp	r26, r22

00001a10 <.Loc.7>:
    1a10:	b7 07       	cpc	r27, r23

00001a12 <.Loc.8>:
    1a12:	10 f0       	brcs	.+4      	; 0x1a18 <__udivmodhi4_ep>

00001a14 <.Loc.9>:
    1a14:	a6 1b       	sub	r26, r22

00001a16 <.Loc.10>:
    1a16:	b7 0b       	sbc	r27, r23

00001a18 <__udivmodhi4_ep>:
    1a18:	88 1f       	adc	r24, r24

00001a1a <.Loc.12>:
    1a1a:	99 1f       	adc	r25, r25

00001a1c <.Loc.13>:
    1a1c:	5a 95       	dec	r21

00001a1e <.Loc.14>:
    1a1e:	a9 f7       	brne	.-22     	; 0x1a0a <__udivmodhi4_loop>

00001a20 <.Loc.15>:
    1a20:	80 95       	com	r24

00001a22 <.Loc.16>:
    1a22:	90 95       	com	r25

00001a24 <.Loc.17>:
    1a24:	bc 01       	movw	r22, r24

00001a26 <.Loc.18>:
    1a26:	cd 01       	movw	r24, r26

00001a28 <.Loc.19>:
    1a28:	08 95       	ret

00001a2a <__subsf3>:
    1a2a:	50 58       	subi	r21, 0x80	; 128

00001a2c <__addsf3>:
    1a2c:	bb 27       	eor	r27, r27
    1a2e:	aa 27       	eor	r26, r26
    1a30:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <__addsf3x>
    1a34:	0c 94 7e 0e 	jmp	0x1cfc	; 0x1cfc <__fp_round>

00001a38 <.L^B1>:
    1a38:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <__fp_pscA>
    1a3c:	38 f0       	brcs	.+14     	; 0x1a4c <.L_nan>
    1a3e:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__fp_pscB>
    1a42:	20 f0       	brcs	.+8      	; 0x1a4c <.L_nan>
    1a44:	39 f4       	brne	.+14     	; 0x1a54 <.L_inf>
    1a46:	9f 3f       	cpi	r25, 0xFF	; 255
    1a48:	19 f4       	brne	.+6      	; 0x1a50 <.L_infB>
    1a4a:	26 f4       	brtc	.+8      	; 0x1a54 <.L_inf>

00001a4c <.L_nan>:
    1a4c:	0c 94 6d 0e 	jmp	0x1cda	; 0x1cda <__fp_nan>

00001a50 <.L_infB>:
    1a50:	0e f4       	brtc	.+2      	; 0x1a54 <.L_inf>
    1a52:	e0 95       	com	r30

00001a54 <.L_inf>:
    1a54:	e7 fb       	bst	r30, 7
    1a56:	0c 94 67 0e 	jmp	0x1cce	; 0x1cce <__fp_inf>

00001a5a <__addsf3x>:
    1a5a:	e9 2f       	mov	r30, r25
    1a5c:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <__fp_split3>
    1a60:	58 f3       	brcs	.-42     	; 0x1a38 <.L^B1>
    1a62:	ba 17       	cp	r27, r26
    1a64:	62 07       	cpc	r22, r18
    1a66:	73 07       	cpc	r23, r19
    1a68:	84 07       	cpc	r24, r20
    1a6a:	95 07       	cpc	r25, r21
    1a6c:	20 f0       	brcs	.+8      	; 0x1a76 <.L2^B1>
    1a6e:	79 f4       	brne	.+30     	; 0x1a8e <.L4^B1>
    1a70:	a6 f5       	brtc	.+104    	; 0x1ada <.L_add>
    1a72:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <__fp_zero>

00001a76 <.L2^B1>:
    1a76:	0e f4       	brtc	.+2      	; 0x1a7a <.L3^B1>
    1a78:	e0 95       	com	r30

00001a7a <.L3^B1>:
    1a7a:	0b 2e       	mov	r0, r27
    1a7c:	ba 2f       	mov	r27, r26
    1a7e:	a0 2d       	mov	r26, r0
    1a80:	0b 01       	movw	r0, r22
    1a82:	b9 01       	movw	r22, r18
    1a84:	90 01       	movw	r18, r0
    1a86:	0c 01       	movw	r0, r24
    1a88:	ca 01       	movw	r24, r20
    1a8a:	a0 01       	movw	r20, r0
    1a8c:	11 24       	eor	r1, r1

00001a8e <.L4^B1>:
    1a8e:	ff 27       	eor	r31, r31
    1a90:	59 1b       	sub	r21, r25

00001a92 <.L5^B1>:
    1a92:	99 f0       	breq	.+38     	; 0x1aba <.L7^B1>
    1a94:	59 3f       	cpi	r21, 0xF9	; 249
    1a96:	50 f4       	brcc	.+20     	; 0x1aac <.L6^B1>
    1a98:	50 3e       	cpi	r21, 0xE0	; 224
    1a9a:	68 f1       	brcs	.+90     	; 0x1af6 <.L_ret>
    1a9c:	1a 16       	cp	r1, r26
    1a9e:	f0 40       	sbci	r31, 0x00	; 0
    1aa0:	a2 2f       	mov	r26, r18
    1aa2:	23 2f       	mov	r18, r19
    1aa4:	34 2f       	mov	r19, r20
    1aa6:	44 27       	eor	r20, r20
    1aa8:	58 5f       	subi	r21, 0xF8	; 248
    1aaa:	f3 cf       	rjmp	.-26     	; 0x1a92 <.L5^B1>

00001aac <.L6^B1>:
    1aac:	46 95       	lsr	r20
    1aae:	37 95       	ror	r19
    1ab0:	27 95       	ror	r18
    1ab2:	a7 95       	ror	r26
    1ab4:	f0 40       	sbci	r31, 0x00	; 0
    1ab6:	53 95       	inc	r21
    1ab8:	c9 f7       	brne	.-14     	; 0x1aac <.L6^B1>

00001aba <.L7^B1>:
    1aba:	7e f4       	brtc	.+30     	; 0x1ada <.L_add>
    1abc:	1f 16       	cp	r1, r31
    1abe:	ba 0b       	sbc	r27, r26
    1ac0:	62 0b       	sbc	r22, r18
    1ac2:	73 0b       	sbc	r23, r19
    1ac4:	84 0b       	sbc	r24, r20
    1ac6:	ba f0       	brmi	.+46     	; 0x1af6 <.L_ret>

00001ac8 <.L8^B1>:
    1ac8:	91 50       	subi	r25, 0x01	; 1
    1aca:	a1 f0       	breq	.+40     	; 0x1af4 <.L9^B1>
    1acc:	ff 0f       	add	r31, r31
    1ace:	bb 1f       	adc	r27, r27
    1ad0:	66 1f       	adc	r22, r22
    1ad2:	77 1f       	adc	r23, r23
    1ad4:	88 1f       	adc	r24, r24
    1ad6:	c2 f7       	brpl	.-16     	; 0x1ac8 <.L8^B1>
    1ad8:	0e c0       	rjmp	.+28     	; 0x1af6 <.L_ret>

00001ada <.L_add>:
    1ada:	ba 0f       	add	r27, r26
    1adc:	62 1f       	adc	r22, r18
    1ade:	73 1f       	adc	r23, r19
    1ae0:	84 1f       	adc	r24, r20
    1ae2:	48 f4       	brcc	.+18     	; 0x1af6 <.L_ret>
    1ae4:	87 95       	ror	r24
    1ae6:	77 95       	ror	r23
    1ae8:	67 95       	ror	r22
    1aea:	b7 95       	ror	r27
    1aec:	f7 95       	ror	r31
    1aee:	9e 3f       	cpi	r25, 0xFE	; 254
    1af0:	08 f0       	brcs	.+2      	; 0x1af4 <.L9^B1>
    1af2:	b0 cf       	rjmp	.-160    	; 0x1a54 <.L_inf>

00001af4 <.L9^B1>:
    1af4:	93 95       	inc	r25

00001af6 <.L_ret>:
    1af6:	88 0f       	add	r24, r24
    1af8:	08 f0       	brcs	.+2      	; 0x1afc <.L1^B1>
    1afa:	99 27       	eor	r25, r25

00001afc <.L1^B1>:
    1afc:	ee 0f       	add	r30, r30
    1afe:	97 95       	ror	r25
    1b00:	87 95       	ror	r24
    1b02:	08 95       	ret

00001b04 <__divsf3>:
    1b04:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <__divsf3x>
    1b08:	0c 94 7e 0e 	jmp	0x1cfc	; 0x1cfc <__fp_round>

00001b0c <.L^B1>:
    1b0c:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__fp_pscB>
    1b10:	58 f0       	brcs	.+22     	; 0x1b28 <.L_nan>
    1b12:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <__fp_pscA>
    1b16:	40 f0       	brcs	.+16     	; 0x1b28 <.L_nan>
    1b18:	29 f4       	brne	.+10     	; 0x1b24 <.L_zr>
    1b1a:	5f 3f       	cpi	r21, 0xFF	; 255
    1b1c:	29 f0       	breq	.+10     	; 0x1b28 <.L_nan>

00001b1e <.L_inf>:
    1b1e:	0c 94 67 0e 	jmp	0x1cce	; 0x1cce <__fp_inf>

00001b22 <.L1^B1>:
    1b22:	51 11       	cpse	r21, r1

00001b24 <.L_zr>:
    1b24:	0c 94 b2 0e 	jmp	0x1d64	; 0x1d64 <__fp_szero>

00001b28 <.L_nan>:
    1b28:	0c 94 6d 0e 	jmp	0x1cda	; 0x1cda <__fp_nan>

00001b2c <__divsf3x>:
    1b2c:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <__fp_split3>
    1b30:	68 f3       	brcs	.-38     	; 0x1b0c <.L^B1>

00001b32 <__divsf3_pse>:
    1b32:	99 23       	and	r25, r25
    1b34:	b1 f3       	breq	.-20     	; 0x1b22 <.L1^B1>
    1b36:	55 23       	and	r21, r21
    1b38:	91 f3       	breq	.-28     	; 0x1b1e <.L_inf>
    1b3a:	95 1b       	sub	r25, r21
    1b3c:	55 0b       	sbc	r21, r21
    1b3e:	bb 27       	eor	r27, r27
    1b40:	aa 27       	eor	r26, r26

00001b42 <.L2^B1>:
    1b42:	62 17       	cp	r22, r18
    1b44:	73 07       	cpc	r23, r19
    1b46:	84 07       	cpc	r24, r20
    1b48:	38 f0       	brcs	.+14     	; 0x1b58 <.L3^B1>
    1b4a:	9f 5f       	subi	r25, 0xFF	; 255
    1b4c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b4e:	22 0f       	add	r18, r18
    1b50:	33 1f       	adc	r19, r19
    1b52:	44 1f       	adc	r20, r20
    1b54:	aa 1f       	adc	r26, r26
    1b56:	a9 f3       	breq	.-22     	; 0x1b42 <.L2^B1>

00001b58 <.L3^B1>:
    1b58:	35 d0       	rcall	.+106    	; 0x1bc4 <.L_div>
    1b5a:	0e 2e       	mov	r0, r30
    1b5c:	3a f0       	brmi	.+14     	; 0x1b6c <.L5^B1>

00001b5e <.L4^B1>:
    1b5e:	e0 e8       	ldi	r30, 0x80	; 128
    1b60:	32 d0       	rcall	.+100    	; 0x1bc6 <.L_div1>
    1b62:	91 50       	subi	r25, 0x01	; 1
    1b64:	50 40       	sbci	r21, 0x00	; 0
    1b66:	e6 95       	lsr	r30
    1b68:	00 1c       	adc	r0, r0
    1b6a:	ca f7       	brpl	.-14     	; 0x1b5e <.L4^B1>

00001b6c <.L5^B1>:
    1b6c:	2b d0       	rcall	.+86     	; 0x1bc4 <.L_div>
    1b6e:	fe 2f       	mov	r31, r30
    1b70:	29 d0       	rcall	.+82     	; 0x1bc4 <.L_div>
    1b72:	66 0f       	add	r22, r22
    1b74:	77 1f       	adc	r23, r23
    1b76:	88 1f       	adc	r24, r24
    1b78:	bb 1f       	adc	r27, r27
    1b7a:	26 17       	cp	r18, r22
    1b7c:	37 07       	cpc	r19, r23
    1b7e:	48 07       	cpc	r20, r24
    1b80:	ab 07       	cpc	r26, r27
    1b82:	b0 e8       	ldi	r27, 0x80	; 128
    1b84:	09 f0       	breq	.+2      	; 0x1b88 <.L4^B2>
    1b86:	bb 0b       	sbc	r27, r27

00001b88 <.L4^B2>:
    1b88:	80 2d       	mov	r24, r0
    1b8a:	bf 01       	movw	r22, r30
    1b8c:	ff 27       	eor	r31, r31
    1b8e:	93 58       	subi	r25, 0x83	; 131
    1b90:	5f 4f       	sbci	r21, 0xFF	; 255
    1b92:	3a f0       	brmi	.+14     	; 0x1ba2 <.L13^B1>
    1b94:	9e 3f       	cpi	r25, 0xFE	; 254
    1b96:	51 05       	cpc	r21, r1
    1b98:	78 f0       	brcs	.+30     	; 0x1bb8 <.L15^B1>
    1b9a:	0c 94 67 0e 	jmp	0x1cce	; 0x1cce <__fp_inf>

00001b9e <.L12^B1>:
    1b9e:	0c 94 b2 0e 	jmp	0x1d64	; 0x1d64 <__fp_szero>

00001ba2 <.L13^B1>:
    1ba2:	5f 3f       	cpi	r21, 0xFF	; 255
    1ba4:	e4 f3       	brlt	.-8      	; 0x1b9e <.L12^B1>
    1ba6:	98 3e       	cpi	r25, 0xE8	; 232
    1ba8:	d4 f3       	brlt	.-12     	; 0x1b9e <.L12^B1>

00001baa <.L14^B1>:
    1baa:	86 95       	lsr	r24
    1bac:	77 95       	ror	r23
    1bae:	67 95       	ror	r22
    1bb0:	b7 95       	ror	r27
    1bb2:	f7 95       	ror	r31
    1bb4:	9f 5f       	subi	r25, 0xFF	; 255
    1bb6:	c9 f7       	brne	.-14     	; 0x1baa <.L14^B1>

00001bb8 <.L15^B1>:
    1bb8:	88 0f       	add	r24, r24
    1bba:	91 1d       	adc	r25, r1
    1bbc:	96 95       	lsr	r25
    1bbe:	87 95       	ror	r24
    1bc0:	97 f9       	bld	r25, 7
    1bc2:	08 95       	ret

00001bc4 <.L_div>:
    1bc4:	e1 e0       	ldi	r30, 0x01	; 1

00001bc6 <.L_div1>:
    1bc6:	66 0f       	add	r22, r22
    1bc8:	77 1f       	adc	r23, r23
    1bca:	88 1f       	adc	r24, r24
    1bcc:	bb 1f       	adc	r27, r27
    1bce:	62 17       	cp	r22, r18
    1bd0:	73 07       	cpc	r23, r19
    1bd2:	84 07       	cpc	r24, r20
    1bd4:	ba 07       	cpc	r27, r26
    1bd6:	20 f0       	brcs	.+8      	; 0x1be0 <.L2^B2>
    1bd8:	62 1b       	sub	r22, r18
    1bda:	73 0b       	sbc	r23, r19
    1bdc:	84 0b       	sbc	r24, r20
    1bde:	ba 0b       	sbc	r27, r26

00001be0 <.L2^B2>:
    1be0:	ee 1f       	adc	r30, r30
    1be2:	88 f7       	brcc	.-30     	; 0x1bc6 <.L_div1>
    1be4:	e0 95       	com	r30
    1be6:	08 95       	ret

00001be8 <__fixsfsi>:
    1be8:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <__fixunssfsi>
    1bec:	68 94       	set
    1bee:	b1 11       	cpse	r27, r1
    1bf0:	0c 94 b2 0e 	jmp	0x1d64	; 0x1d64 <__fp_szero>
    1bf4:	08 95       	ret

00001bf6 <__fixunssfsi>:
    1bf6:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <__fp_splitA>
    1bfa:	88 f0       	brcs	.+34     	; 0x1c1e <.L_err>
    1bfc:	9f 57       	subi	r25, 0x7F	; 127
    1bfe:	98 f0       	brcs	.+38     	; 0x1c26 <.L_zr>
    1c00:	b9 2f       	mov	r27, r25
    1c02:	99 27       	eor	r25, r25
    1c04:	b7 51       	subi	r27, 0x17	; 23
    1c06:	b0 f0       	brcs	.+44     	; 0x1c34 <.L4^B1>
    1c08:	e1 f0       	breq	.+56     	; 0x1c42 <.L_sign>

00001c0a <.L1^B1>:
    1c0a:	66 0f       	add	r22, r22
    1c0c:	77 1f       	adc	r23, r23
    1c0e:	88 1f       	adc	r24, r24
    1c10:	99 1f       	adc	r25, r25
    1c12:	1a f0       	brmi	.+6      	; 0x1c1a <.L2^B1>
    1c14:	ba 95       	dec	r27
    1c16:	c9 f7       	brne	.-14     	; 0x1c0a <.L1^B1>
    1c18:	14 c0       	rjmp	.+40     	; 0x1c42 <.L_sign>

00001c1a <.L2^B1>:
    1c1a:	b1 30       	cpi	r27, 0x01	; 1
    1c1c:	91 f0       	breq	.+36     	; 0x1c42 <.L_sign>

00001c1e <.L_err>:
    1c1e:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__fp_zero>
    1c22:	b1 e0       	ldi	r27, 0x01	; 1
    1c24:	08 95       	ret

00001c26 <.L_zr>:
    1c26:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <__fp_zero>

00001c2a <.L3^B1>:
    1c2a:	67 2f       	mov	r22, r23
    1c2c:	78 2f       	mov	r23, r24
    1c2e:	88 27       	eor	r24, r24
    1c30:	b8 5f       	subi	r27, 0xF8	; 248
    1c32:	39 f0       	breq	.+14     	; 0x1c42 <.L_sign>

00001c34 <.L4^B1>:
    1c34:	b9 3f       	cpi	r27, 0xF9	; 249
    1c36:	cc f3       	brlt	.-14     	; 0x1c2a <.L3^B1>

00001c38 <.L5^B1>:
    1c38:	86 95       	lsr	r24
    1c3a:	77 95       	ror	r23
    1c3c:	67 95       	ror	r22
    1c3e:	b3 95       	inc	r27
    1c40:	d9 f7       	brne	.-10     	; 0x1c38 <.L5^B1>

00001c42 <.L_sign>:
    1c42:	3e f4       	brtc	.+14     	; 0x1c52 <.L6^B1>
    1c44:	90 95       	com	r25
    1c46:	80 95       	com	r24
    1c48:	70 95       	com	r23
    1c4a:	61 95       	neg	r22
    1c4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c4e:	8f 4f       	sbci	r24, 0xFF	; 255
    1c50:	9f 4f       	sbci	r25, 0xFF	; 255

00001c52 <.L6^B1>:
    1c52:	08 95       	ret

00001c54 <__floatunsisf>:
    1c54:	e8 94       	clt
    1c56:	09 c0       	rjmp	.+18     	; 0x1c6a <.L1^B1>

00001c58 <__floatsisf>:
    1c58:	97 fb       	bst	r25, 7
    1c5a:	3e f4       	brtc	.+14     	; 0x1c6a <.L1^B1>
    1c5c:	90 95       	com	r25
    1c5e:	80 95       	com	r24
    1c60:	70 95       	com	r23
    1c62:	61 95       	neg	r22
    1c64:	7f 4f       	sbci	r23, 0xFF	; 255
    1c66:	8f 4f       	sbci	r24, 0xFF	; 255
    1c68:	9f 4f       	sbci	r25, 0xFF	; 255

00001c6a <.L1^B1>:
    1c6a:	99 23       	and	r25, r25
    1c6c:	a9 f0       	breq	.+42     	; 0x1c98 <.L4^B1>
    1c6e:	f9 2f       	mov	r31, r25
    1c70:	96 e9       	ldi	r25, 0x96	; 150
    1c72:	bb 27       	eor	r27, r27

00001c74 <.L2^B1>:
    1c74:	93 95       	inc	r25
    1c76:	f6 95       	lsr	r31
    1c78:	87 95       	ror	r24
    1c7a:	77 95       	ror	r23
    1c7c:	67 95       	ror	r22
    1c7e:	b7 95       	ror	r27
    1c80:	f1 11       	cpse	r31, r1
    1c82:	f8 cf       	rjmp	.-16     	; 0x1c74 <.L2^B1>
    1c84:	fa f4       	brpl	.+62     	; 0x1cc4 <.L_pack>
    1c86:	bb 0f       	add	r27, r27
    1c88:	11 f4       	brne	.+4      	; 0x1c8e <.L3^B1>
    1c8a:	60 ff       	sbrs	r22, 0
    1c8c:	1b c0       	rjmp	.+54     	; 0x1cc4 <.L_pack>

00001c8e <.L3^B1>:
    1c8e:	6f 5f       	subi	r22, 0xFF	; 255
    1c90:	7f 4f       	sbci	r23, 0xFF	; 255
    1c92:	8f 4f       	sbci	r24, 0xFF	; 255
    1c94:	9f 4f       	sbci	r25, 0xFF	; 255
    1c96:	16 c0       	rjmp	.+44     	; 0x1cc4 <.L_pack>

00001c98 <.L4^B1>:
    1c98:	88 23       	and	r24, r24
    1c9a:	11 f0       	breq	.+4      	; 0x1ca0 <.L5^B1>
    1c9c:	96 e9       	ldi	r25, 0x96	; 150
    1c9e:	11 c0       	rjmp	.+34     	; 0x1cc2 <.L8^B1>

00001ca0 <.L5^B1>:
    1ca0:	77 23       	and	r23, r23
    1ca2:	21 f0       	breq	.+8      	; 0x1cac <.L6^B1>
    1ca4:	9e e8       	ldi	r25, 0x8E	; 142
    1ca6:	87 2f       	mov	r24, r23
    1ca8:	76 2f       	mov	r23, r22
    1caa:	05 c0       	rjmp	.+10     	; 0x1cb6 <.L7^B1>

00001cac <.L6^B1>:
    1cac:	66 23       	and	r22, r22
    1cae:	71 f0       	breq	.+28     	; 0x1ccc <.L9^B1>
    1cb0:	96 e8       	ldi	r25, 0x86	; 134
    1cb2:	86 2f       	mov	r24, r22
    1cb4:	70 e0       	ldi	r23, 0x00	; 0

00001cb6 <.L7^B1>:
    1cb6:	60 e0       	ldi	r22, 0x00	; 0
    1cb8:	2a f0       	brmi	.+10     	; 0x1cc4 <.L_pack>

00001cba <.L10^B1>:
    1cba:	9a 95       	dec	r25
    1cbc:	66 0f       	add	r22, r22
    1cbe:	77 1f       	adc	r23, r23
    1cc0:	88 1f       	adc	r24, r24

00001cc2 <.L8^B1>:
    1cc2:	da f7       	brpl	.-10     	; 0x1cba <.L10^B1>

00001cc4 <.L_pack>:
    1cc4:	88 0f       	add	r24, r24
    1cc6:	96 95       	lsr	r25
    1cc8:	87 95       	ror	r24
    1cca:	97 f9       	bld	r25, 7

00001ccc <.L9^B1>:
    1ccc:	08 95       	ret

00001cce <__fp_inf>:
    1cce:	97 f9       	bld	r25, 7
    1cd0:	9f 67       	ori	r25, 0x7F	; 127
    1cd2:	80 e8       	ldi	r24, 0x80	; 128
    1cd4:	70 e0       	ldi	r23, 0x00	; 0
    1cd6:	60 e0       	ldi	r22, 0x00	; 0
    1cd8:	08 95       	ret

00001cda <__fp_nan>:
    1cda:	9f ef       	ldi	r25, 0xFF	; 255
    1cdc:	80 ec       	ldi	r24, 0xC0	; 192
    1cde:	08 95       	ret

00001ce0 <__fp_pscA>:
    1ce0:	00 24       	eor	r0, r0
    1ce2:	0a 94       	dec	r0
    1ce4:	16 16       	cp	r1, r22
    1ce6:	17 06       	cpc	r1, r23
    1ce8:	18 06       	cpc	r1, r24
    1cea:	09 06       	cpc	r0, r25
    1cec:	08 95       	ret

00001cee <__fp_pscB>:
    1cee:	00 24       	eor	r0, r0
    1cf0:	0a 94       	dec	r0
    1cf2:	12 16       	cp	r1, r18
    1cf4:	13 06       	cpc	r1, r19
    1cf6:	14 06       	cpc	r1, r20
    1cf8:	05 06       	cpc	r0, r21
    1cfa:	08 95       	ret

00001cfc <__fp_round>:
    1cfc:	09 2e       	mov	r0, r25
    1cfe:	03 94       	inc	r0
    1d00:	00 0c       	add	r0, r0
    1d02:	11 f4       	brne	.+4      	; 0x1d08 <.L1^B1>
    1d04:	88 23       	and	r24, r24
    1d06:	52 f0       	brmi	.+20     	; 0x1d1c <.L3^B1>

00001d08 <.L1^B1>:
    1d08:	bb 0f       	add	r27, r27
    1d0a:	40 f4       	brcc	.+16     	; 0x1d1c <.L3^B1>
    1d0c:	bf 2b       	or	r27, r31
    1d0e:	11 f4       	brne	.+4      	; 0x1d14 <.L2^B1>
    1d10:	60 ff       	sbrs	r22, 0
    1d12:	04 c0       	rjmp	.+8      	; 0x1d1c <.L3^B1>

00001d14 <.L2^B1>:
    1d14:	6f 5f       	subi	r22, 0xFF	; 255
    1d16:	7f 4f       	sbci	r23, 0xFF	; 255
    1d18:	8f 4f       	sbci	r24, 0xFF	; 255
    1d1a:	9f 4f       	sbci	r25, 0xFF	; 255

00001d1c <.L3^B1>:
    1d1c:	08 95       	ret

00001d1e <__fp_split3>:
    1d1e:	57 fd       	sbrc	r21, 7
    1d20:	90 58       	subi	r25, 0x80	; 128
    1d22:	44 0f       	add	r20, r20
    1d24:	55 1f       	adc	r21, r21
    1d26:	59 f0       	breq	.+22     	; 0x1d3e <.L4^B1>
    1d28:	5f 3f       	cpi	r21, 0xFF	; 255
    1d2a:	71 f0       	breq	.+28     	; 0x1d48 <.L5^B1>

00001d2c <.L1^B1>:
    1d2c:	47 95       	ror	r20

00001d2e <__fp_splitA>:
    1d2e:	88 0f       	add	r24, r24
    1d30:	97 fb       	bst	r25, 7
    1d32:	99 1f       	adc	r25, r25
    1d34:	61 f0       	breq	.+24     	; 0x1d4e <.L6^B1>
    1d36:	9f 3f       	cpi	r25, 0xFF	; 255
    1d38:	79 f0       	breq	.+30     	; 0x1d58 <.L7^B1>

00001d3a <.L3^B1>:
    1d3a:	87 95       	ror	r24
    1d3c:	08 95       	ret

00001d3e <.L4^B1>:
    1d3e:	12 16       	cp	r1, r18
    1d40:	13 06       	cpc	r1, r19
    1d42:	14 06       	cpc	r1, r20
    1d44:	55 1f       	adc	r21, r21
    1d46:	f2 cf       	rjmp	.-28     	; 0x1d2c <.L1^B1>

00001d48 <.L5^B1>:
    1d48:	46 95       	lsr	r20
    1d4a:	f1 df       	rcall	.-30     	; 0x1d2e <__fp_splitA>
    1d4c:	08 c0       	rjmp	.+16     	; 0x1d5e <.L8^B1>

00001d4e <.L6^B1>:
    1d4e:	16 16       	cp	r1, r22
    1d50:	17 06       	cpc	r1, r23
    1d52:	18 06       	cpc	r1, r24
    1d54:	99 1f       	adc	r25, r25
    1d56:	f1 cf       	rjmp	.-30     	; 0x1d3a <.L3^B1>

00001d58 <.L7^B1>:
    1d58:	86 95       	lsr	r24
    1d5a:	71 05       	cpc	r23, r1
    1d5c:	61 05       	cpc	r22, r1

00001d5e <.L8^B1>:
    1d5e:	08 94       	sec
    1d60:	08 95       	ret

00001d62 <__fp_zero>:
    1d62:	e8 94       	clt

00001d64 <__fp_szero>:
    1d64:	bb 27       	eor	r27, r27
    1d66:	66 27       	eor	r22, r22
    1d68:	77 27       	eor	r23, r23
    1d6a:	cb 01       	movw	r24, r22
    1d6c:	97 f9       	bld	r25, 7
    1d6e:	08 95       	ret

00001d70 <__mulsf3>:
    1d70:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <__mulsf3x>
    1d74:	0c 94 7e 0e 	jmp	0x1cfc	; 0x1cfc <__fp_round>

00001d78 <.L^B1>:
    1d78:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <__fp_pscA>
    1d7c:	38 f0       	brcs	.+14     	; 0x1d8c <.L1^B1>
    1d7e:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__fp_pscB>
    1d82:	20 f0       	brcs	.+8      	; 0x1d8c <.L1^B1>
    1d84:	95 23       	and	r25, r21
    1d86:	11 f0       	breq	.+4      	; 0x1d8c <.L1^B1>
    1d88:	0c 94 67 0e 	jmp	0x1cce	; 0x1cce <__fp_inf>

00001d8c <.L1^B1>:
    1d8c:	0c 94 6d 0e 	jmp	0x1cda	; 0x1cda <__fp_nan>

00001d90 <.L2^B1>:
    1d90:	11 24       	eor	r1, r1
    1d92:	0c 94 b2 0e 	jmp	0x1d64	; 0x1d64 <__fp_szero>

00001d96 <__mulsf3x>:
    1d96:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <__fp_split3>
    1d9a:	70 f3       	brcs	.-36     	; 0x1d78 <.L^B1>

00001d9c <__mulsf3_pse>:
    1d9c:	95 9f       	mul	r25, r21
    1d9e:	c1 f3       	breq	.-16     	; 0x1d90 <.L2^B1>
    1da0:	95 0f       	add	r25, r21
    1da2:	50 e0       	ldi	r21, 0x00	; 0
    1da4:	55 1f       	adc	r21, r21
    1da6:	62 9f       	mul	r22, r18
    1da8:	f0 01       	movw	r30, r0
    1daa:	72 9f       	mul	r23, r18
    1dac:	bb 27       	eor	r27, r27
    1dae:	f0 0d       	add	r31, r0
    1db0:	b1 1d       	adc	r27, r1
    1db2:	63 9f       	mul	r22, r19
    1db4:	aa 27       	eor	r26, r26
    1db6:	f0 0d       	add	r31, r0
    1db8:	b1 1d       	adc	r27, r1
    1dba:	aa 1f       	adc	r26, r26
    1dbc:	64 9f       	mul	r22, r20
    1dbe:	66 27       	eor	r22, r22
    1dc0:	b0 0d       	add	r27, r0
    1dc2:	a1 1d       	adc	r26, r1
    1dc4:	66 1f       	adc	r22, r22
    1dc6:	82 9f       	mul	r24, r18
    1dc8:	22 27       	eor	r18, r18
    1dca:	b0 0d       	add	r27, r0
    1dcc:	a1 1d       	adc	r26, r1
    1dce:	62 1f       	adc	r22, r18
    1dd0:	73 9f       	mul	r23, r19
    1dd2:	b0 0d       	add	r27, r0
    1dd4:	a1 1d       	adc	r26, r1
    1dd6:	62 1f       	adc	r22, r18
    1dd8:	83 9f       	mul	r24, r19
    1dda:	a0 0d       	add	r26, r0
    1ddc:	61 1d       	adc	r22, r1
    1dde:	22 1f       	adc	r18, r18
    1de0:	74 9f       	mul	r23, r20
    1de2:	33 27       	eor	r19, r19
    1de4:	a0 0d       	add	r26, r0
    1de6:	61 1d       	adc	r22, r1
    1de8:	23 1f       	adc	r18, r19
    1dea:	84 9f       	mul	r24, r20
    1dec:	60 0d       	add	r22, r0
    1dee:	21 1d       	adc	r18, r1
    1df0:	82 2f       	mov	r24, r18
    1df2:	76 2f       	mov	r23, r22
    1df4:	6a 2f       	mov	r22, r26
    1df6:	11 24       	eor	r1, r1
    1df8:	9f 57       	subi	r25, 0x7F	; 127
    1dfa:	50 40       	sbci	r21, 0x00	; 0
    1dfc:	9a f0       	brmi	.+38     	; 0x1e24 <.L13^B1>
    1dfe:	f1 f0       	breq	.+60     	; 0x1e3c <.L15^B1>

00001e00 <.L10^B1>:
    1e00:	88 23       	and	r24, r24
    1e02:	4a f0       	brmi	.+18     	; 0x1e16 <.L11^B1>
    1e04:	ee 0f       	add	r30, r30
    1e06:	ff 1f       	adc	r31, r31
    1e08:	bb 1f       	adc	r27, r27
    1e0a:	66 1f       	adc	r22, r22
    1e0c:	77 1f       	adc	r23, r23
    1e0e:	88 1f       	adc	r24, r24
    1e10:	91 50       	subi	r25, 0x01	; 1
    1e12:	50 40       	sbci	r21, 0x00	; 0
    1e14:	a9 f7       	brne	.-22     	; 0x1e00 <.L10^B1>

00001e16 <.L11^B1>:
    1e16:	9e 3f       	cpi	r25, 0xFE	; 254
    1e18:	51 05       	cpc	r21, r1
    1e1a:	80 f0       	brcs	.+32     	; 0x1e3c <.L15^B1>
    1e1c:	0c 94 67 0e 	jmp	0x1cce	; 0x1cce <__fp_inf>

00001e20 <.L12^B1>:
    1e20:	0c 94 b2 0e 	jmp	0x1d64	; 0x1d64 <__fp_szero>

00001e24 <.L13^B1>:
    1e24:	5f 3f       	cpi	r21, 0xFF	; 255
    1e26:	e4 f3       	brlt	.-8      	; 0x1e20 <.L12^B1>
    1e28:	98 3e       	cpi	r25, 0xE8	; 232
    1e2a:	d4 f3       	brlt	.-12     	; 0x1e20 <.L12^B1>

00001e2c <.L14^B1>:
    1e2c:	86 95       	lsr	r24
    1e2e:	77 95       	ror	r23
    1e30:	67 95       	ror	r22
    1e32:	b7 95       	ror	r27
    1e34:	f7 95       	ror	r31
    1e36:	e7 95       	ror	r30
    1e38:	9f 5f       	subi	r25, 0xFF	; 255
    1e3a:	c1 f7       	brne	.-16     	; 0x1e2c <.L14^B1>

00001e3c <.L15^B1>:
    1e3c:	fe 2b       	or	r31, r30
    1e3e:	88 0f       	add	r24, r24
    1e40:	91 1d       	adc	r25, r1
    1e42:	96 95       	lsr	r25
    1e44:	87 95       	ror	r24
    1e46:	97 f9       	bld	r25, 7
    1e48:	08 95       	ret

00001e4a <do_rand>:
    1e4a:	cf 92       	push	r12
    1e4c:	df 92       	push	r13
    1e4e:	ef 92       	push	r14
    1e50:	ff 92       	push	r15
    1e52:	cf 93       	push	r28
    1e54:	df 93       	push	r29
    1e56:	cd b7       	in	r28, 0x3d	; 61
    1e58:	de b7       	in	r29, 0x3e	; 62
    1e5a:	2a 97       	sbiw	r28, 0x0a	; 10
    1e5c:	0f b6       	in	r0, 0x3f	; 63
    1e5e:	f8 94       	cli
    1e60:	de bf       	out	0x3e, r29	; 62
    1e62:	0f be       	out	0x3f, r0	; 63
    1e64:	cd bf       	out	0x3d, r28	; 61
    1e66:	89 87       	std	Y+9, r24	; 0x09
    1e68:	9a 87       	std	Y+10, r25	; 0x0a
    1e6a:	a9 85       	ldd	r26, Y+9	; 0x09
    1e6c:	ba 85       	ldd	r27, Y+10	; 0x0a
    1e6e:	2d 91       	ld	r18, X+
    1e70:	3d 91       	ld	r19, X+
    1e72:	4d 91       	ld	r20, X+
    1e74:	5c 91       	ld	r21, X
    1e76:	29 83       	std	Y+1, r18	; 0x01
    1e78:	3a 83       	std	Y+2, r19	; 0x02
    1e7a:	4b 83       	std	Y+3, r20	; 0x03
    1e7c:	5c 83       	std	Y+4, r21	; 0x04
    1e7e:	82 e4       	ldi	r24, 0x42	; 66
    1e80:	9e ec       	ldi	r25, 0xCE	; 206
    1e82:	ac e0       	ldi	r26, 0x0C	; 12
    1e84:	bf e1       	ldi	r27, 0x1F	; 31
    1e86:	21 15       	cp	r18, r1
    1e88:	31 05       	cpc	r19, r1
    1e8a:	41 05       	cpc	r20, r1
    1e8c:	51 05       	cpc	r21, r1
    1e8e:	49 f1       	breq	.+82     	; 0x1ee2 <.L2>
    1e90:	ca 01       	movw	r24, r20
    1e92:	b9 01       	movw	r22, r18
    1e94:	2d e1       	ldi	r18, 0x1D	; 29
    1e96:	33 ef       	ldi	r19, 0xF3	; 243
    1e98:	41 e0       	ldi	r20, 0x01	; 1
    1e9a:	50 e0       	ldi	r21, 0x00	; 0
    1e9c:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__divmodsi4>
    1ea0:	69 01       	movw	r12, r18
    1ea2:	7a 01       	movw	r14, r20
    1ea4:	a7 ea       	ldi	r26, 0xA7	; 167
    1ea6:	b1 e4       	ldi	r27, 0x41	; 65
    1ea8:	9b 01       	movw	r18, r22
    1eaa:	ac 01       	movw	r20, r24
    1eac:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__muluhisi3>
    1eb0:	69 83       	std	Y+1, r22	; 0x01
    1eb2:	7a 83       	std	Y+2, r23	; 0x02
    1eb4:	8b 83       	std	Y+3, r24	; 0x03
    1eb6:	9c 83       	std	Y+4, r25	; 0x04
    1eb8:	ac ee       	ldi	r26, 0xEC	; 236
    1eba:	b4 ef       	ldi	r27, 0xF4	; 244
    1ebc:	a7 01       	movw	r20, r14
    1ebe:	96 01       	movw	r18, r12
    1ec0:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <__mulohisi3>
    1ec4:	9b 01       	movw	r18, r22
    1ec6:	ac 01       	movw	r20, r24
    1ec8:	89 81       	ldd	r24, Y+1	; 0x01
    1eca:	9a 81       	ldd	r25, Y+2	; 0x02
    1ecc:	ab 81       	ldd	r26, Y+3	; 0x03
    1ece:	bc 81       	ldd	r27, Y+4	; 0x04
    1ed0:	82 0f       	add	r24, r18
    1ed2:	93 1f       	adc	r25, r19
    1ed4:	a4 1f       	adc	r26, r20
    1ed6:	b5 1f       	adc	r27, r21
    1ed8:	b7 ff       	sbrs	r27, 7
    1eda:	03 c0       	rjmp	.+6      	; 0x1ee2 <.L2>
    1edc:	01 97       	sbiw	r24, 0x01	; 1
    1ede:	a1 09       	sbc	r26, r1
    1ee0:	b0 48       	sbci	r27, 0x80	; 128

00001ee2 <.L2>:
    1ee2:	e9 85       	ldd	r30, Y+9	; 0x09
    1ee4:	fa 85       	ldd	r31, Y+10	; 0x0a
    1ee6:	80 83       	st	Z, r24
    1ee8:	91 83       	std	Z+1, r25	; 0x01
    1eea:	a2 83       	std	Z+2, r26	; 0x02
    1eec:	b3 83       	std	Z+3, r27	; 0x03
    1eee:	9f 77       	andi	r25, 0x7F	; 127
    1ef0:	2a 96       	adiw	r28, 0x0a	; 10
    1ef2:	0f b6       	in	r0, 0x3f	; 63
    1ef4:	f8 94       	cli
    1ef6:	de bf       	out	0x3e, r29	; 62
    1ef8:	0f be       	out	0x3f, r0	; 63
    1efa:	cd bf       	out	0x3d, r28	; 61
    1efc:	df 91       	pop	r29
    1efe:	cf 91       	pop	r28
    1f00:	ff 90       	pop	r15
    1f02:	ef 90       	pop	r14
    1f04:	df 90       	pop	r13
    1f06:	cf 90       	pop	r12
    1f08:	08 95       	ret

00001f0a <rand_r>:
    1f0a:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <do_rand>
    1f0e:	08 95       	ret

00001f10 <rand>:
    1f10:	87 e0       	ldi	r24, 0x07	; 7
    1f12:	91 e0       	ldi	r25, 0x01	; 1
    1f14:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <do_rand>
    1f18:	08 95       	ret

00001f1a <srand>:
    1f1a:	a0 e0       	ldi	r26, 0x00	; 0
    1f1c:	b0 e0       	ldi	r27, 0x00	; 0
    1f1e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <next>
    1f22:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <next+0x1>
    1f26:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <next+0x2>
    1f2a:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <next+0x3>
    1f2e:	08 95       	ret

00001f30 <eeprom_read_byte>:
    1f30:	f9 99       	sbic	0x1f, 1	; 31
    1f32:	fe cf       	rjmp	.-4      	; 0x1f30 <eeprom_read_byte>
    1f34:	92 bd       	out	0x22, r25	; 34
    1f36:	81 bd       	out	0x21, r24	; 33
    1f38:	f8 9a       	sbi	0x1f, 0	; 31
    1f3a:	99 27       	eor	r25, r25
    1f3c:	80 b5       	in	r24, 0x20	; 32
    1f3e:	08 95       	ret

00001f40 <eeprom_write_byte>:
    1f40:	26 2f       	mov	r18, r22

00001f42 <eeprom_write_r18>:
    1f42:	f9 99       	sbic	0x1f, 1	; 31
    1f44:	fe cf       	rjmp	.-4      	; 0x1f42 <eeprom_write_r18>
    1f46:	1f ba       	out	0x1f, r1	; 31
    1f48:	92 bd       	out	0x22, r25	; 34
    1f4a:	81 bd       	out	0x21, r24	; 33
    1f4c:	20 bd       	out	0x20, r18	; 32
    1f4e:	0f b6       	in	r0, 0x3f	; 63
    1f50:	f8 94       	cli
    1f52:	fa 9a       	sbi	0x1f, 2	; 31
    1f54:	f9 9a       	sbi	0x1f, 1	; 31
    1f56:	0f be       	out	0x3f, r0	; 63
    1f58:	01 96       	adiw	r24, 0x01	; 1
    1f5a:	08 95       	ret

00001f5c <__divmodsi4>:
    1f5c:	05 2e       	mov	r0, r21

00001f5e <.Loc.1>:
    1f5e:	97 fb       	bst	r25, 7

00001f60 <.Loc.2>:
    1f60:	1e f4       	brtc	.+6      	; 0x1f68 <.L^B1>

00001f62 <.Loc.3>:
    1f62:	00 94       	com	r0

00001f64 <.Loc.4>:
    1f64:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__negsi2>

00001f68 <.L^B1>:
    1f68:	57 fd       	sbrc	r21, 7

00001f6a <.Loc.6>:
    1f6a:	07 d0       	rcall	.+14     	; 0x1f7a <__divmodsi4_neg2>

00001f6c <.Loc.7>:
    1f6c:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__udivmodsi4>

00001f70 <.Loc.8>:
    1f70:	07 fc       	sbrc	r0, 7

00001f72 <.Loc.9>:
    1f72:	03 d0       	rcall	.+6      	; 0x1f7a <__divmodsi4_neg2>

00001f74 <.Loc.10>:
    1f74:	4e f4       	brtc	.+18     	; 0x1f88 <__divmodsi4_exit>

00001f76 <.Loc.11>:
    1f76:	0c 94 c5 0f 	jmp	0x1f8a	; 0x1f8a <__negsi2>

00001f7a <__divmodsi4_neg2>:
    1f7a:	50 95       	com	r21

00001f7c <.Loc.13>:
    1f7c:	40 95       	com	r20

00001f7e <.Loc.14>:
    1f7e:	30 95       	com	r19

00001f80 <.Loc.15>:
    1f80:	21 95       	neg	r18

00001f82 <.Loc.16>:
    1f82:	3f 4f       	sbci	r19, 0xFF	; 255

00001f84 <.Loc.17>:
    1f84:	4f 4f       	sbci	r20, 0xFF	; 255

00001f86 <.Loc.18>:
    1f86:	5f 4f       	sbci	r21, 0xFF	; 255

00001f88 <__divmodsi4_exit>:
    1f88:	08 95       	ret

00001f8a <__negsi2>:
    1f8a:	90 95       	com	r25
    1f8c:	80 95       	com	r24
    1f8e:	70 95       	com	r23
    1f90:	61 95       	neg	r22
    1f92:	7f 4f       	sbci	r23, 0xFF	; 255
    1f94:	8f 4f       	sbci	r24, 0xFF	; 255
    1f96:	9f 4f       	sbci	r25, 0xFF	; 255

00001f98 <.Loc.1>:
    1f98:	08 95       	ret

00001f9a <__muluhisi3>:
    1f9a:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <__umulhisi3>

00001f9e <.Loc.1>:
    1f9e:	a5 9f       	mul	r26, r21

00001fa0 <.Loc.2>:
    1fa0:	90 0d       	add	r25, r0

00001fa2 <.Loc.3>:
    1fa2:	b4 9f       	mul	r27, r20

00001fa4 <.Loc.4>:
    1fa4:	90 0d       	add	r25, r0

00001fa6 <.Loc.5>:
    1fa6:	a4 9f       	mul	r26, r20

00001fa8 <.Loc.6>:
    1fa8:	80 0d       	add	r24, r0

00001faa <.Loc.7>:
    1faa:	91 1d       	adc	r25, r1

00001fac <.Loc.8>:
    1fac:	11 24       	eor	r1, r1

00001fae <.Loc.9>:
    1fae:	08 95       	ret

00001fb0 <__mulshisi3>:
    1fb0:	b7 ff       	sbrs	r27, 7

00001fb2 <.Loc.1>:
    1fb2:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__muluhisi3>

00001fb6 <__mulohisi3>:
    1fb6:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__muluhisi3>

00001fba <.Loc.3>:
    1fba:	82 1b       	sub	r24, r18

00001fbc <.Loc.4>:
    1fbc:	93 0b       	sbc	r25, r19

00001fbe <.Loc.5>:
    1fbe:	08 95       	ret

00001fc0 <__udivmodsi4>:
    1fc0:	a1 e2       	ldi	r26, 0x21	; 33

00001fc2 <.Loc.1>:
    1fc2:	1a 2e       	mov	r1, r26

00001fc4 <.Loc.2>:
    1fc4:	aa 1b       	sub	r26, r26

00001fc6 <.Loc.3>:
    1fc6:	bb 1b       	sub	r27, r27

00001fc8 <.Loc.4>:
    1fc8:	fd 01       	movw	r30, r26

00001fca <.Loc.5>:
    1fca:	0d c0       	rjmp	.+26     	; 0x1fe6 <__udivmodsi4_ep>

00001fcc <__udivmodsi4_loop>:
    1fcc:	aa 1f       	adc	r26, r26

00001fce <.Loc.7>:
    1fce:	bb 1f       	adc	r27, r27

00001fd0 <.Loc.8>:
    1fd0:	ee 1f       	adc	r30, r30

00001fd2 <.Loc.9>:
    1fd2:	ff 1f       	adc	r31, r31

00001fd4 <.Loc.10>:
    1fd4:	a2 17       	cp	r26, r18

00001fd6 <.Loc.11>:
    1fd6:	b3 07       	cpc	r27, r19

00001fd8 <.Loc.12>:
    1fd8:	e4 07       	cpc	r30, r20

00001fda <.Loc.13>:
    1fda:	f5 07       	cpc	r31, r21

00001fdc <.Loc.14>:
    1fdc:	20 f0       	brcs	.+8      	; 0x1fe6 <__udivmodsi4_ep>

00001fde <.Loc.15>:
    1fde:	a2 1b       	sub	r26, r18

00001fe0 <.Loc.16>:
    1fe0:	b3 0b       	sbc	r27, r19

00001fe2 <.Loc.17>:
    1fe2:	e4 0b       	sbc	r30, r20

00001fe4 <.Loc.18>:
    1fe4:	f5 0b       	sbc	r31, r21

00001fe6 <__udivmodsi4_ep>:
    1fe6:	66 1f       	adc	r22, r22

00001fe8 <.Loc.20>:
    1fe8:	77 1f       	adc	r23, r23

00001fea <.Loc.21>:
    1fea:	88 1f       	adc	r24, r24

00001fec <.Loc.22>:
    1fec:	99 1f       	adc	r25, r25

00001fee <.Loc.23>:
    1fee:	1a 94       	dec	r1

00001ff0 <.Loc.24>:
    1ff0:	69 f7       	brne	.-38     	; 0x1fcc <__udivmodsi4_loop>

00001ff2 <.Loc.25>:
    1ff2:	60 95       	com	r22

00001ff4 <.Loc.26>:
    1ff4:	70 95       	com	r23

00001ff6 <.Loc.27>:
    1ff6:	80 95       	com	r24

00001ff8 <.Loc.28>:
    1ff8:	90 95       	com	r25

00001ffa <.Loc.29>:
    1ffa:	9b 01       	movw	r18, r22

00001ffc <.Loc.30>:
    1ffc:	ac 01       	movw	r20, r24

00001ffe <.Loc.31>:
    1ffe:	bd 01       	movw	r22, r26

00002000 <.Loc.32>:
    2000:	cf 01       	movw	r24, r30

00002002 <.Loc.33>:
    2002:	08 95       	ret

00002004 <_exit>:
    2004:	f8 94       	cli

00002006 <__stop_program>:
    2006:	ff cf       	rjmp	.-2      	; 0x2006 <__stop_program>

00002008 <L0^A>:
    2008:	ba 02       	muls	r27, r26
    200a:	9e 02       	muls	r25, r30
    200c:	72 02       	muls	r23, r18
    200e:	68 02       	muls	r22, r24
    2010:	6f 02       	muls	r22, r31
    2012:	18 03       	fmul	r17, r16
    2014:	0d 03       	fmul	r16, r21

00002016 <.L181>:
    2016:	4e 0b       	sbc	r20, r30
    2018:	da 09       	sbc	r29, r10
    201a:	da 09       	sbc	r29, r10
    201c:	4b 0b       	sbc	r20, r27
    201e:	ee 0a       	sbc	r14, r30
    2020:	ea 0a       	sbc	r14, r26
    2022:	e6 0a       	sbc	r14, r22
    2024:	e2 0a       	sbc	r14, r18
    2026:	f1 0a       	sbc	r15, r17
    2028:	b5 0a       	sbc	r11, r21
    202a:	92 0a       	sbc	r9, r18
