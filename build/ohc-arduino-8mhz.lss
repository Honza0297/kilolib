
build/ohc-arduino-8mhz.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	22 e0       	ldi	r18, 0x02	; 2

00000076 <.Loc.1>:
  76:	a0 e0       	ldi	r26, 0x00	; 0

00000078 <.Loc.2>:
  78:	b1 e0       	ldi	r27, 0x01	; 1

0000007a <.Loc.3>:
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.Loc.5>

0000007c <.Loc.4>:
  7c:	1d 92       	st	X+, r1

0000007e <.Loc.5>:
  7e:	a0 32       	cpi	r26, 0x20	; 32

00000080 <.Loc.6>:
  80:	b2 07       	cpc	r27, r18

00000082 <.Loc.7>:
  82:	e1 f7       	brne	.-8      	; 0x7c <.Loc.4>

00000084 <L0^A>:
  84:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <main>
  88:	0c 94 2c 04 	jmp	0x858	; 0x858 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_18>:
    }

    return 0;
}

ISR(USART_RX_vect) {
  90:	1f 92       	push	r1

00000092 <.LCFI0>:
  92:	0f 92       	push	r0

00000094 <.LCFI1>:
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	0f 93       	push	r16

0000009c <.LCFI2>:
  9c:	1f 93       	push	r17

0000009e <.LCFI3>:
  9e:	2f 93       	push	r18

000000a0 <.LCFI4>:
  a0:	3f 93       	push	r19

000000a2 <.LCFI5>:
  a2:	4f 93       	push	r20

000000a4 <.LCFI6>:
  a4:	5f 93       	push	r21

000000a6 <.LCFI7>:
  a6:	6f 93       	push	r22

000000a8 <.LCFI8>:
  a8:	7f 93       	push	r23

000000aa <.LCFI9>:
  aa:	8f 93       	push	r24

000000ac <.LCFI10>:
  ac:	9f 93       	push	r25

000000ae <.LCFI11>:
  ae:	af 93       	push	r26

000000b0 <.LCFI12>:
  b0:	bf 93       	push	r27

000000b2 <.LCFI13>:
  b2:	cf 93       	push	r28

000000b4 <.LCFI14>:
  b4:	df 93       	push	r29

000000b6 <.LCFI15>:
  b6:	ef 93       	push	r30

000000b8 <.LCFI16>:
  b8:	ff 93       	push	r31

000000ba <.LCFI17>:
    uint8_t rx = UDR0;
  ba:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

000000be <.LVL95>:

    packet_checksum ^= packet_buffer[packet_head];
  be:	60 91 9b 01 	lds	r22, 0x019B	; 0x80019b <packet_head>
  c2:	e6 2f       	mov	r30, r22
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	e4 56       	subi	r30, 0x64	; 100
  c8:	fe 4f       	sbci	r31, 0xFE	; 254

000000ca <.Loc.532>:
  ca:	80 81       	ld	r24, Z
  cc:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <packet_checksum>
  d0:	82 27       	eor	r24, r18

000000d2 <.Loc.533>:
    packet_buffer[packet_head] = rx;
    packet_checksum ^= rx;
  d2:	28 2f       	mov	r18, r24
  d4:	29 27       	eor	r18, r25

000000d6 <.Loc.536>:
    packet_head++;
  d6:	6f 5f       	subi	r22, 0xFF	; 255

000000d8 <.Loc.538>:
    if (packet_head >= PACKET_SIZE)
  d8:	64 38       	cpi	r22, 0x84	; 132
  da:	18 f5       	brcc	.+70     	; 0x122 <.L50>

000000dc <.Loc.540>:
        packet_head = 0;

    if (packet_buffer[packet_head] == PACKET_HEADER) {
  dc:	c6 2f       	mov	r28, r22
  de:	d0 e0       	ldi	r29, 0x00	; 0
  e0:	36 2f       	mov	r19, r22

000000e2 <.L47>:
    packet_buffer[packet_head] = rx;
  e2:	90 83       	st	Z, r25

000000e4 <.Loc.542>:
    packet_checksum ^= rx;
  e4:	20 93 9a 01 	sts	0x019A, r18	; 0x80019a <packet_checksum>

000000e8 <.Loc.543>:
    packet_head++;
  e8:	30 93 9b 01 	sts	0x019B, r19	; 0x80019b <packet_head>

000000ec <.Loc.544>:
    if (packet_buffer[packet_head] == PACKET_HEADER) {
  ec:	fe 01       	movw	r30, r28
  ee:	e4 56       	subi	r30, 0x64	; 100
  f0:	fe 4f       	sbci	r31, 0xFE	; 254

000000f2 <.Loc.546>:
  f2:	20 81       	ld	r18, Z
  f4:	25 35       	cpi	r18, 0x55	; 85
  f6:	d1 f0       	breq	.+52     	; 0x12c <.L54>

000000f8 <.L46>:
                new_packet[i] = packet_buffer[i-num];
            has_new_packet = 1;
            packet_type = new_packet[1];
        }
    }
}
  f8:	ff 91       	pop	r31
  fa:	ef 91       	pop	r30
  fc:	df 91       	pop	r29
  fe:	cf 91       	pop	r28
 100:	bf 91       	pop	r27
 102:	af 91       	pop	r26
 104:	9f 91       	pop	r25
 106:	8f 91       	pop	r24
 108:	7f 91       	pop	r23
 10a:	6f 91       	pop	r22
 10c:	5f 91       	pop	r21
 10e:	4f 91       	pop	r20
 110:	3f 91       	pop	r19
 112:	2f 91       	pop	r18
 114:	1f 91       	pop	r17
 116:	0f 91       	pop	r16
 118:	0f 90       	pop	r0
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	0f 90       	pop	r0
 11e:	1f 90       	pop	r1
 120:	18 95       	reti

00000122 <.L50>:
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	c0 e0       	ldi	r28, 0x00	; 0
 126:	d0 e0       	ldi	r29, 0x00	; 0
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	db cf       	rjmp	.-74     	; 0xe2 <.L47>

0000012c <.L54>:
        if (packet_checksum == 0) {
 12c:	89 13       	cpse	r24, r25
 12e:	e4 cf       	rjmp	.-56     	; 0xf8 <.L46>

00000130 <.LBB70>:
            uint16_t num = PACKET_SIZE-packet_head;
 130:	04 e8       	ldi	r16, 0x84	; 132
 132:	10 e0       	ldi	r17, 0x00	; 0
 134:	0c 1b       	sub	r16, r28
 136:	1d 0b       	sbc	r17, r29

00000138 <.LVL98>:
                new_packet[i] = packet_buffer[i+packet_head];
 138:	70 e0       	ldi	r23, 0x00	; 0

0000013a <.Loc.557>:
 13a:	64 56       	subi	r22, 0x64	; 100
 13c:	7e 4f       	sbci	r23, 0xFE	; 254
 13e:	a8 01       	movw	r20, r16
 140:	86 e1       	ldi	r24, 0x16	; 22
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	0e 94 23 04 	call	0x846	; 0x846 <memcpy>

00000148 <.LVL99>:
            for (i = num; i < PACKET_SIZE; i++)
 148:	04 38       	cpi	r16, 0x84	; 132
 14a:	11 05       	cpc	r17, r1
 14c:	41 f0       	breq	.+16     	; 0x15e <.L49>

0000014e <.LVL100>:
                new_packet[i] = packet_buffer[i-num];
 14e:	ae 01       	movw	r20, r28
 150:	6c e9       	ldi	r22, 0x9C	; 156
 152:	71 e0       	ldi	r23, 0x01	; 1
 154:	c8 01       	movw	r24, r16
 156:	8a 5e       	subi	r24, 0xEA	; 234
 158:	9e 4f       	sbci	r25, 0xFE	; 254
 15a:	0e 94 23 04 	call	0x846	; 0x846 <memcpy>

0000015e <.L49>:
            has_new_packet = 1;
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <has_new_packet>

00000164 <.Loc.562>:
            packet_type = new_packet[1];
 164:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <new_packet+0x1>

00000168 <.Loc.564>:
 168:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <packet_type>

0000016c <.LBE70>:
}
 16c:	c5 cf       	rjmp	.-118    	; 0xf8 <.L46>

0000016e <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
 16e:	fc 01       	movw	r30, r24

00000170 <.LBB4>:
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
 170:	20 81       	ld	r18, Z
 172:	8f ef       	ldi	r24, 0xFF	; 255
 174:	9f ef       	ldi	r25, 0xFF	; 255

00000176 <.LVL2>:
 176:	82 27       	eor	r24, r18
 178:	08 2e       	mov	r0, r24
 17a:	82 95       	swap	r24
 17c:	80 7f       	andi	r24, 0xF0	; 240
 17e:	80 25       	eor	r24, r0
 180:	09 2e       	mov	r0, r25
 182:	98 2f       	mov	r25, r24
 184:	82 95       	swap	r24
 186:	8f 70       	andi	r24, 0x0F	; 15
 188:	08 26       	eor	r0, r24
 18a:	86 95       	lsr	r24
 18c:	98 27       	eor	r25, r24
 18e:	89 27       	eor	r24, r25
 190:	88 0f       	add	r24, r24
 192:	88 0f       	add	r24, r24
 194:	88 0f       	add	r24, r24
 196:	80 25       	eor	r24, r0

00000198 <.LBB15>:
 198:	21 81       	ldd	r18, Z+1	; 0x01
 19a:	82 27       	eor	r24, r18
 19c:	08 2e       	mov	r0, r24
 19e:	82 95       	swap	r24
 1a0:	80 7f       	andi	r24, 0xF0	; 240
 1a2:	80 25       	eor	r24, r0
 1a4:	09 2e       	mov	r0, r25
 1a6:	98 2f       	mov	r25, r24
 1a8:	82 95       	swap	r24
 1aa:	8f 70       	andi	r24, 0x0F	; 15
 1ac:	08 26       	eor	r0, r24
 1ae:	86 95       	lsr	r24
 1b0:	98 27       	eor	r25, r24
 1b2:	89 27       	eor	r24, r25
 1b4:	88 0f       	add	r24, r24
 1b6:	88 0f       	add	r24, r24
 1b8:	88 0f       	add	r24, r24
 1ba:	80 25       	eor	r24, r0

000001bc <.LBB16>:
 1bc:	22 81       	ldd	r18, Z+2	; 0x02
 1be:	82 27       	eor	r24, r18
 1c0:	08 2e       	mov	r0, r24
 1c2:	82 95       	swap	r24
 1c4:	80 7f       	andi	r24, 0xF0	; 240
 1c6:	80 25       	eor	r24, r0
 1c8:	09 2e       	mov	r0, r25
 1ca:	98 2f       	mov	r25, r24
 1cc:	82 95       	swap	r24
 1ce:	8f 70       	andi	r24, 0x0F	; 15
 1d0:	08 26       	eor	r0, r24
 1d2:	86 95       	lsr	r24
 1d4:	98 27       	eor	r25, r24
 1d6:	89 27       	eor	r24, r25
 1d8:	88 0f       	add	r24, r24
 1da:	88 0f       	add	r24, r24
 1dc:	88 0f       	add	r24, r24
 1de:	80 25       	eor	r24, r0

000001e0 <.LBB17>:
 1e0:	23 81       	ldd	r18, Z+3	; 0x03
 1e2:	82 27       	eor	r24, r18
 1e4:	08 2e       	mov	r0, r24
 1e6:	82 95       	swap	r24
 1e8:	80 7f       	andi	r24, 0xF0	; 240
 1ea:	80 25       	eor	r24, r0
 1ec:	09 2e       	mov	r0, r25
 1ee:	98 2f       	mov	r25, r24
 1f0:	82 95       	swap	r24
 1f2:	8f 70       	andi	r24, 0x0F	; 15
 1f4:	08 26       	eor	r0, r24
 1f6:	86 95       	lsr	r24
 1f8:	98 27       	eor	r25, r24
 1fa:	89 27       	eor	r24, r25
 1fc:	88 0f       	add	r24, r24
 1fe:	88 0f       	add	r24, r24
 200:	88 0f       	add	r24, r24
 202:	80 25       	eor	r24, r0

00000204 <.LBB18>:
 204:	24 81       	ldd	r18, Z+4	; 0x04
 206:	82 27       	eor	r24, r18
 208:	08 2e       	mov	r0, r24
 20a:	82 95       	swap	r24
 20c:	80 7f       	andi	r24, 0xF0	; 240
 20e:	80 25       	eor	r24, r0
 210:	09 2e       	mov	r0, r25
 212:	98 2f       	mov	r25, r24
 214:	82 95       	swap	r24
 216:	8f 70       	andi	r24, 0x0F	; 15
 218:	08 26       	eor	r0, r24
 21a:	86 95       	lsr	r24
 21c:	98 27       	eor	r25, r24
 21e:	89 27       	eor	r24, r25
 220:	88 0f       	add	r24, r24
 222:	88 0f       	add	r24, r24
 224:	88 0f       	add	r24, r24
 226:	80 25       	eor	r24, r0

00000228 <.LBB19>:
 228:	25 81       	ldd	r18, Z+5	; 0x05
 22a:	82 27       	eor	r24, r18
 22c:	08 2e       	mov	r0, r24
 22e:	82 95       	swap	r24
 230:	80 7f       	andi	r24, 0xF0	; 240
 232:	80 25       	eor	r24, r0
 234:	09 2e       	mov	r0, r25
 236:	98 2f       	mov	r25, r24
 238:	82 95       	swap	r24
 23a:	8f 70       	andi	r24, 0x0F	; 15
 23c:	08 26       	eor	r0, r24
 23e:	86 95       	lsr	r24
 240:	98 27       	eor	r25, r24
 242:	89 27       	eor	r24, r25
 244:	88 0f       	add	r24, r24
 246:	88 0f       	add	r24, r24
 248:	88 0f       	add	r24, r24
 24a:	80 25       	eor	r24, r0

0000024c <.LBB20>:
 24c:	26 81       	ldd	r18, Z+6	; 0x06
 24e:	82 27       	eor	r24, r18
 250:	08 2e       	mov	r0, r24
 252:	82 95       	swap	r24
 254:	80 7f       	andi	r24, 0xF0	; 240
 256:	80 25       	eor	r24, r0
 258:	09 2e       	mov	r0, r25
 25a:	98 2f       	mov	r25, r24
 25c:	82 95       	swap	r24
 25e:	8f 70       	andi	r24, 0x0F	; 15
 260:	08 26       	eor	r0, r24
 262:	86 95       	lsr	r24
 264:	98 27       	eor	r25, r24
 266:	89 27       	eor	r24, r25
 268:	88 0f       	add	r24, r24
 26a:	88 0f       	add	r24, r24
 26c:	88 0f       	add	r24, r24
 26e:	80 25       	eor	r24, r0

00000270 <.LBB21>:
 270:	27 81       	ldd	r18, Z+7	; 0x07
 272:	82 27       	eor	r24, r18
 274:	08 2e       	mov	r0, r24
 276:	82 95       	swap	r24
 278:	80 7f       	andi	r24, 0xF0	; 240
 27a:	80 25       	eor	r24, r0
 27c:	09 2e       	mov	r0, r25
 27e:	98 2f       	mov	r25, r24
 280:	82 95       	swap	r24
 282:	8f 70       	andi	r24, 0x0F	; 15
 284:	08 26       	eor	r0, r24
 286:	86 95       	lsr	r24
 288:	98 27       	eor	r25, r24
 28a:	89 27       	eor	r24, r25
 28c:	88 0f       	add	r24, r24
 28e:	88 0f       	add	r24, r24
 290:	88 0f       	add	r24, r24
 292:	80 25       	eor	r24, r0

00000294 <.LBB22>:
 294:	20 85       	ldd	r18, Z+8	; 0x08
 296:	82 27       	eor	r24, r18
 298:	08 2e       	mov	r0, r24
 29a:	82 95       	swap	r24
 29c:	80 7f       	andi	r24, 0xF0	; 240
 29e:	80 25       	eor	r24, r0
 2a0:	09 2e       	mov	r0, r25
 2a2:	98 2f       	mov	r25, r24
 2a4:	82 95       	swap	r24
 2a6:	8f 70       	andi	r24, 0x0F	; 15
 2a8:	08 26       	eor	r0, r24
 2aa:	86 95       	lsr	r24
 2ac:	98 27       	eor	r25, r24
 2ae:	89 27       	eor	r24, r25
 2b0:	88 0f       	add	r24, r24
 2b2:	88 0f       	add	r24, r24
 2b4:	88 0f       	add	r24, r24
 2b6:	80 25       	eor	r24, r0

000002b8 <.LBB23>:
 2b8:	21 85       	ldd	r18, Z+9	; 0x09
 2ba:	82 27       	eor	r24, r18
 2bc:	08 2e       	mov	r0, r24
 2be:	82 95       	swap	r24
 2c0:	80 7f       	andi	r24, 0xF0	; 240
 2c2:	80 25       	eor	r24, r0
 2c4:	09 2e       	mov	r0, r25
 2c6:	98 2f       	mov	r25, r24
 2c8:	82 95       	swap	r24
 2ca:	8f 70       	andi	r24, 0x0F	; 15
 2cc:	08 26       	eor	r0, r24
 2ce:	86 95       	lsr	r24
 2d0:	98 27       	eor	r25, r24
 2d2:	89 27       	eor	r24, r25
 2d4:	88 0f       	add	r24, r24
 2d6:	88 0f       	add	r24, r24
 2d8:	88 0f       	add	r24, r24
 2da:	80 25       	eor	r24, r0

000002dc <.LBE23>:
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
 2dc:	08 95       	ret

000002de <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
 2de:	0f b6       	in	r0, 0x3f	; 63

000002e0 <.Loc.1>:
#ifndef OHC
    cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
 2e0:	a4 b1       	in	r26, 0x04	; 4

000002e2 <.Loc.2>:

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
 2e2:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <tx_mask>

000002e6 <.Loc.3>:
    or tmpreg1, ddrreg
 2e6:	2a 2b       	or	r18, r26

000002e8 <.Loc.4>:
    out IR_DDR, tmpreg1
 2e8:	24 b9       	out	0x04, r18	; 4

000002ea <.Loc.5>:

    ldi tmpreg1, 0x01
 2ea:	21 e0       	ldi	r18, 0x01	; 1

000002ec <.Loc.6>:
    irsend
 2ec:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <tx_mask>
 2f0:	20 30       	cpi	r18, 0x00	; 0
 2f2:	29 f0       	breq	.+10     	; 0x2fe <.L1^B1>
 2f4:	00 00       	nop
 2f6:	25 b1       	in	r18, 0x05	; 5
 2f8:	23 2b       	or	r18, r19
 2fa:	25 b9       	out	0x05, r18	; 5
 2fc:	04 c0       	rjmp	.+8      	; 0x306 <.L2^B1>

000002fe <.L1^B1>:
 2fe:	00 00       	nop
 300:	00 00       	nop
 302:	00 00       	nop
 304:	00 c0       	rjmp	.+0      	; 0x306 <.L2^B1>

00000306 <.L2^B1>:
 306:	00 00       	nop
 308:	00 00       	nop
 30a:	00 00       	nop
 30c:	30 95       	com	r19
 30e:	25 b1       	in	r18, 0x05	; 5
 310:	23 23       	and	r18, r19
 312:	25 b9       	out	0x05, r18	; 5

00000314 <.Loc.7>:
    delay_cycles (2*rx_bitcycles-irsend_cycles)
 314:	2e ea       	ldi	r18, 0xAE	; 174

00000316 <.L1^B2>:
 316:	2a 95       	dec	r18
 318:	f1 f7       	brne	.-4      	; 0x316 <.L1^B2>

0000031a <.Loc.8>:

    ldi tmpreg1, rx_bitcycles*7/8
 31a:	2b ee       	ldi	r18, 0xEB	; 235

0000031c <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
 31c:	30 b7       	in	r19, 0x30	; 48

0000031e <.Loc.10>:
    sbrs tmpreg2, ACO
 31e:	35 ff       	sbrs	r19, 5

00000320 <.Loc.11>:
    rjmp nocollision
 320:	0a c0       	rjmp	.+20     	; 0x336 <nocollision>

00000322 <.Loc.12>:
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
 322:	a4 b9       	out	0x04, r26	; 4

00000324 <.Loc.13>:
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
 324:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <tx_mask>

00000328 <.Loc.14>:
    com tmpreg2
 328:	30 95       	com	r19

0000032a <.Loc.15>:
    in tmpreg1, IR_PORT
 32a:	25 b1       	in	r18, 0x05	; 5

0000032c <.Loc.16>:
    and tmpreg1, tmpreg2
 32c:	23 23       	and	r18, r19

0000032e <.Loc.17>:
    out IR_PORT, tmpreg1
 32e:	25 b9       	out	0x05, r18	; 5

00000330 <.Loc.18>:
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
 330:	0f be       	out	0x3f, r0	; 63

00000332 <.Loc.19>:
    return 0
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	08 95       	ret

00000336 <nocollision>:
	...

00000338 <.Loc.21>:
nocollision:
    nop
    dec tmpreg1
 338:	2a 95       	dec	r18

0000033a <.Loc.22>:
    brne checkcollision
 33a:	81 f7       	brne	.-32     	; 0x31c <checkcollision>

0000033c <.Loc.23>:

    ldi tmpreg1, 0x01
 33c:	21 e0       	ldi	r18, 0x01	; 1

0000033e <.Loc.24>:
    irsend
 33e:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <tx_mask>
 342:	20 30       	cpi	r18, 0x00	; 0
 344:	29 f0       	breq	.+10     	; 0x350 <.L1^B3>
 346:	00 00       	nop
 348:	25 b1       	in	r18, 0x05	; 5
 34a:	23 2b       	or	r18, r19
 34c:	25 b9       	out	0x05, r18	; 5
 34e:	04 c0       	rjmp	.+8      	; 0x358 <.L2^B2>

00000350 <.L1^B3>:
 350:	00 00       	nop
 352:	00 00       	nop
 354:	00 00       	nop
 356:	00 c0       	rjmp	.+0      	; 0x358 <.L2^B2>

00000358 <.L2^B2>:
 358:	00 00       	nop
 35a:	00 00       	nop
 35c:	00 00       	nop
 35e:	30 95       	com	r19
 360:	25 b1       	in	r18, 0x05	; 5
 362:	23 23       	and	r18, r19
 364:	25 b9       	out	0x05, r18	; 5

00000366 <.Loc.25>:
    delay_cycles (rx_bitcycles-irsend_cycles)
 366:	00 00       	nop
 368:	24 e5       	ldi	r18, 0x54	; 84

0000036a <.L1^B4>:
 36a:	2a 95       	dec	r18
 36c:	f1 f7       	brne	.-4      	; 0x36a <.L1^B4>

0000036e <.Loc.26>:

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
 36e:	fc 01       	movw	r30, r24

00000370 <.Loc.27>:
    ldi byteidx, 12
 370:	8c e0       	ldi	r24, 0x0C	; 12

00000372 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
 372:	61 91       	ld	r22, Z+

00000374 <.Loc.29>:
    ldi bytevalH, 0x00
 374:	70 e0       	ldi	r23, 0x00	; 0

00000376 <.Loc.30>:
    add bytevalL, bytevalL
 376:	66 0f       	add	r22, r22

00000378 <.Loc.31>:
    adc bytevalH, bytevalH
 378:	77 1f       	adc	r23, r23

0000037a <.Loc.32>:
    ori bytevalL, 0x01
 37a:	61 60       	ori	r22, 0x01	; 1

0000037c <.Loc.33>:
    ori bytevalH, 0x02
 37c:	72 60       	ori	r23, 0x02	; 2

0000037e <.Loc.34>:
    ; bitidex = 10
    ldi bitidx, 10
 37e:	9a e0       	ldi	r25, 0x0A	; 10

00000380 <.Loc.35>:
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
 380:	41 e0       	ldi	r20, 0x01	; 1

00000382 <.Loc.36>:
    ldi bitmaskH, 0x00
 382:	50 e0       	ldi	r21, 0x00	; 0

00000384 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
 384:	9a 01       	movw	r18, r20

00000386 <.Loc.38>:
    and tmpreg1, bytevalL
 386:	26 23       	and	r18, r22

00000388 <.Loc.39>:
    and tmpreg2, bytevalH
 388:	37 23       	and	r19, r23

0000038a <.Loc.40>:
    or  tmpreg1, tmpreg2
 38a:	23 2b       	or	r18, r19

0000038c <.Loc.41>:

    ; irsend tmpreg
    irsend
 38c:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <tx_mask>
 390:	20 30       	cpi	r18, 0x00	; 0
 392:	29 f0       	breq	.+10     	; 0x39e <.L1^B5>
 394:	00 00       	nop
 396:	25 b1       	in	r18, 0x05	; 5
 398:	23 2b       	or	r18, r19
 39a:	25 b9       	out	0x05, r18	; 5
 39c:	04 c0       	rjmp	.+8      	; 0x3a6 <.L2^B3>

0000039e <.L1^B5>:
 39e:	00 00       	nop
 3a0:	00 00       	nop
 3a2:	00 00       	nop
 3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <.L2^B3>

000003a6 <.L2^B3>:
 3a6:	00 00       	nop
 3a8:	00 00       	nop
 3aa:	00 00       	nop
 3ac:	30 95       	com	r19
 3ae:	25 b1       	in	r18, 0x05	; 5
 3b0:	23 23       	and	r18, r19
 3b2:	25 b9       	out	0x05, r18	; 5

000003b4 <.Loc.42>:
    delay_cycles (rx_bitcycles-irsend_cycles-9)
 3b4:	00 00       	nop
 3b6:	21 e5       	ldi	r18, 0x51	; 81

000003b8 <.L1^B6>:
 3b8:	2a 95       	dec	r18
 3ba:	f1 f7       	brne	.-4      	; 0x3b8 <.L1^B6>

000003bc <.Loc.43>:

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
 3bc:	44 0f       	add	r20, r20

000003be <.Loc.44>:
    adc bitmaskH, bitmaskH
 3be:	55 1f       	adc	r21, r21

000003c0 <.Loc.45>:

    ; if (bitidex--) goto sendbit
    dec bitidx
 3c0:	9a 95       	dec	r25

000003c2 <.Loc.46>:
    brne sendbit
 3c2:	01 f7       	brne	.-64     	; 0x384 <sendbit>

000003c4 <.Loc.47>:

    ; if (byteidx--) goto sendbyte
    dec byteidx
 3c4:	8a 95       	dec	r24

000003c6 <.Loc.48>:
    brne sendbyte
 3c6:	a9 f6       	brne	.-86     	; 0x372 <sendbyte>

000003c8 <.Loc.49>:

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
 3c8:	20 b7       	in	r18, 0x30	; 48

000003ca <.Loc.50>:
    ori tmpreg1, (1<<ACI)
 3ca:	20 61       	ori	r18, 0x10	; 16

000003cc <.Loc.51>:
    out ACSR, tmpreg1
 3cc:	20 bf       	out	0x30, r18	; 48

000003ce <.Loc.52>:
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
 3ce:	a4 b9       	out	0x04, r26	; 4

000003d0 <.Loc.53>:

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
 3d0:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <tx_mask>

000003d4 <.Loc.54>:
    com tmpreg2
 3d4:	30 95       	com	r19

000003d6 <.Loc.55>:
    in tmpreg1, IR_PORT
 3d6:	25 b1       	in	r18, 0x05	; 5

000003d8 <.Loc.56>:
    and tmpreg1, tmpreg2
 3d8:	23 23       	and	r18, r19

000003da <.Loc.57>:
    out IR_PORT, tmpreg1
 3da:	25 b9       	out	0x05, r18	; 5

000003dc <.Loc.58>:

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
 3dc:	0f be       	out	0x3f, r0	; 63

000003de <.Loc.59>:
    return 1
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	08 95       	ret

000003e2 <main>:
    cli();
 3e2:	f8 94       	cli

000003e4 <.Loc.2>:
    ir_ddr |= ir_mask;
 3e4:	21 9a       	sbi	0x04, 1	; 4

000003e6 <.Loc.4>:
    led_ddr |= led_mask;
 3e6:	25 9a       	sbi	0x04, 5	; 4

000003e8 <.Loc.6>:
    led_port &= ~led_mask;
 3e8:	2d 98       	cbi	0x05, 5	; 5

000003ea <.Loc.8>:
    ir_port &= ~ir_mask;
 3ea:	29 98       	cbi	0x05, 1	; 5

000003ec <.Loc.10>:
    ACSR |= (1<<ACD);
 3ec:	80 b7       	in	r24, 0x30	; 48

000003ee <.Loc.11>:
 3ee:	80 68       	ori	r24, 0x80	; 128
 3f0:	80 bf       	out	0x30, r24	; 48

000003f2 <.Loc.12>:
    UBRR0 = UBRR_VALUE;
 3f2:	8c e0       	ldi	r24, 0x0C	; 12
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 3fa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

000003fe <.Loc.14>:
    UCSR0A &= ~(1<<U2X0);
 3fe:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 402:	8d 7f       	andi	r24, 0xFD	; 253
 404:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>

00000408 <.Loc.16>:
    UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);              // No parity, 8 bits comm, 1 stop bit
 408:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>

0000040c <.Loc.17>:
 40c:	86 60       	ori	r24, 0x06	; 6
 40e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>

00000412 <.Loc.18>:
    UCSR0B |= (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);    // Enable reception, transmission, and reception interrupts
 412:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

00000416 <.Loc.19>:
 416:	88 69       	ori	r24, 0x98	; 152
 418:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

0000041c <.Loc.20>:
    sei();
 41c:	78 94       	sei

0000041e <.Loc.21>:
    tx_mask = ir_mask;
 41e:	82 e0       	ldi	r24, 0x02	; 2
 420:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <tx_mask>

00000424 <.Loc.23>:
    bootmsg = (bootmsg_t*)msg.data;
 424:	84 e0       	ldi	r24, 0x04	; 4
 426:	e8 2e       	mov	r14, r24
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	f8 2e       	mov	r15, r24
 42c:	f0 92 03 01 	sts	0x0103, r15	; 0x800103 <bootmsg+0x1>
 430:	e0 92 02 01 	sts	0x0102, r14	; 0x800102 <bootmsg>

00000434 <.Loc.25>:
    gpsmsg = (gpsmsg_t*)msg.data;
 434:	f0 92 01 01 	sts	0x0101, r15	; 0x800101 <gpsmsg+0x1>
 438:	e0 92 00 01 	sts	0x0100, r14	; 0x800100 <gpsmsg>

0000043c <.Loc.27>:
    rawmsg = (uint8_t*)&msg;
 43c:	f0 92 11 01 	sts	0x0111, r15	; 0x800111 <rawmsg+0x1>
 440:	e0 92 10 01 	sts	0x0110, r14	; 0x800110 <rawmsg>

00000444 <.LVL0>:
        led_port |= led_mask;
 444:	2d 9a       	sbi	0x05, 5	; 5

00000446 <.LBB28>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 446:	2f ef       	ldi	r18, 0xFF	; 255
 448:	81 ee       	ldi	r24, 0xE1	; 225
 44a:	94 e0       	ldi	r25, 0x04	; 4

0000044c <.L1^B1>:
 44c:	21 50       	subi	r18, 0x01	; 1
 44e:	80 40       	sbci	r24, 0x00	; 0
 450:	90 40       	sbci	r25, 0x00	; 0
 452:	e1 f7       	brne	.-8      	; 0x44c <.L1^B1>
 454:	00 c0       	rjmp	.+0      	; 0x456 <L0^A>

00000456 <L0^A>:
	...

00000458 <.LBE28>:
        led_port &= ~led_mask;
 458:	2d 98       	cbi	0x05, 5	; 5

0000045a <.LBB34>:
 45a:	ef ef       	ldi	r30, 0xFF	; 255
 45c:	f1 ee       	ldi	r31, 0xE1	; 225
 45e:	24 e0       	ldi	r18, 0x04	; 4

00000460 <.L1^B2>:
 460:	e1 50       	subi	r30, 0x01	; 1
 462:	f0 40       	sbci	r31, 0x00	; 0
 464:	20 40       	sbci	r18, 0x00	; 0
 466:	e1 f7       	brne	.-8      	; 0x460 <.L1^B2>
 468:	00 c0       	rjmp	.+0      	; 0x46a <L0^A>

0000046a <L0^A>:
	...

0000046c <.LBE34>:
        led_port |= led_mask;
 46c:	2d 9a       	sbi	0x05, 5	; 5

0000046e <.LBB40>:
 46e:	8f ef       	ldi	r24, 0xFF	; 255
 470:	91 ee       	ldi	r25, 0xE1	; 225
 472:	e4 e0       	ldi	r30, 0x04	; 4

00000474 <.L1^B3>:
 474:	81 50       	subi	r24, 0x01	; 1
 476:	90 40       	sbci	r25, 0x00	; 0
 478:	e0 40       	sbci	r30, 0x00	; 0
 47a:	e1 f7       	brne	.-8      	; 0x474 <.L1^B3>
 47c:	00 c0       	rjmp	.+0      	; 0x47e <L0^A>

0000047e <L0^A>:
	...

00000480 <.LBE40>:
        led_port &= ~led_mask;
 480:	2d 98       	cbi	0x05, 5	; 5

00000482 <.LBB41>:
 482:	ff ef       	ldi	r31, 0xFF	; 255
 484:	21 ee       	ldi	r18, 0xE1	; 225
 486:	84 e0       	ldi	r24, 0x04	; 4

00000488 <.L1^B4>:
 488:	f1 50       	subi	r31, 0x01	; 1
 48a:	20 40       	sbci	r18, 0x00	; 0
 48c:	80 40       	sbci	r24, 0x00	; 0
 48e:	e1 f7       	brne	.-8      	; 0x488 <.L1^B4>
 490:	00 c0       	rjmp	.+0      	; 0x492 <L0^A>

00000492 <L0^A>:
	...

00000494 <.LBE41>:
        led_port |= led_mask;
 494:	2d 9a       	sbi	0x05, 5	; 5

00000496 <.LBB42>:
 496:	9f ef       	ldi	r25, 0xFF	; 255
 498:	e1 ee       	ldi	r30, 0xE1	; 225
 49a:	f4 e0       	ldi	r31, 0x04	; 4

0000049c <.L1^B5>:
 49c:	91 50       	subi	r25, 0x01	; 1
 49e:	e0 40       	sbci	r30, 0x00	; 0
 4a0:	f0 40       	sbci	r31, 0x00	; 0
 4a2:	e1 f7       	brne	.-8      	; 0x49c <.L1^B5>
 4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <L0^A>

000004a6 <L0^A>:
	...

000004a8 <.LBE42>:
        led_port &= ~led_mask;
 4a8:	2d 98       	cbi	0x05, 5	; 5

000004aa <.LBB43>:
 4aa:	2f ef       	ldi	r18, 0xFF	; 255
 4ac:	81 ee       	ldi	r24, 0xE1	; 225
 4ae:	94 e0       	ldi	r25, 0x04	; 4

000004b0 <.L1^B6>:
 4b0:	21 50       	subi	r18, 0x01	; 1
 4b2:	80 40       	sbci	r24, 0x00	; 0
 4b4:	90 40       	sbci	r25, 0x00	; 0
 4b6:	e1 f7       	brne	.-8      	; 0x4b0 <.L1^B6>
 4b8:	00 c0       	rjmp	.+0      	; 0x4ba <L0^A>

000004ba <L0^A>:
	...

000004bc <.LBE43>:
        led_port |= led_mask;
 4bc:	2d 9a       	sbi	0x05, 5	; 5

000004be <.LBB44>:
 4be:	ef ef       	ldi	r30, 0xFF	; 255
 4c0:	f1 ee       	ldi	r31, 0xE1	; 225
 4c2:	24 e0       	ldi	r18, 0x04	; 4

000004c4 <.L1^B7>:
 4c4:	e1 50       	subi	r30, 0x01	; 1
 4c6:	f0 40       	sbci	r31, 0x00	; 0
 4c8:	20 40       	sbci	r18, 0x00	; 0
 4ca:	e1 f7       	brne	.-8      	; 0x4c4 <.L1^B7>
 4cc:	00 c0       	rjmp	.+0      	; 0x4ce <L0^A>

000004ce <L0^A>:
	...

000004d0 <.LBE44>:
        led_port &= ~led_mask;
 4d0:	2d 98       	cbi	0x05, 5	; 5

000004d2 <.LBB45>:
 4d2:	8f ef       	ldi	r24, 0xFF	; 255
 4d4:	91 ee       	ldi	r25, 0xE1	; 225
 4d6:	e4 e0       	ldi	r30, 0x04	; 4

000004d8 <.L1^B8>:
 4d8:	81 50       	subi	r24, 0x01	; 1
 4da:	90 40       	sbci	r25, 0x00	; 0
 4dc:	e0 40       	sbci	r30, 0x00	; 0
 4de:	e1 f7       	brne	.-8      	; 0x4d8 <.L1^B8>
 4e0:	00 c0       	rjmp	.+0      	; 0x4e2 <L0^A>

000004e2 <L0^A>:
	...

000004e4 <.LBE45>:
        led_port |= led_mask;
 4e4:	2d 9a       	sbi	0x05, 5	; 5

000004e6 <.LBB46>:
 4e6:	ff ef       	ldi	r31, 0xFF	; 255
 4e8:	21 ee       	ldi	r18, 0xE1	; 225
 4ea:	84 e0       	ldi	r24, 0x04	; 4

000004ec <.L1^B9>:
 4ec:	f1 50       	subi	r31, 0x01	; 1
 4ee:	20 40       	sbci	r18, 0x00	; 0
 4f0:	80 40       	sbci	r24, 0x00	; 0
 4f2:	e1 f7       	brne	.-8      	; 0x4ec <.L1^B9>
 4f4:	00 c0       	rjmp	.+0      	; 0x4f6 <L0^A>

000004f6 <L0^A>:
	...

000004f8 <.LBE46>:
        led_port &= ~led_mask;
 4f8:	2d 98       	cbi	0x05, 5	; 5

000004fa <.LBB47>:
 4fa:	9f ef       	ldi	r25, 0xFF	; 255
 4fc:	e1 ee       	ldi	r30, 0xE1	; 225
 4fe:	f4 e0       	ldi	r31, 0x04	; 4

00000500 <.L1^B10>:
 500:	91 50       	subi	r25, 0x01	; 1
 502:	e0 40       	sbci	r30, 0x00	; 0
 504:	f0 40       	sbci	r31, 0x00	; 0
 506:	e1 f7       	brne	.-8      	; 0x500 <.L1^B10>
 508:	00 c0       	rjmp	.+0      	; 0x50a <L0^A>

0000050a <L0^A>:
	...

0000050c <.LBE47>:
                msg.type = BOOTPGM_PAGE;
 50c:	91 e8       	ldi	r25, 0x81	; 129
 50e:	b9 2e       	mov	r11, r25

00000510 <.Loc.153>:
                memset(&msg, 0, sizeof(message_t)-sizeof(msg.crc));
 510:	29 e0       	ldi	r18, 0x09	; 9
 512:	c2 2e       	mov	r12, r18

00000514 <.Loc.154>:
                msg.type = GPS;
 514:	dd 24       	eor	r13, r13
 516:	d3 94       	inc	r13

00000518 <.L3>:
        if (has_new_packet) {
 518:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <has_new_packet>

0000051c <.Loc.158>:
 51c:	88 23       	and	r24, r24
 51e:	e1 f3       	breq	.-8      	; 0x518 <.L3>

00000520 <.Loc.159>:
            has_new_packet = 0;
 520:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <has_new_packet>

00000524 <.Loc.161>:
            switch(packet_type) {
 524:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <packet_type>
 528:	84 30       	cpi	r24, 0x04	; 4
 52a:	09 f4       	brne	.+2      	; 0x52e <L0^A+0x2>

0000052c <L0^A>:
 52c:	ac c0       	rjmp	.+344    	; 0x686 <.L4>
 52e:	08 f0       	brcs	.+2      	; 0x532 <L0^A+0x2>

00000530 <L0^A>:
 530:	51 c0       	rjmp	.+162    	; 0x5d4 <.L5>
 532:	82 30       	cpi	r24, 0x02	; 2
 534:	09 f4       	brne	.+2      	; 0x538 <L0^A+0x2>

00000536 <L0^A>:
 536:	ea c0       	rjmp	.+468    	; 0x70c <.L6>
 538:	83 30       	cpi	r24, 0x03	; 3
 53a:	09 f0       	breq	.+2      	; 0x53e <.LVL21>

0000053c <L0^A>:
 53c:	96 c0       	rjmp	.+300    	; 0x66a <.L45>

0000053e <.LVL21>:
                    rawmsg[i] = new_packet[i+2];
 53e:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <rawmsg>
 542:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <rawmsg+0x1>

00000546 <.Loc.165>:
 546:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <new_packet+0x2>

0000054a <.Loc.166>:
 54a:	80 83       	st	Z, r24

0000054c <.LVL22>:
 54c:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <rawmsg>
 550:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <rawmsg+0x1>

00000554 <.Loc.171>:
 554:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <new_packet+0x3>

00000558 <.Loc.172>:
 558:	81 83       	std	Z+1, r24	; 0x01

0000055a <.LVL23>:
 55a:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <rawmsg>
 55e:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <rawmsg+0x1>

00000562 <.Loc.177>:
 562:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <new_packet+0x4>

00000566 <.Loc.178>:
 566:	82 83       	std	Z+2, r24	; 0x02

00000568 <.LVL24>:
 568:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <new_packet+0x5>

0000056c <.Loc.183>:
 56c:	83 83       	std	Z+3, r24	; 0x03

0000056e <.LVL25>:
 56e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <new_packet+0x6>

00000572 <.Loc.188>:
 572:	84 83       	std	Z+4, r24	; 0x04

00000574 <.LVL26>:
 574:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <new_packet+0x7>

00000578 <.Loc.193>:
 578:	85 83       	std	Z+5, r24	; 0x05

0000057a <.LVL27>:
 57a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <new_packet+0x8>

0000057e <.Loc.198>:
 57e:	86 83       	std	Z+6, r24	; 0x06

00000580 <.LVL28>:
 580:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <new_packet+0x9>

00000584 <.Loc.203>:
 584:	87 83       	std	Z+7, r24	; 0x07

00000586 <.LVL29>:
 586:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <new_packet+0xa>

0000058a <.Loc.208>:
 58a:	80 87       	std	Z+8, r24	; 0x08

0000058c <.LVL30>:
 58c:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <new_packet+0xb>

00000590 <.Loc.213>:
 590:	81 87       	std	Z+9, r24	; 0x09

00000592 <.LVL31>:
 592:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <new_packet+0xc>

00000596 <.Loc.218>:
 596:	82 87       	std	Z+10, r24	; 0x0a

00000598 <.LVL32>:
 598:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <new_packet+0xd>

0000059c <.Loc.223>:
 59c:	83 87       	std	Z+11, r24	; 0x0b

0000059e <.LVL33>:
                while(!has_new_packet) {
 59e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <has_new_packet>
 5a2:	81 11       	cpse	r24, r1
 5a4:	b9 cf       	rjmp	.-142    	; 0x518 <.L3>

000005a6 <.L12>:
                    message_send(&msg);
 5a6:	84 e0       	ldi	r24, 0x04	; 4
 5a8:	91 e0       	ldi	r25, 0x01	; 1
 5aa:	0e 94 6f 01 	call	0x2de	; 0x2de <message_send>

000005ae <.LVL34>:
                    led_port |= led_mask;
 5ae:	2d 9a       	sbi	0x05, 5	; 5

000005b0 <.LBB48>:
 5b0:	8f e6       	ldi	r24, 0x6F	; 111
 5b2:	97 e1       	ldi	r25, 0x17	; 23

000005b4 <.L1^B11>:
 5b4:	01 97       	sbiw	r24, 0x01	; 1
 5b6:	f1 f7       	brne	.-4      	; 0x5b4 <.L1^B11>
 5b8:	00 c0       	rjmp	.+0      	; 0x5ba <L0^A>

000005ba <L0^A>:
	...

000005bc <.LBE48>:
                    led_port &= ~led_mask;
 5bc:	2d 98       	cbi	0x05, 5	; 5

000005be <.LBB50>:
 5be:	ef e6       	ldi	r30, 0x6F	; 111
 5c0:	f7 e1       	ldi	r31, 0x17	; 23

000005c2 <.L1^B12>:
 5c2:	31 97       	sbiw	r30, 0x01	; 1
 5c4:	f1 f7       	brne	.-4      	; 0x5c2 <.L1^B12>
 5c6:	00 c0       	rjmp	.+0      	; 0x5c8 <L0^A>

000005c8 <L0^A>:
	...

000005ca <.LBE50>:
                while(!has_new_packet) {
 5ca:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <has_new_packet>
 5ce:	88 23       	and	r24, r24
 5d0:	51 f3       	breq	.-44     	; 0x5a6 <.L12>
 5d2:	a2 cf       	rjmp	.-188    	; 0x518 <.L3>

000005d4 <.L5>:
            switch(packet_type) {
 5d4:	85 30       	cpi	r24, 0x05	; 5
 5d6:	09 f4       	brne	.+2      	; 0x5da <L0^A+0x2>

000005d8 <L0^A>:
 5d8:	e6 c0       	rjmp	.+460    	; 0x7a6 <.L10>
 5da:	86 30       	cpi	r24, 0x06	; 6
 5dc:	09 f0       	breq	.+2      	; 0x5e0 <.LVL40>

000005de <L0^A>:
 5de:	9c cf       	rjmp	.-200    	; 0x518 <.L3>

000005e0 <.LVL40>:
                    rawmsg[i] = new_packet[i+2];
 5e0:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <rawmsg>
 5e4:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <rawmsg+0x1>

000005e8 <.Loc.255>:
 5e8:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <new_packet+0x2>

000005ec <.Loc.256>:
 5ec:	80 83       	st	Z, r24

000005ee <.LVL41>:
 5ee:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <rawmsg>
 5f2:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <rawmsg+0x1>

000005f6 <.Loc.261>:
 5f6:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <new_packet+0x3>

000005fa <.Loc.262>:
 5fa:	81 83       	std	Z+1, r24	; 0x01

000005fc <.LVL42>:
 5fc:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <rawmsg>
 600:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <rawmsg+0x1>

00000604 <.Loc.267>:
 604:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <new_packet+0x4>

00000608 <.Loc.268>:
 608:	82 83       	std	Z+2, r24	; 0x02

0000060a <.LVL43>:
 60a:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <new_packet+0x5>

0000060e <.Loc.273>:
 60e:	83 83       	std	Z+3, r24	; 0x03

00000610 <.LVL44>:
 610:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <new_packet+0x6>

00000614 <.Loc.278>:
 614:	84 83       	std	Z+4, r24	; 0x04

00000616 <.LVL45>:
 616:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <new_packet+0x7>

0000061a <.Loc.283>:
 61a:	85 83       	std	Z+5, r24	; 0x05

0000061c <.LVL46>:
 61c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <new_packet+0x8>

00000620 <.Loc.288>:
 620:	86 83       	std	Z+6, r24	; 0x06

00000622 <.LVL47>:
 622:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <new_packet+0x9>

00000626 <.Loc.293>:
 626:	87 83       	std	Z+7, r24	; 0x07

00000628 <.LVL48>:
 628:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <new_packet+0xa>

0000062c <.Loc.298>:
 62c:	80 87       	std	Z+8, r24	; 0x08

0000062e <.LVL49>:
 62e:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <new_packet+0xb>

00000632 <.Loc.303>:
 632:	81 87       	std	Z+9, r24	; 0x09

00000634 <.LVL50>:
                msg.crc = message_crc(&msg);
 634:	84 e0       	ldi	r24, 0x04	; 4
 636:	91 e0       	ldi	r25, 0x01	; 1
 638:	0e 94 b7 00 	call	0x16e	; 0x16e <message_crc>

0000063c <.LVL51>:
 63c:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <msg+0xb>
 640:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <msg+0xa>

00000644 <.Loc.309>:
                message_send(&msg);
 644:	84 e0       	ldi	r24, 0x04	; 4
 646:	91 e0       	ldi	r25, 0x01	; 1
 648:	0e 94 6f 01 	call	0x2de	; 0x2de <message_send>

0000064c <.LVL52>:
                led_port |= led_mask;
 64c:	2d 9a       	sbi	0x05, 5	; 5

0000064e <.LBB52>:
 64e:	8f e6       	ldi	r24, 0x6F	; 111
 650:	97 e1       	ldi	r25, 0x17	; 23

00000652 <.L1^B13>:
 652:	01 97       	sbiw	r24, 0x01	; 1
 654:	f1 f7       	brne	.-4      	; 0x652 <.L1^B13>
 656:	00 c0       	rjmp	.+0      	; 0x658 <L0^A>

00000658 <L0^A>:
	...

0000065a <.LBE52>:
                led_port &= ~led_mask;
 65a:	2d 98       	cbi	0x05, 5	; 5

0000065c <.LBB54>:
 65c:	ef e6       	ldi	r30, 0x6F	; 111
 65e:	f7 e1       	ldi	r31, 0x17	; 23

00000660 <.L1^B14>:
 660:	31 97       	sbiw	r30, 0x01	; 1
 662:	f1 f7       	brne	.-4      	; 0x660 <.L1^B14>
 664:	00 c0       	rjmp	.+0      	; 0x666 <L0^A>

00000666 <L0^A>:
	...

00000668 <.Loc.331>:
	}
	else
		__ticks = (uint16_t)__tmp;
	_delay_loop_2(__ticks);
#endif
}
 668:	57 cf       	rjmp	.-338    	; 0x518 <.L3>

0000066a <.L45>:
            switch(packet_type) {
 66a:	81 30       	cpi	r24, 0x01	; 1
 66c:	09 f0       	breq	.+2      	; 0x670 <.Loc.334>

0000066e <L0^A>:
 66e:	54 cf       	rjmp	.-344    	; 0x518 <.L3>

00000670 <.Loc.334>:
                leds_toggle = !leds_toggle;
 670:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <leds_toggle>
 674:	91 e0       	ldi	r25, 0x01	; 1
 676:	81 11       	cpse	r24, r1
 678:	90 e0       	ldi	r25, 0x00	; 0

0000067a <.Loc.336>:
 67a:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <leds_toggle>

0000067e <.Loc.337>:
                if (leds_toggle) {
 67e:	81 11       	cpse	r24, r1
 680:	e0 c0       	rjmp	.+448    	; 0x842 <.L17>

00000682 <.Loc.339>:
                    led_port |= led_mask;
 682:	2d 9a       	sbi	0x05, 5	; 5
 684:	49 cf       	rjmp	.-366    	; 0x518 <.L3>

00000686 <.L4>:
                msg.type = BOOTPGM_PAGE;
 686:	b0 92 0d 01 	sts	0x010D, r11	; 0x80010d <msg+0x9>

0000068a <.Loc.343>:
                bootmsg->page_address = new_packet[2];
 68a:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <bootmsg>
 68e:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <bootmsg+0x1>

00000692 <.Loc.345>:
 692:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <new_packet+0x2>

00000696 <.Loc.346>:
 696:	80 83       	st	Z, r24

00000698 <.Loc.347>:
                bootmsg->unused = 0;
 698:	10 86       	std	Z+8, r1	; 0x08

0000069a <.Loc.349>:
                cli();
 69a:	f8 94       	cli

0000069c <.LVL57>:
                for (i = 0; i<SPM_PAGESIZE && !has_new_packet; i+=6) {
 69c:	c9 e1       	ldi	r28, 0x19	; 25
 69e:	d1 e0       	ldi	r29, 0x01	; 1

000006a0 <.Loc.352>:
 6a0:	10 e0       	ldi	r17, 0x00	; 0
 6a2:	20 c0       	rjmp	.+64     	; 0x6e4 <.L18>

000006a4 <.L19>:
                    bootmsg->page_offset = i/2;
 6a4:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <bootmsg>
 6a8:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <bootmsg+0x1>

000006ac <.Loc.355>:
 6ac:	81 2f       	mov	r24, r17
 6ae:	86 95       	lsr	r24
 6b0:	11 96       	adiw	r26, 0x01	; 1
 6b2:	8c 93       	st	X, r24
 6b4:	11 97       	sbiw	r26, 0x01	; 1

000006b6 <.Loc.356>:
                    memcpy(&(bootmsg->word1), new_packet+3+i, 6);
 6b6:	12 96       	adiw	r26, 0x02	; 2
 6b8:	86 e0       	ldi	r24, 0x06	; 6
 6ba:	fe 01       	movw	r30, r28

000006bc <.L^B1>:
 6bc:	01 90       	ld	r0, Z+
 6be:	0d 92       	st	X+, r0
 6c0:	8a 95       	dec	r24
 6c2:	e1 f7       	brne	.-8      	; 0x6bc <.L^B1>

000006c4 <.Loc.357>:
                    msg.crc = message_crc(&msg);
 6c4:	84 e0       	ldi	r24, 0x04	; 4
 6c6:	91 e0       	ldi	r25, 0x01	; 1
 6c8:	0e 94 b7 00 	call	0x16e	; 0x16e <message_crc>

000006cc <.LVL59>:
 6cc:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <msg+0xb>
 6d0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <msg+0xa>

000006d4 <.Loc.360>:
                    message_send(&msg);
 6d4:	84 e0       	ldi	r24, 0x04	; 4
 6d6:	91 e0       	ldi	r25, 0x01	; 1
 6d8:	0e 94 6f 01 	call	0x2de	; 0x2de <message_send>

000006dc <.LVL60>:
                for (i = 0; i<SPM_PAGESIZE && !has_new_packet; i+=6) {
 6dc:	1a 5f       	subi	r17, 0xFA	; 250

000006de <.Loc.362>:
 6de:	26 96       	adiw	r28, 0x06	; 6
 6e0:	14 38       	cpi	r17, 0x84	; 132
 6e2:	21 f0       	breq	.+8      	; 0x6ec <.L20>

000006e4 <.L18>:
 6e4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <has_new_packet>

000006e8 <.Loc.364>:
 6e8:	88 23       	and	r24, r24
 6ea:	e1 f2       	breq	.-72     	; 0x6a4 <.L19>

000006ec <.L20>:
                sei();
 6ec:	78 94       	sei

000006ee <.Loc.366>:
                led_port |= led_mask;
 6ee:	2d 9a       	sbi	0x05, 5	; 5

000006f0 <.LBB56>:
	__builtin_avr_delay_cycles(__ticks_dc);
 6f0:	8f e1       	ldi	r24, 0x1F	; 31
 6f2:	9e e4       	ldi	r25, 0x4E	; 78

000006f4 <.L1^B15>:
 6f4:	01 97       	sbiw	r24, 0x01	; 1
 6f6:	f1 f7       	brne	.-4      	; 0x6f4 <.L1^B15>
 6f8:	00 c0       	rjmp	.+0      	; 0x6fa <L0^A>

000006fa <L0^A>:
	...

000006fc <.LBE56>:
                led_port &= ~led_mask;
 6fc:	2d 98       	cbi	0x05, 5	; 5

000006fe <.LBB58>:
 6fe:	ef e1       	ldi	r30, 0x1F	; 31
 700:	fe e4       	ldi	r31, 0x4E	; 78

00000702 <.L1^B16>:
 702:	31 97       	sbiw	r30, 0x01	; 1
 704:	f1 f7       	brne	.-4      	; 0x702 <.L1^B16>
 706:	00 c0       	rjmp	.+0      	; 0x708 <L0^A>

00000708 <L0^A>:
	...

0000070a <.Loc.387>:
}
 70a:	06 cf       	rjmp	.-500    	; 0x518 <.L3>

0000070c <.L6>:
                    rawmsg[i] = new_packet[i+2];
 70c:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <rawmsg>
 710:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <rawmsg+0x1>

00000714 <.Loc.392>:
 714:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <new_packet+0x2>

00000718 <.Loc.393>:
 718:	80 83       	st	Z, r24

0000071a <.LVL67>:
 71a:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <rawmsg>
 71e:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <rawmsg+0x1>

00000722 <.Loc.398>:
 722:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <new_packet+0x3>

00000726 <.Loc.399>:
 726:	81 83       	std	Z+1, r24	; 0x01

00000728 <.LVL68>:
 728:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <rawmsg>
 72c:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <rawmsg+0x1>

00000730 <.Loc.404>:
 730:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <new_packet+0x4>

00000734 <.Loc.405>:
 734:	82 83       	std	Z+2, r24	; 0x02

00000736 <.LVL69>:
 736:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <new_packet+0x5>

0000073a <.Loc.410>:
 73a:	83 83       	std	Z+3, r24	; 0x03

0000073c <.LVL70>:
 73c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <new_packet+0x6>

00000740 <.Loc.415>:
 740:	84 83       	std	Z+4, r24	; 0x04

00000742 <.LVL71>:
 742:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <new_packet+0x7>

00000746 <.Loc.420>:
 746:	85 83       	std	Z+5, r24	; 0x05

00000748 <.LVL72>:
 748:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <new_packet+0x8>

0000074c <.Loc.425>:
 74c:	86 83       	std	Z+6, r24	; 0x06

0000074e <.LVL73>:
 74e:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <new_packet+0x9>

00000752 <.Loc.430>:
 752:	87 83       	std	Z+7, r24	; 0x07

00000754 <.LVL74>:
 754:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <new_packet+0xa>

00000758 <.Loc.435>:
 758:	80 87       	std	Z+8, r24	; 0x08

0000075a <.LVL75>:
 75a:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <new_packet+0xb>

0000075e <.Loc.440>:
 75e:	81 87       	std	Z+9, r24	; 0x09

00000760 <.LVL76>:
                msg.crc = message_crc(&msg);
 760:	84 e0       	ldi	r24, 0x04	; 4
 762:	91 e0       	ldi	r25, 0x01	; 1
 764:	0e 94 b7 00 	call	0x16e	; 0x16e <message_crc>

00000768 <.LVL77>:
 768:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <msg+0xb>
 76c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <msg+0xa>

00000770 <.Loc.446>:
                while(!has_new_packet) {
 770:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <has_new_packet>
 774:	81 11       	cpse	r24, r1
 776:	d0 ce       	rjmp	.-608    	; 0x518 <.L3>

00000778 <.L14>:
                    message_send(&msg);
 778:	84 e0       	ldi	r24, 0x04	; 4
 77a:	91 e0       	ldi	r25, 0x01	; 1
 77c:	0e 94 6f 01 	call	0x2de	; 0x2de <message_send>

00000780 <.LVL78>:
                    led_port |= led_mask;
 780:	2d 9a       	sbi	0x05, 5	; 5

00000782 <.LBB60>:
	__builtin_avr_delay_cycles(__ticks_dc);
 782:	8f e6       	ldi	r24, 0x6F	; 111
 784:	97 e1       	ldi	r25, 0x17	; 23

00000786 <.L1^B17>:
 786:	01 97       	sbiw	r24, 0x01	; 1
 788:	f1 f7       	brne	.-4      	; 0x786 <.L1^B17>
 78a:	00 c0       	rjmp	.+0      	; 0x78c <L0^A>

0000078c <L0^A>:
	...

0000078e <.LBE60>:
                    led_port &= ~led_mask;
 78e:	2d 98       	cbi	0x05, 5	; 5

00000790 <.LBB62>:
 790:	ef e6       	ldi	r30, 0x6F	; 111
 792:	f7 e1       	ldi	r31, 0x17	; 23

00000794 <.L1^B18>:
 794:	31 97       	sbiw	r30, 0x01	; 1
 796:	f1 f7       	brne	.-4      	; 0x794 <.L1^B18>
 798:	00 c0       	rjmp	.+0      	; 0x79a <L0^A>

0000079a <L0^A>:
	...

0000079c <.LBE62>:
                while(!has_new_packet) {
 79c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <has_new_packet>
 7a0:	88 23       	and	r24, r24
 7a2:	51 f3       	breq	.-44     	; 0x778 <.L14>
 7a4:	b9 ce       	rjmp	.-654    	; 0x518 <.L3>

000007a6 <.L10>:
                memset(&msg, 0, sizeof(message_t)-sizeof(msg.crc));
 7a6:	f7 01       	movw	r30, r14
 7a8:	2c 2d       	mov	r18, r12

000007aa <.L^B2>:
 7aa:	11 92       	st	Z+, r1
 7ac:	2a 95       	dec	r18
 7ae:	e9 f7       	brne	.-6      	; 0x7aa <.L^B2>

000007b0 <.Loc.473>:
                msg.type = GPS;
 7b0:	d0 92 0d 01 	sts	0x010D, r13	; 0x80010d <msg+0x9>

000007b4 <.Loc.475>:
                cli();
 7b4:	f8 94       	cli

000007b6 <.LVL84>:
                for (i = 2; i<PACKET_SIZE-GPS_MSGSIZE; i += GPS_MSGSIZE) {
 7b6:	08 e1       	ldi	r16, 0x18	; 24
 7b8:	11 e0       	ldi	r17, 0x01	; 1

000007ba <.L23>:
                    memcpy(gpsmsg, new_packet+i, GPS_MSGSIZE);
 7ba:	c0 91 00 01 	lds	r28, 0x0100	; 0x800100 <gpsmsg>
 7be:	d0 91 01 01 	lds	r29, 0x0101	; 0x800101 <gpsmsg+0x1>
 7c2:	88 e0       	ldi	r24, 0x08	; 8
 7c4:	f8 01       	movw	r30, r16
 7c6:	de 01       	movw	r26, r28

000007c8 <.L^B3>:
 7c8:	01 90       	ld	r0, Z+
 7ca:	0d 92       	st	X+, r0
 7cc:	8a 95       	dec	r24
 7ce:	e1 f7       	brne	.-8      	; 0x7c8 <.L^B3>

000007d0 <.Loc.479>:
                    if (gpsmsg->id == 0 && gpsmsg->x == 0 && gpsmsg->y == 0 && gpsmsg->theta == 0 && gpsmsg->unused == 0)
 7d0:	88 81       	ld	r24, Y
 7d2:	99 81       	ldd	r25, Y+1	; 0x01
 7d4:	89 2b       	or	r24, r25
 7d6:	79 f4       	brne	.+30     	; 0x7f6 <.L21>

000007d8 <.Loc.481>:
 7d8:	8a 81       	ldd	r24, Y+2	; 0x02
 7da:	9b 81       	ldd	r25, Y+3	; 0x03
 7dc:	89 2b       	or	r24, r25
 7de:	59 f4       	brne	.+22     	; 0x7f6 <.L21>

000007e0 <.Loc.482>:
 7e0:	8c 81       	ldd	r24, Y+4	; 0x04
 7e2:	9d 81       	ldd	r25, Y+5	; 0x05
 7e4:	89 2b       	or	r24, r25
 7e6:	39 f4       	brne	.+14     	; 0x7f6 <.L21>

000007e8 <.Loc.483>:
 7e8:	8e 81       	ldd	r24, Y+6	; 0x06
 7ea:	81 11       	cpse	r24, r1
 7ec:	04 c0       	rjmp	.+8      	; 0x7f6 <.L21>

000007ee <.Loc.484>:
 7ee:	8f 81       	ldd	r24, Y+7	; 0x07
 7f0:	98 85       	ldd	r25, Y+8	; 0x08
 7f2:	89 2b       	or	r24, r25
 7f4:	b1 f0       	breq	.+44     	; 0x822 <.L22>

000007f6 <.L21>:
                    msg.crc = message_crc(&msg);
 7f6:	84 e0       	ldi	r24, 0x04	; 4
 7f8:	91 e0       	ldi	r25, 0x01	; 1
 7fa:	0e 94 b7 00 	call	0x16e	; 0x16e <message_crc>

000007fe <.LVL86>:
 7fe:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <msg+0xb>
 802:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <msg+0xa>

00000806 <.Loc.488>:
                    message_send(&msg);
 806:	84 e0       	ldi	r24, 0x04	; 4
 808:	91 e0       	ldi	r25, 0x01	; 1
 80a:	0e 94 6f 01 	call	0x2de	; 0x2de <message_send>

0000080e <.LBB64>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 80e:	85 e8       	ldi	r24, 0x85	; 133

00000810 <.L1^B19>:
 810:	8a 95       	dec	r24
 812:	f1 f7       	brne	.-4      	; 0x810 <.L1^B19>
	...

00000816 <.LBE64>:
                for (i = 2; i<PACKET_SIZE-GPS_MSGSIZE; i += GPS_MSGSIZE) {
 816:	08 5f       	subi	r16, 0xF8	; 248
 818:	1f 4f       	sbci	r17, 0xFF	; 255

0000081a <.LVL89>:
 81a:	91 e0       	ldi	r25, 0x01	; 1
 81c:	08 39       	cpi	r16, 0x98	; 152
 81e:	19 07       	cpc	r17, r25
 820:	61 f6       	brne	.-104    	; 0x7ba <.L23>

00000822 <.L22>:
                sei();
 822:	78 94       	sei

00000824 <.Loc.502>:
                led_port |= led_mask;
 824:	2d 9a       	sbi	0x05, 5	; 5

00000826 <.LBB66>:
	__builtin_avr_delay_cycles(__ticks_dc);
 826:	ef e1       	ldi	r30, 0x1F	; 31
 828:	fe e4       	ldi	r31, 0x4E	; 78

0000082a <.L1^B20>:
 82a:	31 97       	sbiw	r30, 0x01	; 1
 82c:	f1 f7       	brne	.-4      	; 0x82a <.L1^B20>
 82e:	00 c0       	rjmp	.+0      	; 0x830 <L0^A>

00000830 <L0^A>:
	...

00000832 <.LBE66>:
                led_port &= ~led_mask;
 832:	2d 98       	cbi	0x05, 5	; 5

00000834 <.LBB68>:
 834:	8f e1       	ldi	r24, 0x1F	; 31
 836:	9e e4       	ldi	r25, 0x4E	; 78

00000838 <.L1^B21>:
 838:	01 97       	sbiw	r24, 0x01	; 1
 83a:	f1 f7       	brne	.-4      	; 0x838 <.L1^B21>
 83c:	00 c0       	rjmp	.+0      	; 0x83e <L0^A>

0000083e <L0^A>:
	...

00000840 <.Loc.523>:
}
 840:	6b ce       	rjmp	.-810    	; 0x518 <.L3>

00000842 <.L17>:
                    led_port &= ~led_mask;
 842:	2d 98       	cbi	0x05, 5	; 5
 844:	69 ce       	rjmp	.-814    	; 0x518 <.L3>

00000846 <memcpy>:
 846:	fb 01       	movw	r30, r22
 848:	dc 01       	movw	r26, r24
 84a:	02 c0       	rjmp	.+4      	; 0x850 <.L_memcpy_start>

0000084c <.L_memcpy_loop>:
 84c:	01 90       	ld	r0, Z+
 84e:	0d 92       	st	X+, r0

00000850 <.L_memcpy_start>:
 850:	41 50       	subi	r20, 0x01	; 1
 852:	50 40       	sbci	r21, 0x00	; 0
 854:	d8 f7       	brcc	.-10     	; 0x84c <.L_memcpy_loop>
 856:	08 95       	ret

00000858 <_exit>:
 858:	f8 94       	cli

0000085a <__stop_program>:
 85a:	ff cf       	rjmp	.-2      	; 0x85a <__stop_program>
